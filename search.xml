<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java-多线程</title>
      <link href="2021/02/08/java-duo-xian-cheng/"/>
      <url>2021/02/08/java-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="1-1、并发与并行"><a href="#1-1、并发与并行" class="headerlink" title="1.1、并发与并行"></a>1.1、并发与并行</h4><hr><ul><li><strong>并发</strong>:指两个或者多个事件在<strong>同一时间段内</strong>发生的。</li><li><strong>并行</strong>：指两个或者多个事件在<strong>同一时刻</strong>发生（同时发生）。</li></ul><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20210208221317571.png"></p><blockquote><p>注意：单核处理器的计算机肯定是不能并行的处理多个任务的，只能是多个任务在单个CPU上并行运行。同理，线程也是一样，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个线程一个线程的去运行，当系统只有一个CPU时，线程会以某种顺序执行多个线程，我们把这种情况称之为线程调度。</p></blockquote><h4 id="1-2、进程与线程"><a href="#1-2、进程与线程" class="headerlink" title="1.2、进程与线程"></a>1.2、进程与线程</h4><hr><ul><li><p><strong>进程</strong>：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p></li><li><p><strong>线程</strong>：线程是进程中的一个执行单位，负责当前进程中的程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。</p><p>简而言之：一个程序运行后至少有一个进程，一个进程中可以包含多个线程。</p></li></ul><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20210208223622305.png" alt="进程的概念"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20210208223917448.png" alt="电脑任务栏进程示意图"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/8ac4a392aef9575051bc5ee86fa53cf.png"></p><p><strong>线程调度：</strong></p><hr><ul><li><p>分时调度</p><p>所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间。</p></li><li><p>抢占式调度</p><p>优先让优先级高的线程使用CPU，如果线程的优先级相同，那么会随机选择一个（线程随机性），Java使用的为抢先式调度。</p></li></ul><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20210208230121623.png" alt="设置线程的优先级"></p><h4 id="1-3、创建线程类"><a href="#1-3、创建线程类" class="headerlink" title="1.3、创建线程类"></a>1.3、创建线程类</h4><hr><p>Java使用<code>java.lang.Thread</code>类代表<strong>线程</strong>，所有的线程对象都必须是Thread类或者其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。Java中通过继承Thread类来<strong>创建</strong>并<strong>启动多线程</strong>的步骤如下：</p><p>​    1.定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务，因此把run()方法称为线程执行体。</p><p>​    2.创建Thread子类的实例，即创建了线程对象 。</p><p>​    3.调用线程对象的start()方法来启动该线程。</p><p>代码如下：</p><p>主线程测试类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo05<span class="token punctuation">.</span></span><span class="token class-name">Thread</span><span class="token punctuation">;</span><span class="token comment">/** * @date Created by 林春燕 on 2021/2/9 23:20 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//定义循环，执行20次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"--&gt;"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo05<span class="token punctuation">.</span></span><span class="token class-name">Thread</span><span class="token punctuation">;</span><span class="token comment">/** * @date Created by 林春燕 on 2021/2/9 23:16 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** *  主线程：执行主（main）方法的线程 * *  单线程程序：java程序中只有一个线程 *  执行从main方法开始，从上到下依次执行 * *  JVM执行main方法，main方法会进入到栈内存 * JVM会栈操作系统开辟一条main方法通向cpu的执行路径 * cpu就可以通过这个路径来执行main方法 * 而这个路径有一个名字叫main（主）线程 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01MainThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"浅悦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ArithmeticException: / by zero</span>        <span class="token comment">//出现异常时，后面的“林春燕”不能执行，这就是单线程。</span>        <span class="token class-name">Person</span> p2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"林春燕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20210210000041757.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/1%E6%9C%AC.png" alt="主线程的概念分析图"></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Could not read from remote repository的解决方法</title>
      <link href="2020/12/25/hexo-could-not-read-from-remote-repository-de-jie-jue-fang-fa/"/>
      <url>2020/12/25/hexo-could-not-read-from-remote-repository-de-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h3><p>当<code>hexo g -d</code>就报以下错误，解决方式如下</p><blockquote><p>Disconnected from 18.140.96.234 port 443<br>fatal: Could not read from remote repository.</p><p>Please make sure you have the correct access rights<br>and the repository exists.</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201225134447293.png"></p><h3 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">git initgit add <span class="token punctuation">.</span>git commit <span class="token operator">-</span>m “修改”git remote add origin url <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201225135043871.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git push origin master <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201225135735972.png" alt="正确图片"></p><blockquote><p>输入以上命令出现以下图片的，则问题解决完毕；如出现以下错误图片的，则继续操作命令。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201225135425451.png" alt="错误图片"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git push <span class="token operator">-</span>f origin master  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p> 如出现错误图片，再执行一次，直至出现正确图片为止</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201225135459644.png" alt="错误图片"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201225135553405.png" alt="正确图片"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201225135735972.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-添加板娘和有趣Title</title>
      <link href="2020/12/24/hexo-tian-jia-ban-niang-he-you-qu-title/"/>
      <url>2020/12/24/hexo-tian-jia-ban-niang-he-you-qu-title/</url>
      
        <content type="html"><![CDATA[<h3 id="1、添加板娘"><a href="#1、添加板娘" class="headerlink" title="1、添加板娘"></a>1、添加板娘</h3><blockquote><p>1.在主题下的<code>layout.ejs</code>文件添加如下内容</p></blockquote><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>2.在主题下的<code>head.ejs</code>文件添加如下内容</p></blockquote><ul><li>作用：把板娘固定在右边（设置在固定位置）</li></ul><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">#waifu</span><span class="token punctuation">{</span>    <span class="token property">left</span><span class="token punctuation">:</span> auto <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 440px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201226111626436.png" alt="板娘效果显示图"></p><h3 id="2、添加有趣Title"><a href="#2、添加有趣Title" class="headerlink" title="2、添加有趣Title"></a>2、添加有趣Title</h3><p>1.在主题下的<code>layout.ejs</code>文件添加如下内容</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'/js/FunnyTitle.js'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.在主题下的<code>source</code>/<code>js</code>的文件夹创建一个<code>FunnyTitle.js</code>文件，文件里面内容如下</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> OriginTitle <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">;</span><span class="token keyword">var</span> titleTime<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'visibilitychange'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[rel="icon"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token string">"https://i.loli.net/2020/12/20/BZhvzONd8lgoFAI.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'ヾ(❀╹◡╹)ﾉ~我藏好了哦'</span><span class="token punctuation">;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>titleTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[rel="icon"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token string">"https://i.loli.net/2020/12/20/BZhvzONd8lgoFAI.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'（*＾ワ＾*）被你发现啦'</span> <span class="token operator">+</span> OriginTitle<span class="token punctuation">;</span>        titleTime <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitle<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201226111334530.png" alt="离开页面的效果"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201226111408673.png" alt="回到页面的效果"></p><h3 id="操作完毕后，保存，hexo-g-d即可查看效果。"><a href="#操作完毕后，保存，hexo-g-d即可查看效果。" class="headerlink" title="操作完毕后，保存，hexo g -d即可查看效果。"></a>操作完毕后，保存，<code>hexo g -d</code>即可查看效果。</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-动态灯笼挂件</title>
      <link href="2020/12/24/hexo-dong-tai-deng-long-gua-jian/"/>
      <url>2020/12/24/hexo-dong-tai-deng-long-gua-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="添加动态灯笼挂件"><a href="#添加动态灯笼挂件" class="headerlink" title="添加动态灯笼挂件"></a>添加动态灯笼挂件</h3><blockquote><p>建议添加在主题下的header.ejs里面,我的是hexo-theme-matery主题，所以我放在<code>hexo-theme-matery</code>/<code>layout</code>/<code>_partial</code>/<code>header.ejs</code></p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201224224021407.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201224224604555.png"></p><h4 id="header-ejs"><a href="#header-ejs" class="headerlink" title="header.ejs"></a>header.ejs</h4><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!-- 元宵节灯笼样式开始 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1124px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>        <span class="token selector">.nav-menu</span> <span class="token punctuation">{</span>            <span class="token property">padding-right</span><span class="token punctuation">:</span> 96px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 760px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>        <span class="token selector">.deng-box, .deng-box1</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 40%<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.right</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token important">!important</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1024px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>        <span class="token selector">.right</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token important">!important</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token selector">.deng-box</span> <span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> -40px<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span>        <span class="token property">z-index</span><span class="token punctuation">:</span> 999<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.deng-box1</span> <span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> -30px<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token property">z-index</span><span class="token punctuation">:</span> 999<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.deng-box1 .deng</span> <span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 90px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #d8000f<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>216<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 15<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 50% 50%<span class="token punctuation">;</span>        <span class="token property">-webkit-transform-origin</span><span class="token punctuation">:</span> 50% -100px<span class="token punctuation">;</span>        <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> swing 5s infinite ease-in-out<span class="token punctuation">;</span>        <span class="token property">box-shadow</span><span class="token punctuation">:</span> -5px 5px 30px 4px <span class="token function">rgba</span><span class="token punctuation">(</span>252<span class="token punctuation">,</span> 144<span class="token punctuation">,</span> 61<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.deng</span> <span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 90px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #d8000f<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>216<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 15<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 50% 50%<span class="token punctuation">;</span>        <span class="token property">-webkit-transform-origin</span><span class="token punctuation">:</span> 50% -100px<span class="token punctuation">;</span>        <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> swing 3s infinite ease-in-out<span class="token punctuation">;</span>        <span class="token property">box-shadow</span><span class="token punctuation">:</span> -5px 5px 50px 4px <span class="token function">rgba</span><span class="token punctuation">(</span>250<span class="token punctuation">,</span> 108<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.deng-a</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 90px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #d8000f<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>216<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 15<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 12px 8px 8px 10px<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 50% 50%<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #dc8f03<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.deng-b</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 45px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 90px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #d8000f<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>216<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 15<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> -4px 8px 8px 26px<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 50% 50%<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #dc8f03<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.xian</span> <span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #dc8f03<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.shui-a</span> <span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> -5px 0 0 59px<span class="token punctuation">;</span>        <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> swing 4s infinite ease-in-out<span class="token punctuation">;</span>        <span class="token property">-webkit-transform-origin</span><span class="token punctuation">:</span> 50% -45px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #ffa500<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 0 0 5px 5px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.shui-b</span> <span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> -2px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #dc8f03<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.shui-c</span> <span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> -2px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #ffa500<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 0 0 0 5px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.deng:before</span> <span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> -7px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 29px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token property">z-index</span><span class="token punctuation">:</span> 999<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px 5px 0 0<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> solid 1px #dc8f03<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #ffa500<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #dc8f03<span class="token punctuation">,</span> #ffa500<span class="token punctuation">,</span> #dc8f03<span class="token punctuation">,</span> #ffa500<span class="token punctuation">,</span> #dc8f03<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.deng:after</span> <span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> -7px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 0 0 5px 5px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> solid 1px #dc8f03<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #ffa500<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #dc8f03<span class="token punctuation">,</span> #ffa500<span class="token punctuation">,</span> #dc8f03<span class="token punctuation">,</span> #ffa500<span class="token punctuation">,</span> #dc8f03<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"华文行楷"</span><span class="token punctuation">;</span>        <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'/fonts/华文行楷.ttf'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.deng-t</span> <span class="token punctuation">{</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> 华文行楷<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #dc8f03<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 44px<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.night .deng-t,    .night .deng-box,    .night .deng-box1</span> <span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> transparent <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token atrule"><span class="token rule">@-moz-keyframes</span> swing</span> <span class="token punctuation">{</span>        <span class="token selector">0%</span> <span class="token punctuation">{</span>                <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-10deg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token selector">50%</span> <span class="token punctuation">{</span>             <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>10deg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token selector">100%</span> <span class="token punctuation">{</span>                <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-10deg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token atrule"><span class="token rule">@-webkit-keyframes</span> swing</span> <span class="token punctuation">{</span>        <span class="token selector">0%</span> <span class="token punctuation">{</span>                <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-10deg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token selector">50%</span> <span class="token punctuation">{</span>                <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>10deg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token selector">100%</span> <span class="token punctuation">{</span>                <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-10deg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deng-box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deng<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xian<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deng-a<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deng-b<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deng-t<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>喜迎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shui shui-a<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shui-c<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shui-b<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deng-box1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deng<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xian<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deng-a<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deng-b<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deng-t<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>元旦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shui shui-a<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shui-c<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shui-b<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 元宵节灯笼样式结束 --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="保存后hexo-g-d，即可看见效果"><a href="#保存后hexo-g-d，即可看见效果" class="headerlink" title="保存后hexo g -d，即可看见效果"></a>保存后<code>hexo g -d</code>，即可看见效果</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Server 2008安装教程</title>
      <link href="2020/12/22/sql-server-2008-an-zhuang-jiao-cheng/"/>
      <url>2020/12/22/sql-server-2008-an-zhuang-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="SQL-Server-2008安装教程"><a href="#SQL-Server-2008安装教程" class="headerlink" title="SQL Server 2008安装教程"></a>SQL Server 2008安装教程</h3><blockquote><p>压缩包文件地址:</p><p>链接：<a href="https://pan.baidu.com/s/1C1zDe6k_6LLLvZrf-e8Q4A">https://pan.baidu.com/s/1C1zDe6k_6LLLvZrf-e8Q4A</a> </p><p>提取码：oui6</p></blockquote><h4 id="1、打开下载后的文件夹，双击-exe文件"><a href="#1、打开下载后的文件夹，双击-exe文件" class="headerlink" title="1、打开下载后的文件夹，双击.exe文件"></a>1、打开下载后的文件夹，双击<code>.exe</code>文件</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222215454204.png"></p><h4 id="2、点击左侧安装"><a href="#2、点击左侧安装" class="headerlink" title="2、点击左侧安装"></a>2、点击左侧<code>安装</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222172805753.png"></p><h4 id="3、选择右侧第一项：全新安装"><a href="#3、选择右侧第一项：全新安装" class="headerlink" title="3、选择右侧第一项：全新安装"></a>3、选择右侧第一项：<code>全新安装</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222172852602.png"></p><h4 id="4、等待程序"><a href="#4、等待程序" class="headerlink" title="4、等待程序"></a>4、等待程序</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222172910729.png"></p><h4 id="5、对安装规则进行检测，显示通过后点击确定"><a href="#5、对安装规则进行检测，显示通过后点击确定" class="headerlink" title="5、对安装规则进行检测，显示通过后点击确定"></a>5、对安装规则进行检测，显示通过后点击<code>确定</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222172931976.png"></p><h4 id="6、关于产品秘钥，下载程序中会自动填写秘钥，点击下一步即可"><a href="#6、关于产品秘钥，下载程序中会自动填写秘钥，点击下一步即可" class="headerlink" title="6、关于产品秘钥，下载程序中会自动填写秘钥，点击下一步即可"></a>6、关于产品秘钥，下载程序中会自动填写秘钥，点击<code>下一步</code>即可</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222173036315.png"></p><h4 id="7、勾选我接受，然后点击下一步"><a href="#7、勾选我接受，然后点击下一步" class="headerlink" title="7、勾选我接受，然后点击下一步"></a>7、勾选我接受，然后点击<code>下一步</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222173107529.png"></p><h4 id="8、对于程序支持文件，点击安装"><a href="#8、对于程序支持文件，点击安装" class="headerlink" title="8、对于程序支持文件，点击安装"></a>8、对于程序支持文件，点击<code>安装</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222173134718.png"></p><p>9、安装通过，点击<code>下一步</code></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222181839729.png"></p><h4 id="10、选择功能安装，点击下一步"><a href="#10、选择功能安装，点击下一步" class="headerlink" title="10、选择功能安装，点击下一步"></a>10、选择功能安装，点击<code>下一步</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222181934577.png"></p><h4 id="11、对功能可以点击全选，也可以根据需求自己选择，选择完毕后点击下一步"><a href="#11、对功能可以点击全选，也可以根据需求自己选择，选择完毕后点击下一步" class="headerlink" title="11、对功能可以点击全选，也可以根据需求自己选择，选择完毕后点击下一步"></a>11、对功能可以点击全选，也可以根据需求自己选择，选择完毕后点击<code>下一步</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222182037685.png"></p><h4 id="12、规则检测完成后，继续点击下一步"><a href="#12、规则检测完成后，继续点击下一步" class="headerlink" title="12、规则检测完成后，继续点击下一步"></a>12、规则检测完成后，继续点击<code>下一步</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222182106917.png"></p><h4 id="13、安装配置页面，选择默认实例，点击下一步"><a href="#13、安装配置页面，选择默认实例，点击下一步" class="headerlink" title="13、安装配置页面，选择默认实例，点击下一步"></a>13、安装配置页面，选择默认实例，点击<code>下一步</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222182151565.png"></p><h4 id="14、保证所在磁盘有对应的空间，点击下一步"><a href="#14、保证所在磁盘有对应的空间，点击下一步" class="headerlink" title="14、保证所在磁盘有对应的空间，点击下一步"></a>14、保证所在磁盘有对应的空间，点击<code>下一步</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222182238572.png"></p><h4 id="15、服务账户按图中勾选，点击下一步"><a href="#15、服务账户按图中勾选，点击下一步" class="headerlink" title="15、服务账户按图中勾选，点击下一步"></a>15、服务账户按图中勾选，点击<code>下一步</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222182436425.png"></p><h4 id="16、选择混合模式，输入sa的密码，然后点击添加当前用户，添加用户后点击下一步"><a href="#16、选择混合模式，输入sa的密码，然后点击添加当前用户，添加用户后点击下一步" class="headerlink" title="16、选择混合模式，输入sa的密码，然后点击添加当前用户，添加用户后点击下一步"></a>16、选择混合模式，输入sa的密码，然后点击添加当前用户，添加用户后点击<code>下一步</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222182616256.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222182647858.png"></p><h4 id="17、点击添加当前用户，然后点击下一步"><a href="#17、点击添加当前用户，然后点击下一步" class="headerlink" title="17、点击添加当前用户，然后点击下一步"></a>17、点击添加当前用户，然后点击<code>下一步</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222182717774.png"></p><h4 id="18、配置和错误报告直接点击下一步即可"><a href="#18、配置和错误报告直接点击下一步即可" class="headerlink" title="18、配置和错误报告直接点击下一步即可"></a>18、配置和错误报告直接点击<code>下一步</code>即可</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222182738681.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222182759769.png"></p><h4 id="19、安装配置规则通过后点击下一步"><a href="#19、安装配置规则通过后点击下一步" class="headerlink" title="19、安装配置规则通过后点击下一步"></a>19、安装配置规则通过后点击<code>下一步</code></h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222182825015.png"></p><h4 id="20、点击安装，然后开始安装，等待10分钟左右"><a href="#20、点击安装，然后开始安装，等待10分钟左右" class="headerlink" title="20、点击安装，然后开始安装，等待10分钟左右"></a>20、点击安装，然后开始安装，等待10分钟左右</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222182939938.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222183047121.png"></p><h4 id="21、安装完成，重启电脑"><a href="#21、安装完成，重启电脑" class="headerlink" title="21、安装完成，重启电脑"></a>21、安装完成，重启电脑</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222184640792.png"></p><h4 id="22、打开软件"><a href="#22、打开软件" class="headerlink" title="22、打开软件"></a>22、打开软件</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/1a1e9c94285b4e446223c6d8e9b07f0.png"></p><h4 id="23、打开新安装的软件，按照图中填写，注意密码填写设置的sa的密码，点击登录"><a href="#23、打开新安装的软件，按照图中填写，注意密码填写设置的sa的密码，点击登录" class="headerlink" title="23、打开新安装的软件，按照图中填写，注意密码填写设置的sa的密码，点击登录"></a>23、打开新安装的软件，按照图中填写，注意密码填写设置的sa的密码，点击登录</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/f33a48cf96e5481d53e597a42c03c76.png"></p><h4 id="24、如果出现图中错误，请开启对应服务。"><a href="#24、如果出现图中错误，请开启对应服务。" class="headerlink" title="24、如果出现图中错误，请开启对应服务。"></a>24、如果出现图中错误，请开启对应服务。</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/5d93f3c0393226e3f77cf29e2826d03.png"></p><h4 id="25、点击开始，选择所有程序，点击Sqlserver-2008-R2"><a href="#25、点击开始，选择所有程序，点击Sqlserver-2008-R2" class="headerlink" title="25、点击开始，选择所有程序，点击Sqlserver 2008 R2"></a>25、点击开始，选择所有程序，点击Sqlserver 2008 R2</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201222221124471.png"></p><p>26、选择配置工具，接着点击配置管理器</p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/3745b81f8e62c3d0370c40d6a20268b.png"></p><h4 id="27、在弹出的页面中，点击SQLserver服务"><a href="#27、在弹出的页面中，点击SQLserver服务" class="headerlink" title="27、在弹出的页面中，点击SQLserver服务"></a>27、在弹出的页面中，点击SQLserver服务</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/6c4d25f86bfe8dfa299b2e7d3ace66b.png"></p><h4 id="28、选择MSSQLSERVER，启动这个服务，然后就可以的登陆。"><a href="#28、选择MSSQLSERVER，启动这个服务，然后就可以的登陆。" class="headerlink" title="28、选择MSSQLSERVER，启动这个服务，然后就可以的登陆。"></a>28、选择MSSQLSERVER，启动这个服务，然后就可以的登陆。</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/dcb521e53713d5a9cdfd31f224ff539.png"></p><h4 id="29、输入登录名和密码"><a href="#29、输入登录名和密码" class="headerlink" title="29、输入登录名和密码"></a>29、输入登录名和密码</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/226088e438652c1a1e49aeb23a4d21b.png"></p><h4 id="30、安装成功"><a href="#30、安装成功" class="headerlink" title="30、安装成功"></a>30、安装成功</h4><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/8677e8e4297df03f47ed0862db92519.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决-github.com** 的响应时间过长的问题</title>
      <link href="2020/12/19/jie-jue-github.com-de-xiang-ying-shi-jian-guo-chang-de-wen-ti/"/>
      <url>2020/12/19/jie-jue-github.com-de-xiang-ying-shi-jian-guo-chang-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h4 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h4><blockquote><p>当打开自己的Github博客时，显示无法访问此网站（可以尝试更换网络，比如现在用的是联通网络，更换为电信或者移动网络）。</p></blockquote><a id="more"></a><pre class="line-numbers language-java" data-language="java"><code class="language-java">无法访问此网站github<span class="token punctuation">.</span>com<span class="token operator">*</span><span class="token operator">*</span> 的响应时间过长。请试试以下办法：检查网络连接检查代理服务器和防火墙<span class="token punctuation">]</span><span class="token punctuation">(</span>chrome<span class="token operator">-</span>error<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>chromewebdata<span class="token operator">/</span>#buttons<span class="token punctuation">)</span>运行 <span class="token class-name">Windows</span> 网络诊断<span class="token punctuation">]</span><span class="token punctuation">(</span>javascript<span class="token operator">:</span><span class="token function">diagnoseErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ERR_CONNECTION_TIMED_OUT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201219100937331.png"></p><h4 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h4><blockquote><p>刚刚无法访问，我用的是联通网络，然后换了电信网络完美解决，希望能帮助到您。</p></blockquote><h4 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3.解决方法</h4><blockquote><p>更换网络试试，换成电信网络。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201219101145953.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决-git连接github超时问题Connection timed out</title>
      <link href="2020/12/19/jie-jue-git-lian-jie-github-chao-shi-wen-ti-connection-timed-out/"/>
      <url>2020/12/19/jie-jue-git-lian-jie-github-chao-shi-wen-ti-connection-timed-out/</url>
      
        <content type="html"><![CDATA[<h3 id="亲测有效解决ssh-connect-to-host-github-com-port-22-Connection-timed-out问题"><a href="#亲测有效解决ssh-connect-to-host-github-com-port-22-Connection-timed-out问题" class="headerlink" title="亲测有效解决ssh: connect to host github.com port 22: Connection timed out问题"></a>亲测有效解决ssh: connect to host github.com port 22: Connection timed out问题</h3><ul><li>百度一直说的密钥问题，修改了依然没解决，后来发现添加几行代码到Git的位置就好了，话不多说上解决方案。</li></ul><a id="more"></a><h4 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h4><p>运行<code>hexo g -d</code>就报如下错误</p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201219095101959.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201219085748492.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">On</span> branch masternothing <span class="token keyword">to</span> <span class="token namespace">commit</span><span class="token punctuation">,</span> working tree cleanssh<span class="token operator">:</span> connect <span class="token keyword">to</span> <span class="token namespace">host</span> github<span class="token punctuation">.</span>com port <span class="token number">22</span><span class="token operator">:</span> <span class="token class-name">Connection</span> timed outfatal<span class="token operator">:</span> <span class="token class-name">Could</span> not read from remote repository<span class="token punctuation">.</span><span class="token class-name">Please</span> make sure you have the correct access rightsand the repository exists<span class="token punctuation">.</span>FATAL <span class="token punctuation">{</span>  err<span class="token operator">:</span> <span class="token class-name">Error</span><span class="token operator">:</span> <span class="token class-name">Spawn</span> failed      at <span class="token class-name">ChildProcess</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>anonymous<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token class-name">D</span><span class="token operator">:</span>\hexo\<span class="token class-name">GitHub</span>\blog\node_modules\hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git\node_modules\hexo<span class="token operator">-</span>util\lib\spawn<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">)</span>      at <span class="token class-name">ChildProcess</span><span class="token punctuation">.</span>emit <span class="token punctuation">(</span>events<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">315</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">)</span>      at <span class="token class-name">ChildProcess</span><span class="token punctuation">.</span>cp<span class="token punctuation">.</span>emit <span class="token punctuation">(</span><span class="token class-name">D</span><span class="token operator">:</span>\hexo\<span class="token class-name">GitHub</span>\blog\node_modules\cross<span class="token operator">-</span>spawn\lib\enoent<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">29</span><span class="token punctuation">)</span>      at <span class="token class-name">Process</span><span class="token punctuation">.</span><span class="token class-name">ChildProcess</span><span class="token punctuation">.</span>_handle<span class="token punctuation">.</span>onexit <span class="token punctuation">(</span>internal<span class="token operator">/</span>child_process<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">276</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    code<span class="token operator">:</span> <span class="token number">128</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token class-name">Something</span><span class="token string">'s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.htmlxxxxxxxxxx On branch masternothing to commit, working tree cleanssh: connect to host github.com port 22: Connection timed outfatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.FATAL {  err: Error: Spawn failed      at ChildProcess.&lt;anonymous&gt; (D:\hexo\GitHub\blog\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)      at ChildProcess.emit (events.js:315:20)      at ChildProcess.cp.emit (D:\hexo\GitHub\blog\node_modules\cross-spawn\lib\enoent.js:34:29)      at Process.ChildProcess._handle.onexit (internal/child_process.js:276:12) {    code: 128  }} Something'</span>s wrong<span class="token punctuation">.</span> <span class="token class-name">Maybe</span> you can find the solution here<span class="token operator">:</span> <span class="token operator">%</span>s https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>hexo<span class="token punctuation">.</span>io<span class="token operator">/</span>docs<span class="token operator">/</span>troubleshooting<span class="token punctuation">.</span>htmlhexo g <span class="token operator">-</span>djava<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h4><blockquote><p>当出现：ssh: connect to host github.com port 22: Connection timed out时，这表明连接超时</p></blockquote><h4 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3.解决方法"></a>3.解决方法</h4><blockquote><p>连接超时，首先找到git的安装目录，找到/etc/ssh/ssh_config文件,使用记事本打开它。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201219100146983.png"></p><blockquote><p>把如下内容复制到ssh_config文件的末尾处：并记得保存。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Host</span> github<span class="token punctuation">.</span>com<span class="token class-name">User</span> git<span class="token class-name">Hostname</span> ssh<span class="token punctuation">.</span>github<span class="token punctuation">.</span>com<span class="token class-name">PreferredAuthentications</span> publickey<span class="token class-name">IdentityFile</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token class-name">Port</span> <span class="token number">443</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>添加完成后如下图</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201219100409233.png"></p><blockquote><p>再输入<code>hexo g -d</code>,完美解决。希望能帮到你</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201219095101959.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201219085845887.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客matery主题</title>
      <link href="2020/12/16/hexo-bo-ke-matery-zhu-ti/"/>
      <url>2020/12/16/hexo-bo-ke-matery-zhu-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li></ul><a id="more"></a><ul><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng">@HarborZeng</a></li><li><a href="https://github.com/shw2018">@shw2018</a></li><li><a href="https://github.com/L1cardo">@L1cardo</a></li><li><a href="https://github.com/Five-great">@Five-great</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/nate-lin/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-09-30 19:15:33</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-09-30 19:15:33</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-09-30 19:15:33</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-09-30 19:15:33</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-09-30 19:15:33</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201216172754552.png"></p><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201216180014212.png"></p><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201216172601931.png"></p><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201216175948561.png"></p><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (theme.socialLink.github) { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>         <span class="token comment"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841</span>     <span class="token comment"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201216200528487.png" alt="首页"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201216201005473.png" alt="首页文章列表"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201216201903276.png" alt="首页文章列表"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201216201932007.png" alt="首页文章列表"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201216200745007.png" alt="首页文章列表"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201216200859752.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本变更记录"><a href="#版本变更记录" class="headerlink" title="版本变更记录"></a>版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/README.md">CHANGELOG.md</a></p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-自定义异常</title>
      <link href="2020/12/15/java-zi-ding-yi-yi-chang/"/>
      <url>2020/12/15/java-zi-ding-yi-yi-chang/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h3><blockquote><p>为什么需要自定义异常类</p></blockquote><ul><li>我们说了Java中不同的异常类，分别表示着某一种具体的异常情况，那么在开发中总是有些异常情况是SUN没有定义好的，此时我们根据自己业务的异常情况来定义异常。例如年龄负数问题，考试成绩负数问题等等。</li></ul><a id="more"></a><ul><li>在上述代码中，发现这些异常都是JDK内部定义好的，但是实际开发也会出现很多异常，这些异常很有可能在JDK中没有定义过的，那么能不能自己定义异常呢？</li></ul><blockquote><p>什么是定义异常类</p></blockquote><ul><li>在开发中根据自己业务的异常情况来定义异常类。</li><li>自定义一个业务逻辑异常：<code>RegisterException</code>。一个注册异常类。</li></ul><blockquote><p>异常类如何定义</p></blockquote><ul><li>自定义一个编译期异常：自定义类并继承于<code>java.lang.Exception</code>。</li><li>自定义一个运行时期异常类：自定义类并继承于<code>java.lang.RuntimeException</code>。</li></ul><p><strong>使用格式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> xxxException <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token operator">|</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    添加一个空函数的构造方法    添加一个带异常信息的构造方法<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<br>   1.自定义异常一般都是以Exception结尾。说明类是一个异常类<br>   2.自定义异常类，必须的继承Exception或者RuntimeException<br>       继承Exception：那么自定义的异常类就是一个运行期异常，无需处理，交给虚拟机处理（中断处理）</p></blockquote><h3 id="1-2、自定义异常–例子"><a href="#1-2、自定义异常–例子" class="headerlink" title="1.2、自定义异常–例子"></a>1.2、自定义异常–例子</h3><p><strong>要求：我们模拟注册操作，如果用户名已存在，则抛出异常提示：亲，该用户名已经被注册。</strong></p><blockquote><p>分析：<br>   1.使用数组保存已经注册过的用户名（数据库）<br>   2.使用Scanner获取用户输入的注册的用户名（前端，页面）<br>   3.定义一个方法，对输入中的注册的用户名进行判断<br>     遍历存储已经注册过用户名和用户输入的用户名比较<br>         true:<br>             用户名已经存在，抛出RegisterException异常，告知用户“亲，该用户名已经被注册”；<br>         false:<br>             继续遍历比较<br>      如果循环结束了，还没有找到重复的用户名，提示“恭喜您，注册成功！”；</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo04<span class="token punctuation">.</span></span><span class="token class-name">MyException</span><span class="token punctuation">;</span><span class="token comment">/** * @date Created by 林春燕 on 2021/2/7 21:57 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token comment">/*    自定义异常类：        java提供的异常类，不够我们使用，需要自己自定义一些异常类    格式：        public class xxxException extends Exception | RuntimeException{            添加一个空函数的构造方法            添加一个带异常信息的构造方法        }     注意：        1.自定义异常一般都是以Exception结尾。说明类是一个异常类        2.自定义异常类，必须的继承Exception或者RuntimeException            继承Exception：那么自定义的异常类就是一个运行期异常，无需处理，交给虚拟机处理（中断处理）*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegisterException</span> <span class="token keyword">extends</span> <span class="token comment">/*Exception*/</span><span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    <span class="token comment">//添加一个空参数的构造方法</span>    <span class="token keyword">public</span> <span class="token class-name">RegisterException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/*    添加一个带异常信息的构造方法    查看源码发现，所有的异常类都会一个带有异常信息的构造方法，方法内部会调用父类带异常信息的构造方法，让父类来处理这个异常信息*/</span>    <span class="token keyword">public</span> <span class="token class-name">RegisterException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo04<span class="token punctuation">.</span></span><span class="token class-name">MyException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/** * @date Created by 林春燕 on 2021/2/7 21:56 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token comment">/*   要求：我们模拟注册操作，如果用户名已存在，则抛出异常提示：亲，该用户名已经被注册。   分析：      1.使用数组保存已经注册过的用户名（数据库）      2.使用Scanner获取用户输入的注册的用户名（前端，页面）      3.定义一个方法，对输入中的注册的用户名进行判断        遍历存储已经注册过用户名和用户输入的用户名比较            true:                用户名已经存在，抛出RegisterException异常，告知用户“亲，该用户名已经被注册”；            false:                继续遍历比较         如果循环结束了，还没有找到重复的用户名，提示“恭喜您，注册成功！”； */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01RegisterException</span> <span class="token punctuation">{</span>    <span class="token comment">//1.使用数组保存已经注册过的用户吗名（数据库）</span>    <span class="token keyword">static</span>  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> usernames<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token comment">/*throws RegisterException*/</span> <span class="token punctuation">{</span>        <span class="token comment">//2.使用Scanner获取用户输入的注册的用户名（前端，页面）</span>        <span class="token class-name">Scanner</span> sc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您要注册的用户名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//3.定义一个方法，对用户输入中的注册的用户名进行判断</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token comment">/*throws RegisterException*/</span> <span class="token punctuation">{</span>        <span class="token comment">//遍历存储已经注册过用户名的数组，获取每一个用户名</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token operator">:</span>usernames<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//使用获取到的用户名和用户输入的用户名比较</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//true:用户名已经存在，抛出RegisterException异常，告知用户“亲，该用户名已经被注册”；</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span>  <span class="token class-name">RegisterException</span><span class="token punctuation">(</span><span class="token string">"亲，该用户名已经被注册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RegisterException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//结束方法</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//如果循环结束了，还没有找到重复的用户名，提示“恭喜您，注册成功！”；</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜您，注册成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果图</p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20210207225152908.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20210207225607799.png"></p><p><strong>Demo01RegisterException改为Demo02RegisterException</strong></p><blockquote><p>发现是效果一样的</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo04<span class="token punctuation">.</span></span><span class="token class-name">MyException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/** * @date Created by 林春燕 on 2021/2/7 21:56 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token comment">/*   要求：我们模拟注册操作，如果用户名已存在，则抛出异常提示：亲，该用户名已经被注册。   分析：      1.使用数组保存已经注册过的用户名（数据库）      2.使用Scanner获取用户输入的注册的用户名（前端，页面）      3.定义一个方法，对输入中的注册的用户名进行判断        遍历存储已经注册过用户名和用户输入的用户名比较            true:                用户名已经存在，抛出RegisterException异常，告知用户“亲，该用户名已经被注册”；            false:                继续遍历比较         如果循环结束了，还没有找到重复的用户名，提示“恭喜您，注册成功！”； */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02RegisterException</span> <span class="token punctuation">{</span>    <span class="token comment">//1.使用数组保存已经注册过的用户吗名（数据库）</span>    <span class="token keyword">static</span>  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> usernames<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token comment">/*throws RegisterException*/</span> <span class="token punctuation">{</span>        <span class="token comment">//2.使用Scanner获取用户输入的注册的用户名（前端，页面）</span>        <span class="token class-name">Scanner</span> sc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您要注册的用户名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//3.定义一个方法，对用户输入中的注册的用户名进行判断</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token comment">/*throws RegisterException*/</span> <span class="token punctuation">{</span>        <span class="token comment">//遍历存储已经注册过用户名的数组，获取每一个用户名</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token operator">:</span>usernames<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//使用获取到的用户名和用户输入的用户名比较</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//true:用户名已经存在，抛出RegisterException异常，告知用户“亲，该用户名已经被注册”；</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span>  <span class="token class-name">RegisterException</span><span class="token punctuation">(</span><span class="token string">" 亲，该用户名已经被注册！ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行期异常无需处理，交给JVM处理，中断处理</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//如果循环结束了，还没有找到重复的用户名，提示“恭喜您，注册成功！”；</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恭喜您，注册成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果图</p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20210207230433077.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20210207230459446.png"></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-异常的处理</title>
      <link href="2020/12/13/java-yi-chang-de-chu-li/"/>
      <url>2020/12/13/java-yi-chang-de-chu-li/</url>
      
        <content type="html"><![CDATA[<ul><li>Java异常处理的五个关键字：<strong>try、catch、finally、throw、throws</strong></li></ul><h3 id="1-1、抛出异常throw"><a href="#1-1、抛出异常throw" class="headerlink" title="1.1、抛出异常throw"></a>1.1、抛出异常throw</h3><blockquote><p>在编写程序时，我们必须要考虑程序出现的情况。比如，在定义方法时，方法需要接受参数。那么，当调用方法接受的参数时，首先需要先对参数数据进行合法的判断，数据若不合法，就应该告诉调用者，传递合法的数据进来。这时需要使用抛出异常的方式告诉调用者。</p></blockquote><a id="more"></a><p>在java中，提供一个throw关键字，它用来抛出一个指定的异常对象。那么，一个抛出异常具体如何操作呢？</p><ul><li>创建一个异常对象。封装一些提示信息（信息内容可以自己编写）。</li><li>需要将这个异常对象告知给调用者。怎么告知呢？怎么将这个异常对象传递到调用者呢?通过关键字throw就可以完成。throw异常对象。</li></ul><blockquote><p>throw用在方法内，用来抛出一个异常对象，将这个异常对象传递到调用者处，并结束当前方法的执行。</p></blockquote><p><strong>使用格式：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">throw</span> <span class="token keyword">new</span> 异常类名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><p><strong>传递的数组的值是null</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo01<span class="token punctuation">.</span></span><span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @date Created by 林春燕 on 2020/12/13 21:51 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token comment">/*    throw关键字    作用：        可以使用throw关键字在指定的方法中抛出指定的异常    使用格式：        throw new xxxException("异常产生的原因");    注意：        1.throw关键字必须写在方法内部        2.throw关键字后边new的对象必须是Exception或者Exception的子类对象        3.throw关键字抛出指定的异常对象，我们就必须处理这个异常对象            throw关键字后边创建的是RuntimeException或者是RuntimeExcetion的子类对象，            我们可以不处理，默认交给JVM处理（打印异常对象，中断程序）            throw关键字后创建的是编程异常（写代码的时候报错），我们就必须处理这个异常。要么throws,要么try...catch */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03Throw</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> e<span class="token operator">=</span><span class="token function">getElement</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 定义一个方法，获取数组指定索引的元素     * 参数：     *  int[] arr     *  int index     *  以后（工作中）我们首先必须对方法传递过来的参数进行合法性的校验     *  如果参数不合法。那么我们就必须使用抛出异常的方式，告知方法的调用者，传递的参数有问题     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/*            我们可以对传递过来的参数数组，进行合法性校验            如果数组arr的值是null            那么我们就抛出空指针异常，告知方法的调用者“传递的数组的值null”         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"传递的数组的值是null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ele<span class="token operator">=</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ele<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果图</p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201213221130986.png"></p><p><strong>传递的索引超出了数组的使用范围</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo01<span class="token punctuation">.</span></span><span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @date Created by 林春燕 on 2020/12/13 21:51 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token comment">/*    throw关键字    作用：        可以使用throw关键字在指定的方法中抛出指定的异常    使用格式：        throw new xxxException("异常产生的原因");    注意：        1.throw关键字必须写在方法内部        2.throw关键字后边new的对象必须是Exception或者Exception的子类对象        3.throw关键字抛出指定的异常对象，我们就必须处理这个异常对象            throw关键字后边创建的是RuntimeException或者是RuntimeExcetion的子类对象，            我们可以不处理，默认交给JVM处理（打印异常对象，中断程序）            throw关键字后创建的是编程异常（写代码的时候报错），我们就必须处理这个异常。要么throws,要么try...catch */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03Throw</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//int[] arr=null;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> e<span class="token operator">=</span><span class="token function">getElement</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 定义一个方法，获取数组指定索引的元素     * 参数：     *  int[] arr     *  int index     *  以后（工作中）我们首先必须对方法传递过来的参数进行合法性的校验     *  如果参数不合法。那么我们就必须使用抛出异常的方式，告知方法的调用者，传递的参数有问题     *  注意：     *      NullPointerException是一个运行异常，我们不用处理，默认交给JVM处理     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/*            我们可以对传递过来的参数数组，进行合法性校验            如果数组arr的值是null            那么我们就抛出空指针异常，告知方法的调用者“传递的数组的值null”         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"传递的数组的值是null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/*            我们可以对传递过来的参数数组，进行合法性校验            如果数组arr的值是null            那么我们就抛出索引越界异常，告知方法的调用者“传递的索引超出了数组的使用范围”         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>index<span class="token operator">&gt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"传递的索引超出了数组的使用范围"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ele<span class="token operator">=</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ele<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果图</p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201213221949000.png"></p><h3 id="1-2、Object非空判断"><a href="#1-2、Object非空判断" class="headerlink" title="1.2、Object非空判断"></a>1.2、Object非空判断</h3><blockquote><p>还记得我们学习过一个类Object吗,曾经提过它由一些静态的实用方法组成，这些方法是null-save(空指针安全的)或者null-tolerant(容忍空指针的)，那么在它的源码中，对对象为null的值进行了抛出异常操作。</p></blockquote><ul><li><code>public static &lt;T&gt; T requireNonNull(T obj)</code>:查看指定引用对象不是null.</li></ul><p>查看源码发现这里对null的进行了抛出异常操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Object非空判断的代码演示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo01<span class="token punctuation">.</span></span><span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token comment">/** * @date Created by 林春燕 on 2020/12/13 22:59 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token comment">/*    Object类中的静态方法    public static &lt;T&gt; T requireNonNull(T obj)`:查看指定引用对象不是null.    源码：        public static &lt;T&gt; T requireNonNull(T obj){        if(obj==null)            throw new NullPointerException();        return obj;        } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04Object</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//对传递过来的参数进行合法性判断，判断是否为null</span>       <span class="token comment">/*        if(obj==null){            throw new NullPointerException("传递的对象是null")        }*/</span>        <span class="token comment">//Objects.requireNonNull(obj);</span>         <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">"传递的对象是null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果图</p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201213231123279.png"></p><h3 id="1-3、声明异常throws"><a href="#1-3、声明异常throws" class="headerlink" title="1.3、声明异常throws"></a>1.3、声明异常throws</h3><p><strong>声明异常</strong>：将问题标识出来，报告给调用者。如果方法内通过throw抛出了编译时异常，而没有捕获处理，那么必须通过throws进行声明，让调用者去处理。</p><p>关键字<strong>throws</strong>运用于方法声明之上，用于表示当前方法不处理异常，而是提醒该方法的调用者来处理异常（抛出异常）。</p><p><strong>声明异常格式：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符 返回值 方法名（参数） <span class="token keyword">throws</span> 异常类名<span class="token number">1</span>，异常类名<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>声明异常的代码演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo01<span class="token punctuation">.</span></span><span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>security<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>login<span class="token punctuation">.</span></span><span class="token class-name">FailedLoginException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * @date Created by 林春燕 on 2020/12/14 15:09 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token comment">/*    throws关键字：异常处理的第一种方式，交给别人处理    作用：        当方法内部异常对象的时候，那么我们就必须处理这个异常        可以使用throws关键字处理异常对象，会把异常对象声明抛出给方法的调用者处理        （自己不处理，给别处理），最终交给JVM处理--&gt;中断处理        使用格式：在方法声明时使用            修饰符 返回值类型 方法名（参数列表） throws AAAException,BBBException...{                throws new AAAException("产生原因");                throws new AAAException("产生原因");                ...            }         注意：            1.throws关键字必须写在方法声明处            2.throws关键字后面声明的异常必须是Exception或者是Exception的子类            3.方法内部如果抛出了多个异常对象，那么throws后面必须也声明多个异常                如果抛出了多个异常对象有父类关系，那么直接声明父类异常即可            4.调用了一个声明抛出异常的方法，我们就必须的处理声明的异常                要么继续使用throws声明抛出，交给方法的调用者处理，最终交给JVM                要么try...catch自己处理异常 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05Throws</span> <span class="token punctuation">{</span>    <span class="token comment">/*        FailedLoginException extends IOException        如果抛出的多个异常对象有子父类关系，那么直接声明父类异常即可     */</span>    <span class="token comment">//public static void main(String[] args) throws FailedLoginException ,IOException{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"c:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    定义一个方法，对文件的路径进行合法判断    如果路径不是“c:\\a.txt”,那么我们就抛出文件找不到异常对象，告知方法的调用者     注意：       FailedLoginException 是编译异常，抛出了编译异常，就必须处理这个异常       可以使用throws继续声明抛出FailedLoginException这个异常对象，让方法的调用者处理     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FailedLoginException</span> <span class="token punctuation">,</span><span class="token class-name">IOException</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"d:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FailedLoginException</span><span class="token punctuation">(</span><span class="token string">"传递的文件路径不是c:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/*            如果传递的路径不是txt结尾            那么我们就抛出IO异常对象，告知方法的调用者，文件的后缀名不对         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"文件的后缀名不对"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"路径没有问题，读取文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果图</p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201214202034961.png"></p><h3 id="1-4、捕获异常try…catch"><a href="#1-4、捕获异常try…catch" class="headerlink" title="1.4、捕获异常try…catch"></a>1.4、捕获异常try…catch</h3><blockquote><ul><li>try中可能会抛出多个异常对象，那么就可以使用多个catch来处理这些异常对象</li><li>如果try中产生了异常，那么就会执行catch中异常处理逻辑，执行完try的代码，继续执行try…catch之后的代码</li></ul></blockquote><p>try…catch的代码演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo02<span class="token punctuation">.</span></span><span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>security<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>login<span class="token punctuation">.</span></span><span class="token class-name">FailedLoginException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @date Created by 林春燕 on 2020/12/14 19:42 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token comment">/*    try...catch:异常处理的第二种方式，自己处理异常    格式：        try{            可能产生异常的代码        }catch(){            异常的处理逻辑，异常对象之后，怎么处理异常对象            一般在工作中，会把异常的信息记录到一个日志中        }        ...        catch(异常类名 变量名){        }     注意：        1.try中可能会抛出多个异常对象，那么就可以使用多个catch来处理这些异常对象        2.如果try中产生了异常，那么就会执行catch中异常处理逻辑，执行完try的代码，继续执行try...catch之后的代码 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01TryCatch</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//可能产生异常的代码</span>            <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"d:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//try中抛出什么异常对象，catch就定义什么异常变量，用来接收这个异常对象</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//异常的处理逻辑，异常对象之后，怎么处理异常对象</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"catch-传递的文件后缀不是.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后续代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*        如果传递的路径不是txt结尾        那么我们就抛出IO异常对象，告知方法的调用者，文件的后缀名不对     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"文件的后缀名不对"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"路径没有问题，读取文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果图</p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201214202150771.png"></p><h3 id="1-5、Throwable"><a href="#1-5、Throwable" class="headerlink" title="1.5、Throwable"></a>1.5、Throwable</h3><p>如何获取异常信息：</p><p>Throwable类中定义了一些查看方法：</p><ul><li><code>public String getMessage()</code>:获取异常的描述信息，原因（提示给用户的时候，就提示错误原因）</li><li><code>public String toString()</code>:获取异常的类型和描述信息（不用）</li><li><code>public void printStackTrace()</code>:打印异常的跟踪栈信息并输出到控制台。</li></ul><p>包含了异常的类型，异常的原因还包括异常出现的位置，在开发和调试阶段都得使用printStackTrace。在开发中呢，也是可以在catch将编译期异常转换运行期异常处理</p><p>多个异常使用捕获又该如何处理呢？</p><ul><li><p>1.多个异常分别处理</p></li><li><p>2.多个异常一次捕获一次处理</p></li><li><p>3.多个异常一次捕获，多次处理</p></li></ul><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo02<span class="token punctuation">.</span></span><span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>security<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>login<span class="token punctuation">.</span></span><span class="token class-name">FailedLoginException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLOutput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @date Created by 林春燕 on 2020/12/14 19:42 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token comment">/*    try...catch:异常处理的第二种方式，自己处理异常    格式：        try{            可能产生异常的代码        }catch(){            异常的处理逻辑，异常对象之后，怎么处理异常对象            一般在工作中，会把异常的信息记录到一个日志中        }        ...        catch(异常类名 变量名){        }     注意：        1.try中可能会抛出多个异常对象，那么就可以使用多个catch来处理这些异常对象        2.如果try中产生了异常，那么就会执行catch中异常处理逻辑，执行完try的代码，继续执行try...catch之后的代码 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01TryCatch</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//可能产生异常的代码</span>            <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"d:\\a.tx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//try中抛出什么异常对象，catch就定义什么异常变量，用来接收这个异常对象</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//异常的处理逻辑，异常对象之后，怎么处理异常对象</span>            <span class="token comment">// System.out.println("catch-传递的文件后缀不是.txt");</span>        <span class="token comment">/*            Throwable类中定义了3个异常处理的方法                String getMessage() 返回此throwable的简短描述                String toString() 返回此throwable的详细消息字符串                void printStackTrace() JVM打印异常对象，默认此方法，打印的异常信息是最全面的        */</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//文件的后缀名不对</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//java.io.IOException: 文件的后缀名不对</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//java.io.IOException: 文件的后缀名不对</span>            <span class="token comment">/*                java.io.IOException: 文件的后缀名不对            at com.itheima.demo02.Exception.Demo01TryCatch.readFile(Demo01TryCatch.java:62)            at com.itheima.demo02.Exception.Demo01TryCatch.main(Demo01TryCatch.java:36)             */</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后续代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*        如果传递的路径不是txt结尾        那么我们就抛出IO异常对象，告知方法的调用者，文件的后缀名不对     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"文件的后缀名不对"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"路径没有问题，读取文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果图</p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201214205639479.png"></p><h3 id="1-6、finally代码块"><a href="#1-6、finally代码块" class="headerlink" title="1.6、finally代码块"></a>1.6、finally代码块</h3><p><strong>finally</strong>：有一些特定的代码无论异常是否发生，都需要执行。另外，因为异常会引发程序跳转，导致有些语句执行不到。而finally代码块中存放的代码都是一定会执行的。</p><p>什么时候的代码必须最终执行？</p><p>当我们在try语句中打开了一些物理资源（磁盘文件/网络连接/数据库连接等），我们都得在使用完之后，最终关闭打开的资源。</p><p>finally的语法：</p><p>try…catch…finally:自身需要处理异常，最终还得关闭资源。</p><blockquote><p>注意：finally不能单独使用</p></blockquote><p>比如在我们之后学习的IO流中，当打开了一个关联文件的资源，最后程序不管结果如何，都需要把这个资源关闭掉</p><p>finally代码参考如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo02<span class="token punctuation">.</span></span><span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @date Created by 林春燕 on 2020/12/14 21:09 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token comment">/*    finally代码块    格式：        try{            可能产生异常的代码        }catch(){            异常的处理逻辑，异常对象之后，怎么处理异常对象            一般在工作中，会把异常的信息记录到一个日志中        }        ...        catch(异常类名 变量名){        }finally{            无论是否出现异常都会执行        }       注意：        1.finally不能单独使用，必须和try一起使用        2.finally一般用于资源释放（资源回收），无论程序是否出现异常，最后都要资源释放（IO） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02TryCatchFinally</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//可能会产生异常的代码</span>            <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"c:\\a.tx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//异常的处理逻辑</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">//无论是否出现异常，都会执行</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"资源释放"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/*           如果传递的路径不是txt结尾           那么我们就抛出IO异常对象，告知方法的调用者，文件的后缀名不对        */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"文件的后缀名不对"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"路径没有问题，读取文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果图</p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201214211821401.png"></p><h3 id="1-7、异常注意事项"><a href="#1-7、异常注意事项" class="headerlink" title="1.7、异常注意事项"></a>1.7、异常注意事项</h3><ul><li><p>多个异常使用捕获又该如何处理呢？</p><ul><li><p>1.多个异常分别处理</p></li><li><p>2.多个异常一次捕获一次处理</p></li><li><p>3.多个异常一次捕获，多次处理</p></li></ul></li></ul><p>一般我们是使用一次捕获多次处理方式，格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    编写可能会出现异常的代码<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token class-name">A</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>当<span class="token keyword">try</span>中出现<span class="token class-name">A</span>类异常，就用该<span class="token keyword">catch</span>来捕获。    处理异常的代码    <span class="token comment">//记录日志/打印异常信息/继续抛出异常</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token class-name">B</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>当<span class="token keyword">try</span>中出现<span class="token class-name">B</span>类异常，就用该<span class="token keyword">catch</span>来捕获。    处理异常的代码    <span class="token comment">//记录日志/打印异常信息/继续抛出异常</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：这种异常处理方式，要求多个catch中的异常不能相同，并且若catch中的多个异常之间有子父类异常的关系，那么子类异常要求在上面的catch处理，父类异常在下面的catch处理。</p></blockquote><ul><li>运行时异常被抛出可以不处理。即不捕获也不声明抛出。</li><li>如果父类抛出了多个异常，子类覆盖父类方法时，只能抛出相同的异常或者是他的子集。</li><li>父类方法没有抛出异常，子类覆盖父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出。</li><li>在try/catch后可以追加finally代码块，其中的代码一定会执行，通常用于资源回收。</li><li>如果finally有return语句，永远返回finally中的结果，避免该情况。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络排查故障思路</title>
      <link href="2020/12/06/wang-luo-pai-cha-gu-zhang-si-lu/"/>
      <url>2020/12/06/wang-luo-pai-cha-gu-zhang-si-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="故障思路"><a href="#故障思路" class="headerlink" title="故障思路"></a>故障思路</h3><ul><li>网络巡查故障的思路**网络故障是指网络因为某些原因而不能正常、有效地工作，或者网络连接出现中断。</li></ul><p><strong>以下是故障查思路</strong></p><hr><a id="more"></a><ul><li><p>1.网络图标不见了</p><ul><li>网卡驱动没有安装</li><li>网络重置</li></ul></li><li><p>2.正常</p><ul><li>是否登录账号</li><li>是否获取的ip不正常</li></ul></li><li><p>3.感叹号</p><ul><li>查看DNS、IP是否正常</li></ul></li><li><p>4.红叉</p><ul><li><p>查看交换机是否正常</p></li><li><p>查看软件是否冲突</p></li><li><p>查看物理链路是否正常通信</p></li></ul></li></ul><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206193507867.png"></p><h4 id="1、网络图标消失时"><a href="#1、网络图标消失时" class="headerlink" title="1、网络图标消失时"></a><strong>1、网络图标消失时</strong></h4><hr><blockquote><p>网卡驱动没有安装</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206194319022.png"></p><blockquote><p>网络重置</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201208142318378.png"></p><blockquote><p>以管理员权限打开cmd 并输入命令行：<code>netsh winsock reset</code></p><p>然后重启电脑</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206195313756.png"></p><h4 id="2、网络图标正常时"><a href="#2、网络图标正常时" class="headerlink" title="2、网络图标正常时"></a><strong>2、网络图标正常时</strong></h4><hr><blockquote><p>由于办公老师私接路由器，并且没有设置好，导致路由器的dhcp功能与交换机的dhcp功能冲突，导致连接交换机的电脑可能获取到路由器分配的地址而不是交换机</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206195530308.png"></p><h4 id="3、网络图标感叹号时"><a href="#3、网络图标感叹号时" class="headerlink" title="3、网络图标感叹号时"></a><strong>3、网络图标感叹号时</strong></h4><hr><blockquote><p><strong>查看步骤</strong></p><p>1.使用win+r 调出命令窗口</p><p>2.使用ipconfig/(all)查看ip 网关 dns等</p><p>3.看看ip、dns是否异常</p><p>4.或者右键网络图标，从属性上查看ip等相关信息，以及是否是静态ip等</p><p><strong>异常状态</strong></p><p>1.169开头的ip没获取到正确的ip</p><p>2.192.168.1.x等是路由器分配的ip</p><p><strong>处理方法</strong></p><p>1.使用ipconfig/release释放配置，ipconfig/renew重新获取</p><p>2.使用自带的网络检测功能尝试处理</p><p>3.重启交换机</p><p>4.静态固定ip地址</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206200220870.png"></p><h4 id="4、网络图标红叉时"><a href="#4、网络图标红叉时" class="headerlink" title="4、网络图标红叉时"></a><strong>4、网络图标红叉时</strong></h4><hr><blockquote><p><strong>查看步骤</strong></p><p>1.查看主机后面的网络插口是否亮灯</p><p>2.win+r 使用ping 127.0.0.1查看TCP/IP协议是否正常</p><p>3.右键电脑，查看设备管理器网卡驱动是否异常</p><p>4.查看主机连接交换机这一链路是否正常</p><p><strong>处理方法</strong></p><p>1.灯不亮，网卡损坏或松动，可找专业人员修理</p><p>2.Ping 不通，代表本地机TCP/IP协议不能正常工作，重装协议</p><p>3.重装网卡驱动</p><p>4.网线损坏就换，端口损坏更换，如果是墙内的线至交换机出问题就更换。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206200829255.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206200925028.png" alt="image-20201206200925028"></p><blockquote><p><strong>总体而言就是检查物理链路是否通畅</strong></p></blockquote><blockquote><p><strong>查看步骤</strong></p><p>找到“服务”的“WLAN AutoConfig”和“WLAN Direct服务连接管理服务”</p><p><strong>处理方法</strong></p><p>设置为自动就行</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206203123599.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206203448237.png"></p><blockquote><p><strong>查看步骤</strong></p><p>win+调出调试窗口，输入<code>regedit</code>弹出注册表编辑器</p><p>选择路径为：计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Ndisuio</p><p><strong>处理方法</strong></p><p>查看Start的值，正常值为：2</p><p>查看DisplayName的值，正常值为：NDIS Usermode I/O Protocol</p><p>设置后，F5刷新，以管理员权限打开cmd在里面输入<code>netsh winsock reset</code>,(重置Winsock目录)，回车后开启无线服务，然后重启电脑。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206203828212.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206203935413.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206204143216.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206204112917.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206195313756.png"></p><h4 id="5、电话故障排查"><a href="#5、电话故障排查" class="headerlink" title="5、电话故障排查"></a><strong>5、电话故障排查</strong></h4><hr><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206201029355.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络故障 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统常见网络故障解决方法</title>
      <link href="2020/12/06/windows-xi-tong-chang-jian-wang-luo-gu-zhang-jie-jue-fang-fa/"/>
      <url>2020/12/06/windows-xi-tong-chang-jian-wang-luo-gu-zhang-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="Windows系统常见网络故障解决方法"><a href="#Windows系统常见网络故障解决方法" class="headerlink" title="Windows系统常见网络故障解决方法"></a>Windows系统常见网络故障解决方法</h3><ul><li>网络是一个很复杂，牵涉很多方面的东西。硬件的问题、软件的漏洞、病毒的侵入等等都可以引起网络的故障。对于硬件一般都是由架构网络的设备，包括网卡、网线、路由、交换机、调治解调器等设备引起的的网络故障。对于这种故障，一般可以通过PING命令查看的出来。关于软件，这是一个很复杂的东西。系统：一般TCP/IP协议如果出现鼓掌的话，网络肯定是会出现问题了。还有可能就是对用户管理出现了问题。有时候防火墙的设置也会影响网络。<strong>网络故障</strong>是指网络因为某些原因而不能正常、有效地工作，或者网络连接出现<strong>中断</strong>。</li></ul><a id="more"></a><p><strong>其中网络的解决思路可分为以下6个方面：</strong></p><hr><ul><li>1、硬件问题</li><li>2、驱动问题</li><li>3、IP问题</li><li>4、DNS问题</li><li>5、代理问题</li><li>6、系统问题</li></ul><h4 id="1、硬件问题"><a href="#1、硬件问题" class="headerlink" title="1、硬件问题"></a>1、硬件问题</h4><hr><p><strong>问题</strong></p><blockquote><p>无法连接，显示无网络状态。</p></blockquote><p><strong>原因1</strong></p><blockquote><p>可能网线没连接、网线接口松动。</p></blockquote><p><strong>解决方法</strong></p><blockquote><p>按照如下查看是否为硬件问题(<strong>操作中心–&gt;网络和Internet–&gt;更改适配器选项</strong>),查看是否网线没插好，如是请重新插一下。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206162119270.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206162228775.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206162306613.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206162336728.png"></p><p><strong>原因2</strong></p><blockquote><p>可能网络被禁用了。</p></blockquote><p><strong>解决方法</strong></p><blockquote><p>把网络启用即可。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206162119270.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206162228775.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/c6019ce460853fea6eef89d38745eb2.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206170543353.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206170656167.png"></p><h4 id="2、驱动问题"><a href="#2、驱动问题" class="headerlink" title="2、驱动问题"></a>2、驱动问题</h4><hr><p><strong>问题</strong></p><blockquote><p>刚可正常上网，突然就不能上网了,而且进适配器也不管用。</p></blockquote><p><strong>原因</strong></p><blockquote><p>可能驱动出现问题</p></blockquote><p><strong>解决方法</strong></p><blockquote><p>找到网卡卸载了，再由系统重新扫描加载回来后重启电脑即可。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206171405709.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206171438639.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206171540141.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206171608046.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206171629260.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206171717034.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206171837576.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206171912311.png"></p><h4 id="3、IP问题"><a href="#3、IP问题" class="headerlink" title="3、IP问题"></a>3、IP问题</h4><hr><p><strong>问题</strong></p><blockquote><p>无法上网</p></blockquote><p><strong>原因</strong></p><blockquote><p>可能IP地址被占用</p></blockquote><p><strong>解决方法</strong></p><blockquote><p>修改正确的IP地址，使用下面的IP地址DNS服务器地址</p><p>常用的DNS IP地址：首选114.114.114.114   备用：8.8.8.8</p><p>注意查看不了ip地址的随意写，如192.168.** . **  (**代表1-253数字内)</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206162119270.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206162228775.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/c6019ce460853fea6eef89d38745eb2.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206173441753.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206173245587.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206173008346.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206173410466.png"></p><blockquote><p>或者用cmd命令查看自己的ip是否和自己设置的一致</p><p>调出命令：Win+R  输入ipconfig/all,即可查看</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206174006044.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206174216928.png"></p><h4 id="4、DNS问题"><a href="#4、DNS问题" class="headerlink" title="4、DNS问题"></a>4、DNS问题</h4><hr><p><strong>问题</strong></p><blockquote><p>qq能登上，但网页打不开</p></blockquote><p><strong>原因</strong></p><blockquote><p>有ip的情况也有可能出现没获取到DNS的情况，对于qq能登上，但网页打不开，概率是没获取到dns问题导致的.</p></blockquote><p><strong>解决方法</strong></p><blockquote><p>这种情况按照上面第4的ip方式设置一个dns就可以了。</p></blockquote><h4 id="5、代理问题"><a href="#5、代理问题" class="headerlink" title="5、代理问题"></a>5、代理问题</h4><hr><p><strong>问题</strong></p><blockquote><p>获取不了网络，电脑无法上网</p></blockquote><p><strong>原因</strong></p><blockquote><p>可能之前开过VPN，由于VNP程序异常导致电脑无法上网</p></blockquote><p><strong>解决方法</strong></p><blockquote><p>点击IE浏览器设置图标–&gt;Internet选项–&gt;高级，下面有一个重置按钮，选择重置即可，重置后会提示重启，重启后代理导致的问题就解决了。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206192212595.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206192315092.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206192358104.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206192417419.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201206192453358.png"></p><h4 id="6、系统问题"><a href="#6、系统问题" class="headerlink" title="6、系统问题"></a>6、系统问题</h4><hr><blockquote><p>重启电脑，实在不行就换系统</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络故障 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo:command not found的解决方法</title>
      <link href="2020/12/05/hexo-command-not-found-de-jie-jue-fang-fa/"/>
      <url>2020/12/05/hexo-command-not-found-de-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p><code>hexo g -d</code>出现这种情况，主要是node的版本问题 可以通过nvm来控制一下node的版本来解决。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">hexo g <span class="token operator">-</span>d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>报错：bash: hexo: command not found</p></blockquote><a id="more"></a><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205114012331.png"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">npm install <span class="token operator">-</span>g hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205114038410.png"></p><p>后再<code>hexo g -d</code>就正常使用啦。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">hexo g <span class="token operator">-</span>d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205114920646.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WIN10系统安装教程-PE辅助安装</title>
      <link href="2020/12/04/win10-xi-tong-an-zhuang-jiao-cheng-pe-fu-zhu-an-zhuang/"/>
      <url>2020/12/04/win10-xi-tong-an-zhuang-jiao-cheng-pe-fu-zhu-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h4 id="一、如何使用PE辅助进行安装"><a href="#一、如何使用PE辅助进行安装" class="headerlink" title="一、如何使用PE辅助进行安装"></a>一、如何使用PE辅助进行安装</h4><ul><li>为什么要用PE，官方IOS虽然简单方便，步骤少，但是相应的功能也是最少的，除了装系统给磁盘格式化分区之外，什么功能都没有，况且U盘的三种格式的方法也比较僵硬，NTFS和exFAT在某些主板上不能启动，而FA32是不支持32G以上的单个硬盘分区，且不允许存放单个文件体积大于4G的文件，所以这就衍生出来了另一种安装方法，使用PE便携式操作系统辅助进行安装。</li></ul><a id="more"></a><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><hr><ul><li>PE辅助</li><li>WIN10系统安装包</li><li>驱动</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204203058329.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204170915873.png"></p><h4 id="二、PE是什么呢？"><a href="#二、PE是什么呢？" class="headerlink" title="二、PE是什么呢？"></a>二、PE是什么呢？</h4><blockquote><p>大家都知道我们的操作系统是安装到磁盘内的，磁盘是一种存储数据的J介质，我们的U盘同样是一种存储数据的介质，那我们是不是可以把系统装进U盘里呢？答案是可以的，但是由于目前大部分的U盘性能都实在是弱鸡，你把完整版的系统装进U盘，就算能成功开启也会卡的不行。所以有些人就把我们的操作系统精简掉，绝大多数用不到的功能只保留下来一些基本的运行环境和驱动，整理出来一个简化版的操作系统，这个操作系统就可以非常流畅的在U盘的运行了，这种装在U盘内的简化的操作系统就被我们称之为<strong>便携式操作系统</strong>，简称<strong>PE</strong>。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204171400383.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204171823628.png"></p><blockquote><p>既然是操作系统，就意味着如果你进入了PE,也是可以进行很多软件的运行的，你就可以运行各种系统的检测的软件，硬件检测的工具，此外，你还可以直接访问电脑的磁盘，在主系统不能正常开机启动的情况下，你还可以进行系统文件的修复或者重要数据的拷贝，这些功能都是官方ISO无法提供给你的。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204172912033.png"></p><blockquote><p>此外，由于PE本身是可以直接读取ISO安装文件呢，那所有安装包，你都不需要解压，你可以自己整理好在一个文件夹里放好，这样U盘内的文件就不会显示的很乱啊。你拿来当普通U盘用都是毫无问题的，而且你还可以在U盘内。放上各种不同版本的系统，根据不同的情况去选择，想装哪个就选择装哪个，所以我个人还是比较推崇使用PE是辅助进行安装的。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204231331414.png"></p><blockquote><p>所以如果你就是打算装个win10,你就需要的只是一个win10安装其他的操作系统，也不在乎一堆文件散在U盘里或者你新建一个文件夹（使用拉扯出来），那你就用官方ISO安装的方法就可以，而如果你是希望在U盘里保留一个简化版的PC操作系统，在主系统出现问题的时候，你能用PE进行文件修复和文件拷贝的，也打算在U盘内放上不同版本的系统,以下是存放多版本的图片。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204174557587.png"></p><blockquote><p>以应对各种情况，除了win10,你还想装win7,XP等其他系统的，你需要的是一个工具类的U盘，而不是只有一个安装包的U盘，那你就用PE辅助的安装方法，还是和PE一样，你需要准备一个8G容量以上的U盘和另外一台电脑，来制作启动盘，再次提醒请务必正确使用正规的一线品牌的U盘，不要使用路边摊手机店买的假冒劣质U盘，准备好U盘和电脑以后，现在正式教大家如何使用PE辅助安装系统，既然是使用PE辅助安装系统的话，那么首先把PE安装进U盘内。</p></blockquote><h4 id="三、安装微PE辅助"><a href="#三、安装微PE辅助" class="headerlink" title="三、安装微PE辅助"></a>三、安装微PE辅助</h4><h5 id="3-1、微PE官网"><a href="#3-1、微PE官网" class="headerlink" title="3.1、微PE官网"></a>3.1、微PE官网</h5><hr><blockquote><p>首先，我们打开浏览器进入百度，在百度的搜索栏中输入**<code>微PE官网</code>**</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204180301952.png"></p><h5 id="3-2、下载"><a href="#3-2、下载" class="headerlink" title="3.2、下载"></a>3.2、下载</h5><hr><blockquote><p>进入微PE的官网，在微PE官网的右上角有一个**<code>下载</code>**标签点进去</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204180350280.png"></p><h5 id="3-3、版本选择"><a href="#3-3、版本选择" class="headerlink" title="3.3、版本选择"></a>3.3、版本选择</h5><hr><blockquote><p>这里有很多不同版本的微PE工具箱，下载微PE工具箱V2.0 64位点击下载再打开的新页面中,点击**<code>查看2.0版本下载地址列表</code>**</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204180649320.png"></p><blockquote><p>点击**<code>我已捐赠，继续查看下载地址</code>**</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204185041364.png"></p><h5 id="3-4、选择下载方式"><a href="#3-4、选择下载方式" class="headerlink" title="3.4、选择下载方式"></a>3.4、选择下载方式</h5><hr><blockquote><p>点击**<code>PC6下载</code>**</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204184417415.png"></p><blockquote><p>点击**<code>PC6下载</code>**</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204183730154.png"></p><blockquote><p>选择自己的网络自行下载</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204183439402.png"></p><h5 id="3-5、下载微PE安装包"><a href="#3-5、下载微PE安装包" class="headerlink" title="3.5、下载微PE安装包"></a>3.5、下载微PE安装包</h5><hr><blockquote><p>普通下载将微PE的安装包下载到电脑内</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204185922159.png"></p><blockquote><p>下载后，点击等待安装</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204190016109.png"></p><h5 id="3-6、插入U盘"><a href="#3-6、插入U盘" class="headerlink" title="3.6、插入U盘"></a>3.6、插入U盘</h5><hr><blockquote><p>将U盘插入到这台电脑上，最好接到主板后面的USB接口上，笔记本的话就随意找一个USB就可以。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204190326099.png"></p><blockquote><p>插好U盘后，打开刚才下载好的微PE安装包</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204190150577.png"></p><h5 id="3-7、把PE工具箱安装到U盘"><a href="#3-7、把PE工具箱安装到U盘" class="headerlink" title="3.7、把PE工具箱安装到U盘"></a>3.7、把PE工具箱安装到U盘</h5><hr><blockquote><p>在安装的右下角有一个USB形状的图标，这个就是把PE安装进U盘，选择它。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204190909634.png"></p><blockquote><p>U盘卷标可以修改自己喜欢的名字</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204191118270.png"></p><blockquote><p>把下面两个勾选上，然后点击立即安装进U盘</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204191303959.png"></p><h5 id="3-8、准备空U盘"><a href="#3-8、准备空U盘" class="headerlink" title="3.8、准备空U盘"></a>3.8、准备空U盘</h5><blockquote><p><strong>注意</strong>：**<code>强调一下</code>**，制作PE以后会把U盘内的数据全部清空，如果你用的不是空U盘，而且U盘里面包含重要的文件，切记务必提前拷贝出来，点击开始制作就会自动进行PE的安装了。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204191425704.png"></p><blockquote><p>这里大概会花费3-10分钟，请耐心等待。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204191711586.png"></p><blockquote><p>最后点击完成安装PE就已经成功的安装进U盘内了</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204192024294.png"></p><h5 id="3-9、检查"><a href="#3-9、检查" class="headerlink" title="3.9、检查"></a>3.9、检查</h5><hr><blockquote><p>这是打开你的电脑，你就发现你的U盘被分割成了两个分区，其中一个为EFI分区，这个分区就是PE本身所在的分区不要动里面的文件也不要往里面放东西，另外一个分区就是一个空白分区，这个空白分区你可以拿来当普通U盘使用了。有的时候EFI分区会被自动隐藏，你只看见一个空白分区，这个也是正常的现象。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204192237552.png"></p><h4 id="四、下载win10的安装包"><a href="#四、下载win10的安装包" class="headerlink" title="四、下载win10的安装包"></a>四、下载win10的安装包</h4><h4 id="方法一：MSDM"><a href="#方法一：MSDM" class="headerlink" title="方法一：MSDM"></a>方法一：MSDM</h4><hr><h5 id="4-1、下载ISO镜像"><a href="#4-1、下载ISO镜像" class="headerlink" title="4.1、下载ISO镜像"></a>4.1、下载ISO镜像</h5><hr><p>百度搜索<strong>“<code>MSDM我告诉你</code>”</strong>，这里可以下载到微软官方的纯净版ISO镜像文件，而且版本和更新补丁包非常的详细，接下来教大家如何去MSDM下载系统。</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204193029410.png"></p><h5 id="4-2、选择-操作系统"><a href="#4-2、选择-操作系统" class="headerlink" title="4.2、选择**操作系统**"></a>4.2、选择**<code>操作系统</code>**</h5><hr><p><strong>下面以Win10 1909版本为例实行操作。</strong></p><blockquote><p>选择**<code>操作系统</code>**</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204193123494.png"></p><blockquote><p>右键复制ed3k链接</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204211344842.png"></p><h5 id="4-3、选择下载方式"><a href="#4-3、选择下载方式" class="headerlink" title="4.3、选择下载方式"></a>4.3、选择下载方式</h5><hr><blockquote><p>可选择迅雷，或者其它方式，次用迅雷为演示，打开迅雷界面的左上角，我们点击新建任务，迅雷会自动识别你的剪切板内的ed2K链接，点击立即下载就可以。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204212137615.png"></p><blockquote><p>点击”<strong><code>立即下载</code></strong>“</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204212241347.png"></p><blockquote><p>耐心等待即可</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204212315176.png"></p><h5 id="4-4、检查"><a href="#4-4、检查" class="headerlink" title="4.4、检查"></a>4.4、检查</h5><hr><blockquote><p>查看文件类型为iso</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204235440695.png"></p><ul><li>注意：如不想装win10,想安装win7或者更老的VISIA或者是XP系统，那你只需要在MSDN的操作系统界面选择你要下载的就可以了，下载的过程和Win10 1909是一模一样的。</li></ul><h5 id="4-5、黏贴"><a href="#4-5、黏贴" class="headerlink" title="4.5、黏贴"></a>4.5、黏贴</h5><hr><blockquote><p>把刚下载的iso镜像文件黏贴到做好PE的U盘内的空白分区中</p></blockquote><h4 id="方法二：微软官网下载ISO镜像"><a href="#方法二：微软官网下载ISO镜像" class="headerlink" title="方法二：微软官网下载ISO镜像"></a>方法二：微软官网下载ISO镜像</h4><hr><h5 id="4-1、微软官方下载win10"><a href="#4-1、微软官方下载win10" class="headerlink" title="4.1、微软官方下载win10"></a>4.1、微软官方下载win10</h5><hr><blockquote><p>接下来下载win10的安装包，微软官网的启动盘制作工具下载,百度搜索**<code>微软官方下载win10</code>**</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204203343616.png"></p><blockquote><p>下载完成后点击它安装</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204210051892.png"></p><blockquote><p>等待一会</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204204625540.png"></p><h5 id="4-2、接受条款"><a href="#4-2、接受条款" class="headerlink" title="4.2、接受条款"></a>4.2、接受条款</h5><hr><blockquote><p>微软声明和许可条款点击“接受”</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204204537417.png"></p><blockquote><p>稍等片刻</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204204625540.png"></p><blockquote><p>勾选“为另一台电脑创建安装介质”</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204204759855.png"></p><blockquote><p>不勾选“对这台电脑使用推荐的选项”</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204204900327.png"></p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><hr><h5 id="4-3、点击下载ISO镜像文件"><a href="#4-3、点击下载ISO镜像文件" class="headerlink" title="4.3、点击下载ISO镜像文件"></a>4.3、点击下载ISO镜像文件</h5><hr><blockquote><p>不要直接把它写入到U盘内，点击下载ISO镜像文件</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205102713112.png"></p><h5 id="4-4、选择下载路径"><a href="#4-4、选择下载路径" class="headerlink" title="4.4、选择下载路径"></a>4.4、选择下载路径</h5><hr><blockquote><p>选择下载路径，待会下载完成就会在下载路径得到一个win10的安装包了。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205103038111.png"></p><blockquote><p>等待安装,时间蛮长的大概10+分钟，耐心等待即可。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205103243385.png"></p><blockquote><p>下载完成</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205120130176.png"></p><blockquote><p>查看属性</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205122529108.png"></p><blockquote><p>查看文件</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205123755938.png"></p><h5 id="4-5、拽到自己的U盘–-gt-微PE工具箱"><a href="#4-5、拽到自己的U盘–-gt-微PE工具箱" class="headerlink" title="4.5、拽到自己的U盘–>微PE工具箱"></a>4.5、拽到自己的U盘–&gt;微PE工具箱</h5><hr><blockquote><p>把它拖拽到自己的U盘–&gt;空白分区盘（微PE工具箱）即可</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205123924056.png"></p><blockquote><p>等待黏贴即可，即将大功告成！</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205124348293.png"></p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><hr><h5 id="4-3、点击U盘"><a href="#4-3、点击U盘" class="headerlink" title="4.3、点击U盘"></a>4.3、点击U盘</h5><hr><blockquote><p>选择的介质</p></blockquote><ul><li><p>U盘的话就是直接把安装程序写进U盘内</p></li><li><p>ISO文件就只是单纯的把安装包下载到电脑上</p></li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204205215323.png"></p><blockquote><p>选择你要安装的U盘,选定后点击下一步，等待一下</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205113032228.png"></p><h5 id="4-4、win10启动盘制作工具"><a href="#4-4、win10启动盘制作工具" class="headerlink" title="4.4、win10启动盘制作工具"></a>4.4、win10启动盘制作工具</h5><hr><blockquote><p>接下来win10启动盘制作工具，会自动将你的U盘格式化为FAT32格式，并开始下载安装包，请耐心等待下载完成，下载完成后，win10启动盘制作工具，会开始将安装包写入进U盘内再等待一会即可。</p></blockquote><ul><li>注意：我们的U盘内被零零散散的装了一堆win10的安装文件，可创建一个文件夹把它们装在一个文件夹里，到时安装系统时，再把它们放在U盘的<strong>根目录</strong>下，安装成功后再把它们放回去文件夹里，所以每次装系统你得把它们挪出来，装好系统后再把它们放回去。</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201204205832234.png"></p><h4 id="五、重装系统"><a href="#五、重装系统" class="headerlink" title="五、重装系统"></a>五、重装系统</h4><ul><li>接下来拔下制好启动盘的U盘，把它插到带安装系统的电脑上</li><li>注意：台式机请务必插到主板后面的USB接口上，不要接到机箱的前面板或者延长线，还有笔记本的话，随意找一个借口就可以，然后按下开机按钮后不断的按键盘上的**<code>del</code><strong>按键，直至屏幕上显示主板BIOS的画面，笔记本进BIOS的按键可能和台式机有些不一样，有的按</strong><code>F2</code><strong>,有的按</strong><code>F10</code><strong>也有的按</strong><code>F12</code>**，具体进入BIOS的按钮，请自行查阅笔记本的官网。</li></ul><p>修改启动项PE本身也是支持UEFI加Legacy双模式启动项的</p><ul><li>UEFI对应GPT </li><li>Legacy对应MBR</li></ul><blockquote><p>由于本人没有重装系统的照片，去b站找了以华硕品牌电脑为例效果图展示给大家。</p></blockquote><h5 id="5-1、成功进入BIOS画面"><a href="#5-1、成功进入BIOS画面" class="headerlink" title="5.1、成功进入BIOS画面"></a>5.1、成功进入BIOS画面</h5><hr><blockquote><p>按下开机按钮后不断的按键盘上的**<code>del</code>**按键，直至屏幕上显示主板BIOS的画面。</p></blockquote><blockquote><p>其实每台电脑的操作系统都大同小异的，要学会随机应变。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205004011549.png"></p><blockquote><p>把UEFI拖拽到第一位置</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205004117296.png"></p><h5 id="5-2、保存并重启"><a href="#5-2、保存并重启" class="headerlink" title="5.2、保存并重启"></a>5.2、保存并重启</h5><hr><blockquote><p>按中下角位置的**<code>F10</code>**,直接保存并重启。注意：每台电脑可能不一样，具体看提示。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205004243416.png"></p><blockquote><p>确定保存</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205004450335.png"></p><blockquote><p>或者按**<code>F7</code>**进入启动项修改UEFI</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205004542249.png"></p><blockquote><p>选择Boot,选择UEFI</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205004730078.png"></p><blockquote><p>点击保存，并重启电脑即可。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205004801061.png"></p><blockquote><p>出现这个页面，不要按DEL按键，再按得话，还会进入BIOS内，直接撒手不管</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205004841090.png"></p><h5 id="5-3、进入winPE的桌面"><a href="#5-3、进入winPE的桌面" class="headerlink" title="5.3、进入winPE的桌面"></a>5.3、进入winPE的桌面</h5><hr><blockquote><p>由于你的第一启动项刚才更改了U盘，而U盘内有PE便携式操作系统，所以你会自动进入winPE的桌面</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205005258284.png"></p><blockquote><p>打开我的电脑</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205005442105.png"></p><h5 id="5-4、安装WIN10过程"><a href="#5-4、安装WIN10过程" class="headerlink" title="5.4、安装WIN10过程"></a>5.4、安装WIN10过程</h5><hr><blockquote><p>找到U盘的WIN10安装包</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205005505604.png"></p><blockquote><p>右键“装卸”</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205005527068.png"></p><blockquote><p>打开SET UP安装程序</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205005551718.png"></p><blockquote><p>选择语言</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205005620656.png"></p><blockquote><p>点击”确定”</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205005732437.png"></p><blockquote><p>等待</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205005833635.png"></p><blockquote><p>安装成功后怕主板犯傻，还是建议10秒内拔U盘。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205005859829.png"></p><blockquote><p>拔掉之后不要动你的电脑、不要开关、不要重启、也不要断电，耐心等待即可。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010024961.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010123092.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010145244.png"></p><blockquote><p>进入win10初始化的主页面，后面的都是下一步或者跳过。</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010203300.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010232715.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010306972.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010332330.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010403702.png"></p><blockquote><p>因为出现中文可能会在某些软件里出现BUG</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010508156.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010602510.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010633364.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010656320.png"></p><blockquote><p>显示电脑和控制面板</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010915415.png"></p><blockquote><p>右键电脑桌面</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010934955.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205011026174.png"></p><blockquote><p>选择“桌面图标设置”</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205011139236.png"></p><blockquote><p>勾选“计算机”和“控制面板”</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205010830746.png"></p><blockquote><p>成功</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205011224134.png"></p><h4 id="六、驱动"><a href="#六、驱动" class="headerlink" title="六、驱动"></a>六、驱动</h4><blockquote><p>什么是驱动程序，看以下图片你会一目了然</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205173022649.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205173109283.png"></p><h5 id="目前安装驱动的方法有三个"><a href="#目前安装驱动的方法有三个" class="headerlink" title="目前安装驱动的方法有三个"></a>目前安装驱动的方法有三个</h5><hr><h5 id="方法一：系统自动安装驱动"><a href="#方法一：系统自动安装驱动" class="headerlink" title="方法一：系统自动安装驱动"></a>方法一：系统自动安装驱动</h5><hr><blockquote><p>让WIN10联网后自动帮你安装，这个仅限于win10,win7和XP是不行的，在你第一次开机以后，win10如果检测到你的电脑是联网的状态，而且集成的网卡驱动可以正常驱使网卡联网，那win10就会自动帮你开始下载安装驱动，所以你只需要把电脑丢在那放半小时或者一小时，它就自动帮你把所有的驱动全部安装好。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205174220882.png"></p><blockquote><p>但是这个方法有很多问题，第一个问题就是它只会帮你补齐必备硬件的驱动，其它驱动不会帮你装，还有你自己加的附属配件都不会帮你装。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205174249498.png"></p><blockquote><p>第二个问题是它的型号识别不一定有那么准，很多的硬件驱动，同一系列的产品驱动是通用的，但针对不同型号有专有的优化，A型号可以用A驱动也可以用B驱动，但A驱动是它的专属，有针对它们的专门优化，如果win10不小心给你装上了B驱动你确实可以用，但性能不一定是最大化。然后它还有个比较大的问题，就是驱动版本不是最新的，给你装的确实版本太老了，所以放在那让win10自动安装这个方法，我个人不推荐。</p></blockquote><h5 id="方法二：使用第三方软件安装"><a href="#方法二：使用第三方软件安装" class="headerlink" title="方法二：使用第三方软件安装"></a>方法二：使用第三方软件安装</h5><hr><blockquote><p>使用第三方软件去帮你安装，比如：<strong>驱动精灵、驱动人生、鲁大师、360</strong>等等第三方软件，这些软件都可以一键帮你安装驱动。它的好处是驱动版本肯定是最新的，如果驱动软件不及时更新，基本没什么人用了，但是它依旧和win自带的那个方法存在同样的问题，就是型号识别不是百分百准确的。此方法有一个致命的就是携带流氓捆绑，会给你安装一堆得软件广告。</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205194338916.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205195131041.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205195158270.png"></p><h5 id="方法三：官网找驱动"><a href="#方法三：官网找驱动" class="headerlink" title="方法三：官网找驱动"></a>方法三：官网找驱动</h5><hr><blockquote><p>自己去手动找驱动自己装，由于驱动程序是硬件厂商从官网提供给你的，版本肯定是最新的，这个麻烦就是要自己去找型号进行下载，型号肯定是百分百对得上的，最后驱动来自官方，也不用担心流氓捆绑软件，也不用担心驱动是不是纯净版的，所以强烈推荐这种方式安装驱动。</p></blockquote><p><strong>根据自己的核显驱动型号请自行到官网下载</strong></p><hr><blockquote><p>英伟达显卡驱动</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205192132203.png"></p><blockquote><p>AMD官网</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205192349519.png"></p><blockquote><p>Intel官网</p></blockquote><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201205193649578.png"></p><blockquote><p>驱动下载完成后一般都是双击或者解压后即可安装，安装步骤简单，认真操作即可。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><hr><blockquote><p>这篇文章包括安装电脑的整个流程，其中分为三个步骤，<strong>装机</strong>，<strong>装系统</strong>，<strong>装驱动</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重装系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语四级资料</title>
      <link href="2020/12/03/ying-yu-si-ji-zi-liao/"/>
      <url>2020/12/03/ying-yu-si-ji-zi-liao/</url>
      
        <content type="html"><![CDATA[<h3 id="英语四级资料及技巧"><a href="#英语四级资料及技巧" class="headerlink" title="英语四级资料及技巧"></a>英语四级资料及技巧</h3><hr><h4 id="2019-年-6-月-英语四级讲义及备考技巧"><a href="#2019-年-6-月-英语四级讲义及备考技巧" class="headerlink" title="2019 年 6 月 英语四级讲义及备考技巧"></a>2019 年 6 月 英语四级讲义及备考技巧</h4><a id="more"></a> <div class="row">    <embed src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/%E5%9B%9B%E7%BA%A7%E4%BF%9D%E5%91%BD%E7%8F%AD%E8%AE%B2%E4%B9%89.pdf" width="100%" height="550" type="application/pdf"></div>  <h3 id="一、写作"><a href="#一、写作" class="headerlink" title="一、写作"></a>一、写作</h3><p>①14 6 四级</p><p>Suppose a foreign friend of yours is going to visit your hometown/your campus/China （多题多卷的三个不同）, what is the most interesting place you would like to take him/her to see and why? </p><p>②13.12 父亲和男孩子的对话，孩子说“ Dad，I am a bit worried about disposing of nuclear </p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/clip_image002.jpg"></p><p>weapon. 父亲则回答“ If you can empty the dustbin, you can do anything. 说话间，</p><p>手指着垃圾桶。 </p><p>③ </p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/clip_image004.jpg"></p><p>④2013 6 </p><p>Directions: For this part, you are allowed 30 minutes to write an essay commenting on the remark “A smile is the shortest distance between two people”. You may cite some examples to support your view. You should write at least 150 words but no more than </p><p>200 words. </p><p>⑤2014 6 </p><p>不要以貌取人不要把鸡蛋都放在一个篮子里不要草率写决定 </p><h4 id="常见土单词排行榜："><a href="#常见土单词排行榜：" class="headerlink" title="常见土单词排行榜："></a>常见土单词排行榜：</h4><p>1）think    have been convinced that    be of the opinion that    cling to the perspective that    maintain  contend  assert      argue  assume  claim </p><ol start="2"><li>many   a sea of   multitudes of   immense amounts of numerous  innumerable  plentiful </li></ol><ol start="3"><li>people we us private individuals youngsters and teenagers all children and adults experts and professors parents  kids  offspring businessman   youngsters on campus </li></ol><ol start="4"><li>very   exceedingly   distinctly       strikingly   more than     extraordinarily   outstandingly </li></ol><ol start="5"><li>important   significant   crucial    critical   indispensable   play a crucial role in sth. </li></ol><p>6） And </p><p>similarly equally likewise at the same time in the meanwhile </p><h4 id="写作中可用的万能句型："><a href="#写作中可用的万能句型：" class="headerlink" title="写作中可用的万能句型："></a>写作中可用的万能句型：</h4><p>1、主语从句：</p><hr><p>It proves self-evident that It has been found that </p><p>It seems beyond dispute that </p><p>It seems universally acknowledged that </p><p>It has been widely accepted that It becomes generally agreed that it keeps my argument that </p><p>2、定语从句他是一个色狼，是显而易见的。</p><hr><p>He is a lady killer, a which is really beyond dispute. b which has been widely accepted. </p><p>c which has provoked the public’s widespread concern.</p><p>3、万能状语 </p><hr><ol><li><p>as every one can see  </p></li><li><p>with the rapid advance of science and technology </p></li><li><p>in our contemporary society </p></li><li><p>in the general routine of everyday living </p></li></ol><p>4、插入语 </p><hr><p>to be frank needless to say in my judgment from my perspective </p><p>to tell the truth as a matter of fact </p><p>5、强调句型 </p><hr><p>It is … that… </p><p>I met a crazy dog in the street yesterday. </p><h4 id="段落写长的原则："><a href="#段落写长的原则：" class="headerlink" title="段落写长的原则："></a>段落写长的原则：</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>1）句子扩写： </p><hr><p>【定语】</p><hr><p>①Keeping pets can reduce loneliness; </p><p>Keeping pets which look pretty cute and lovely can reduce loneliness of the old citizens having no children to take care of them. </p><p>②I would like to recommend you a place which is quite popular with visitors from China and other nations.  </p><p>【同位语】 </p><hr><p>​    ①I love you.</p><p>I, a university student from Beijing, love you, the most graceful and elegant English teacher I have ever seen. </p><p>​    ②Smile makes people love you. </p><p>Smile, the best means for communicating, makes people who may look serious and distant love you, a university student who is about to graduate from school. </p><p>​    ①Pollution keeps exceedingly serious for years. </p><p>Pollution, a global issue which threatens almost every one, keeps exceedingly serious for years. </p><p>【状语】何为状语？ </p><hr><p>​    ①We are having class. </p><p>​    ②Keeping pets can cultivate the love heart of children although they sometimes bring much trouble for their owners. </p><p>or because taking care of those little animals needs patience and care. </p><p>or when there exists only a child in one family. </p><p>or by taking a shower or talking with those little animals.  </p><p>​    ③They are singing songs. </p><p>Although they have had class for the whole day, they, a group of young men, </p><p>who will take part in the examination of CET 4 are singing songs, </p><p>Two Butterflies and Little Swallow  which were once popular when we were young. </p><h4 id="谚语警句类"><a href="#谚语警句类" class="headerlink" title="谚语警句类"></a>谚语警句类</h4><hr><h5 id="第一段引出主题-解释你对这句话的理解"><a href="#第一段引出主题-解释你对这句话的理解" class="headerlink" title="第一段引出主题+ 解释你对这句话的理解"></a><strong>第一段引出主题+</strong> <strong>解释你对这句话的理解</strong></h5><p>第一句 </p><hr><ol><li><p>Nowadays, there remains an increasing interest in the topic about…; </p></li><li><p>Recently the issue of…has been in the limelight / brought into focus; </p></li><li><p>What is your idea as to the topic about…? It is my belief that …; 4. It looks beyond dispute that the issue about … has caused wide public attention. </p></li></ol><p>第二、三句：解释这句话的意思 </p><hr><p>the meaning of the saying seems that … </p><p>比如：不要草率做决定 </p><p>It seems that if you hope to do something successfully, please think it carefully. </p><p>That is to say, it is foolish to decide it quickly. </p><h5 id="第二段举例"><a href="#第二段举例" class="headerlink" title="第二段举例"></a>第二段举例</h5><p>A    Although so abundant cases can support my simple view, the following one is most favorable. </p><p>B    Examples to prove the view are abundant. The most persuasive one is the case of sb. </p><p>Such impressive cases/stories are not rare in our daily life, yet the following one is definitely typical. </p><h5 id="第三段总结段"><a href="#第三段总结段" class="headerlink" title="第三段总结段"></a>第三段总结段</h5><p>第一句 </p><hr><ol><li><p>Under no circumstances can we fail to pour attention into the importance </p><p>seriousness of the fact that </p></li><li><p>It is really high time that due attention cannot have failed to paid to the issue. </p></li><li><p>So crucial/grave is sth that it should have caused our attention. </p></li><li><p>It is the fact of sth that really has a great influence on our study and life. </p></li></ol><p>第二、三句话具体措施 </p><hr><p>for one thing / for another; on one hand / on the other hand; </p><p>Eg. Write an essay on happiness by referring to the saying “Happiness is not the absence of problems, but the ability to deal with them.” You can cite examples to illustrate your points and then explain how you can develop your ability to deal with problem and be happy.  </p><p>措施一父母采取措施 </p><hr><p>Parents are supposed to spend more time educating their kids to do sth Eg. to be happy facing difficulties. </p><p>to put eggs in different baskets. </p><p>措施二 </p><hr><p>Awareness about sth could be cultivated to make ourselves lead a healthy and favorable life. </p><p>最后一句：喊口号！ </p><hr><ol><li><p>Only by taking these action can people have a more brilliant and glorious future. </p></li><li><p>So shouldn’t human beings pay much attention to the meaningful saying/problem?</p></li><li><p>So under no account could people divert attention from the issue of sth. </p></li><li><p>The more actively people face the issue, the more happily they will lead their life. </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 英语四级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo右上角Github图标</title>
      <link href="2020/12/03/hexo-you-shang-jiao-github-tu-biao/"/>
      <url>2020/12/03/hexo-you-shang-jiao-github-tu-biao/</url>
      
        <content type="html"><![CDATA[<h4 id="右上角Github图标"><a href="#右上角Github图标" class="headerlink" title="右上角Github图标"></a>右上角Github图标</h4><hr><p><strong>对于这个<code>Github图标</code>文件具体加在哪里，要根据自己的主题，添加到适应的位置。</strong></p><p>比如我的是hexo-theme-yilia主题，我添加在hexo-theme-yilia/layout/layout.ejs文件的<code>&lt;div class="mid-col" q-class="show:isShow,hide:isShow|isFalse"&gt;</code>div下</p><a id="more"></a><p>添加在layout.ejs文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/nat-lin<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>github-corner<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>View source on GitHub<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span>         <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span>         <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 250 250<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">         <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">fill</span><span class="token punctuation">:</span>#151513<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span>         <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentColor<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">transform-origin</span><span class="token punctuation">:</span> 130px 106px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>octo-arm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z<span class="token punctuation">"</span></span>                                                                                                                                                                                                                                                                                                    <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentColor<span class="token punctuation">"</span></span>                                                                                                                                                                                                                                                                                                    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>octo-body<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.github-corner:hover .octo-arm</span><span class="token punctuation">{</span><span class="token property">animation</span><span class="token punctuation">:</span>octocat-wave 560ms ease-in-out<span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> octocat-wave</span><span class="token punctuation">{</span><span class="token selector">0%,100%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">20%,60%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-25deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector">40%,80%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>10deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>500px<span class="token punctuation">)</span></span><span class="token punctuation">{</span><span class="token selector">.github-corner:hover .octo-arm</span><span class="token punctuation">{</span><span class="token property">animation</span><span class="token punctuation">:</span>none<span class="token punctuation">}</span><span class="token selector">.github-corner .octo-arm</span><span class="token punctuation">{</span><span class="token property">animation</span><span class="token punctuation">:</span>octocat-wave 560ms ease-in-out<span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码存放位置</strong></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201203081354193.png"></p><p><strong>显示效果如下</strong></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201203081742013.png"></p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 2020.1.2 安装教程附破解教程详解</title>
      <link href="2020/11/28/idea-2020.1.2-an-zhuang-jiao-cheng-fu-po-jie-jiao-cheng-xiang-jie/"/>
      <url>2020/11/28/idea-2020.1.2-an-zhuang-jiao-cheng-fu-po-jie-jiao-cheng-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="IDEA-2020-1-2-安装-破解"><a href="#IDEA-2020-1-2-安装-破解" class="headerlink" title="IDEA 2020.1.2 安装+破解"></a>IDEA 2020.1.2 安装+破解</h4><p>链接：<a href="https://pan.baidu.com/s/1X1XNL6dqFES_fFN0SrRjDg">https://pan.baidu.com/s/1X1XNL6dqFES_fFN0SrRjDg</a><br>提取码：k7io </p><h4 id="1：IDEA安装教程"><a href="#1：IDEA安装教程" class="headerlink" title="1：IDEA安装教程"></a>1：IDEA安装教程</h4><ul><li>1.1、开始安装Idea，点击next</li></ul><a id="more"></a><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128151445392.png"></p><ul><li>1.2、点击Browse选择好安装文件夹，点击next</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128151644621.png"></p><ul><li>1.3、根据电脑选择几位，我的电脑是64位选择64bit，Update PATH variable：是否将IDEA启动目录添加到环境变量中，即可以从cmd命令行中启动IDEA，根据需要勾选</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128151754750.png"></p><ul><li>1.4、点击Install即可，开始安装</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128151821498.png"></p><ul><li>1.5、等待安装</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128151900690.png"></p><ul><li>1.6、安装完成</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128152311891.png"></p><ul><li>1.7、安装完成后，打开页面</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128152517009.png"></p><ul><li>1.8、查看页面</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128155604070.png"></p><ul><li>1.9、显示如下页面表示没有激活</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128153432593.png"></p><ul><li>1.10、发现只有15天的试用期</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128160101193.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128153410284.png"></p><h4 id="2-破解教程"><a href="#2-破解教程" class="headerlink" title="2.破解教程"></a>2.破解教程</h4><ul><li>2.1进入启动页，把jetbrains-agent.jar拖入到启动页</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128160556753.png"></p><ul><li>2.2、jetbrains-agent.jar拖入到启动页的效果图</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128160421270.png"></p><p><img src="http://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/a31e72dbdf53c5044cc345713b3267e.png"></p><ul><li>2.3、按照这个路径查看是否激活成功</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128155604070.png"></p><ul><li>2.4、显示如下效果证明激活成功。</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128155413902.png"></p><ul><li>2.5、按照这个路径查看是否激活成功</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128160101193.png"></p><ul><li>2.6、显示2089年过期，证明激活成功。</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201128155632474.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-异常的产生过程解析</title>
      <link href="2020/11/27/java-yi-chang-de-chan-sheng-guo-cheng-jie-xi/"/>
      <url>2020/11/27/java-yi-chang-de-chan-sheng-guo-cheng-jie-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="异常的产生过程解析"><a href="#异常的产生过程解析" class="headerlink" title="异常的产生过程解析"></a>异常的产生过程解析</h4><hr><p>首先，ele访问了数组中的3索引，但是数组是没有3索引的，这时候，JVM就会检测出程序会出现异常</p><p><strong>JVM会做两件事情：</strong></p><ul><li>1、JVM会根据异常产生的原因创建一个异常对象，这个异常对象包含了异常产生的（内容，原因，位置）。</li></ul><a id="more"></a> <p>new ArrayIndexOutOfBoundsException(“3”)</p><ul><li>2、在getElement方法中，没有异常的处理逻辑（try…catch），那么JVM就会把异常对象抛出给方法的调用者main方法来处理这个异常。<ul><li>main方法接收到了这个异常对象new ArrayIndexOutOfBoundsException(“3”)，main方法也没有异常的处理逻辑继续把对象抛出给main方法的调用者JVM来处理。</li></ul></li></ul><p><strong>JVM再一次接收到这个异常对象，做了两件事情。</strong></p><p>JVM接收到了这个异常new ArrayIndexOutOfBoundsException(“3”)</p><ul><li>1、把异常对象（内容，原因，位置）以红色的字体打印到控制台。</li><li>2、JVM会终止当前正在执行的JAVA程序–&gt;中断处理。</li></ul><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>demo01<span class="token punctuation">.</span></span><span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token comment">/** * @date Created by 林春燕 on 2020/11/27 20:26 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建int类型的数组，并赋值</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token function">getElement</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组越界</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**         * 定义一个方法，获取数组指定索引的元素         * 参数：         *  int[] arr         *  int index         */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ele<span class="token operator">=</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ele<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果图</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201127221737252.png"></p><p>异常的产生过程解析图</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201127221551654.png"></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-异常体系与分类</title>
      <link href="2020/11/26/java-yi-chang-ti-xi-yu-fen-lei/"/>
      <url>2020/11/26/java-yi-chang-ti-xi-yu-fen-lei/</url>
      
        <content type="html"><![CDATA[<h4 id="1-1异常概念"><a href="#1-1异常概念" class="headerlink" title="1.1异常概念"></a>1.1异常概念</h4><p>异常，就是不正常的意思。在生活中：医生说，你的身体某个部位异常，该部位和正常相比有点不同，该部位的功能将受影响，在程序中的意思是：</p><ul><li><strong>异常</strong>：指的是程序在执行过程中，出现非正常的情况，最终导致JVM的非正常停止。</li></ul><a id="more"></a><p>在java等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出一个异常对象。Java处理异常的方法是中断处理。</p><blockquote><p>异常指的是并不是语法错误，语法错了，编译不通过，不会产生字节码文件，根本不能运行。</p></blockquote><h4 id="1-2异常体系"><a href="#1-2异常体系" class="headerlink" title="1.2异常体系"></a>1.2异常体系</h4><p>异常体制其实是帮助我们找到程序中的问题，异常的根类是<code>java.lang.Throwable</code>,其下有两个子类：<code> java.lang.Error</code> 与<code>java.lang.Exception</code>,平常所说的异常指<code>java.lang.Exception</code>.</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201126200634985.png"></p><p><strong>Throwable体系：</strong></p><ul><li><strong>Error</strong>:严重错误Error，无法通过处理的错误，只能事先避免，好比绝症。</li><li><strong>Exception</strong>:表示异常，异常产生后程序员可以通过代码的方法纠正，使程序继续运行，是必须要处理好的。好比感冒，阑尾炎。</li></ul><p><strong>Throwable中的常用方法：</strong></p><ul><li><p><code>public void prinStackTrace()</code>:打印异常的详细信息。</p><p>包括了异常的类型，异常的原因，还包括异常出现的位置，在开发和调试阶段，都使用<code>prinStackTrace</code>。</p></li><li><p><code>public String getMassage()</code>:获取发生异常的原因。</p><p>提示给用户的时候，就提示错误原因。</p></li><li><p><code>public String toString()</code>:获取异常的类型和异常描述信息（不用）。</p></li></ul><p><strong>出现异常，不要紧张，把异常的简单类名，拷贝到API中去查。</strong></p><h4 id="1-3异常分类"><a href="#1-3异常分类" class="headerlink" title="1.3异常分类"></a>1.3异常分类</h4><p>我们平常说的异常就是Exception,因为这异常一旦出现，我们就要对代码进行更正，修复程序。</p><p><strong>异常（Exception）的分类</strong>：根据在编译时期还是运行时期去检查异常？</p><ul><li><strong>编译时期异常</strong>：checked异常。在编译时期，就会检查，如果没有处理异常，则编译失败。（如日期格式异常）</li><li><strong>运行时期异常</strong>：runtime异常。在运行期间，检查异常，在编译时期，运行异常不会编译器检测（不报错）。（如数学异常）</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201126203422927.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/20180920165502957.png"></p><ul><li>上图可以简单展示一下异常类实现结构图，当然上图不是所有的异常，用户自己也可以自定义异常实现。上图已经足够帮我们解释和理解异常实现了</li></ul><h5 id="编译时期异常"><a href="#编译时期异常" class="headerlink" title="编译时期异常"></a>编译时期异常</h5><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @date Created by 林春燕 on 2020/11/26 20:48 * @微信公众号 浅悦的编程时光 * @博客 https://nate-lin.gitee.io * @GitHub https://github.com/nate-lin * @Gitee https://gitee.com/nate-lin */</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>scenario<span class="token punctuation">.</span>effect<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>sw<span class="token punctuation">.</span>sse<span class="token punctuation">.</span></span><span class="token class-name">SSEBlend_SRC_OUTPeer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">ParseException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">SimpleFormatter</span><span class="token punctuation">;</span><span class="token comment">/**     java.lang.Throwable:类是java语言所有错误或异常的超类。        Exception:编译期异常，进行编译（写代码）java程序出现的问题        RuntimeException:运行异常，java程序运行过程中出现的问题            异常就相当于程序得了一个小毛病（感冒，发烧），把异常处理掉。程序就可以继续执行（吃点药，继续革命工作）        Error：错误            错误就相当于程序得了一个无法治愈的毛病（非典，艾滋），必须修改源代码，程序才能继续执行 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//Exception:编译期异常，进行编译（写代码）java程序出现的问题</span>        <span class="token class-name">SimpleDateFormat</span> sdf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用来格式化日期</span>        <span class="token class-name">Date</span> date<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//故意将日期格式写错，验证异常</span>            date<span class="token operator">=</span>sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-1126"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把字符串格式的日期，解析为Date格式的日期（年-月-日）</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Exception:编译期异常–运行结果图</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201126211411642.png"></p><h5 id="运行时期异常"><a href="#运行时期异常" class="headerlink" title="运行时期异常"></a>运行时期异常</h5><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment">//RuntimeException:运行异常，java程序运行过程中出现的问题</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println(arr[0]);</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment">//可能会出现异常的代码</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//异常处理逻辑</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RuntimeException:运行异常–运行结果图</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201126213204525.png"></p><h5 id="Error：错误"><a href="#Error：错误" class="headerlink" title="Error：错误"></a>Error：错误</h5><p>示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//Error：错误</span>        <span class="token comment">/**         * OutOfMemoryError:java heap space         * 内存溢出的错误，创建的数组太大了，超出了给JVM分配的内存         */</span>        <span class="token comment">//必须修改代码，创建的数组小一点</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Error：错误–运行结果图</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201126213924375.png"></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP的三次握手</title>
      <link href="2020/11/09/tcp-de-san-ci-wo-shou/"/>
      <url>2020/11/09/tcp-de-san-ci-wo-shou/</url>
      
        <content type="html"><![CDATA[<h3 id="TCP-为什么需要三次握手？"><a href="#TCP-为什么需要三次握手？" class="headerlink" title="TCP 为什么需要三次握手？"></a>TCP 为什么需要三次握手？</h3><ul><li>TCP 协议是我们每天都在使用的一个网络通讯协议，因为绝大部分的网络连接都是建立在 TCP 协议上的，比如你此刻正在看的这篇文章是建立在 HTTP（Hypertext Transfer Protocol，超文本传送协议） 应用层协议的基础上的，而 HTTP 协议的“底层”则是建立在 TCP 的传输层协议上的。因此可以理解为，你之所以能看到本篇文章就是得益于 TCP 协议的功劳。</li></ul><a id="more"></a><p><strong>本文章的面试题是，说一下 TCP 三次握手的执行流程，以及为什么需要三次握手？</strong></p><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><blockquote><p>在回答这个问题之前，首先我们需要搞清楚两个概念，第一，什么是 TCP？第二，什么是 TCP 连接？只有搞明白了这两个问题，我们才能彻底搞懂为什么 TCP 需要三次握手？</p></blockquote><h5 id="什么是-TCP？"><a href="#什么是-TCP？" class="headerlink" title="什么是 TCP？"></a>什么是 TCP？</h5><p>首先来说 TCP（Transmission Control Protocol，传输控制协议）是一个面向连接的、可靠的、基于字节流的传输层协议。从它的概念中我们可以看出 TCP 的三个特点<strong>：面向连接、可靠性和面向字节流。</strong></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/CgqCHl7x4AWAIebKAABegWUqA1U920.png"></p><h4 id="TCP-的特点"><a href="#TCP-的特点" class="headerlink" title="TCP 的特点"></a>TCP 的特点</h4><p><strong>面向连接：</strong>是指 TCP 是面向客户端和服务器端连接的通讯协议，使用它可以将客户端和服务器端进行连接。</p><p><strong>可靠性：</strong>是指无论网络环境多差，TCP 都可以保证信息一定能够传递到接收端。</p><p>TCP 之所以可以保证可靠性主要得益于两个方面，一个是“状态性”，另一个是“可控制性”。所谓状态性是指 TCP 会记录信息的发送状态，例如，哪些数据收到了、哪些数据没收到等状态信息都会被记录；可控制性是指 TCP 会根据状态情况控制自己的行为，比如当 TCP 意识到丢包了就会控制重发此包，这样就实现了 TCP 的可靠性。</p><p><strong>面向字节流：</strong>是指 TCP 是以字节流的方式进行数据传输的。</p><p>RFC 793 对 TCP 连接的定义如下：</p><ul><li>Connections:<br>The reliability and flow control mechanisms described above require that TCPs initialize and maintain certain status information for each data stream.<br>The combination of this information, including sockets, sequence numbers, and window sizes, is called a connection.</li></ul><blockquote><p>小贴士：TCP 之所以被广泛应用，首先是因为它是一个标准化的协议，TCP 的标准协议就是由 RFC 793 定义的，它已经有了 30 多年的历史，并且已经被多次更新。RFC（Request For Comments）是 IETF（Internet Engineering Task Force）的正式文档。IETF 是一家制定互联网标准的组织，它制定了 Internet（互联网）的整体协议体系，凡是经过 IETF 评审认可的标准都会被发布为带编号的 RFC 的文档。</p></blockquote><p>TCP 定义的大致意思是，用于保证可靠性和流控制机制的信息，包括 Socket、序列号及窗口大小被称为连接。</p><p>其中，Socket 是由 IP 地址加端口号组成的，序列号是用来解决乱序问题的，而窗口大小则是用来做流量控制的。</p><p>接下来我们来看 TCP 三次握手的执行流程，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/CgqCHl70ccOALHS1AADhgTvLn9Q814.png"></p><p>TCP 三次握手的执行流程图</p><p>关键字说明：</p><ul><li>SYN（Synchronize Sequence Numbers），同步序列编号；</li></ul><ul><li>ACK（Acknowledge Character），确认字符；</li><li>SEQ（Sequence Number），序列号。</li></ul><p>TCP 的执行流程如下：</p><ul><li><p>最开始时客户端和服务端都处于 CLOSED 状态，然后服务端先主动监听某个端口，此时服务器端就变成了 LISTEN（监听）状态；</p></li><li><p>然后客户端主动发起连接，发送 SYN（同步序列编号），此时客户端就变成了 SYN-SENT 状态；</p></li><li><p>服务端接收到信息之后返回 SYN 和 ACK 至客户端，此时服务器端就变成了 SYN-REVD 状态；</p></li><li><p>客户端接收到消息之后，再发送 ACK 至服务器端，此时客户端就变成了 ESTABLISHED（已确认）状态，服务端收到 ACK 之后，也变成了 ESTABLISHED 状态，此时连接工作就执行完了。</p></li></ul><p><strong>为什么 TCP 需要三次握手？</strong><br>了解了以上 TCP 的基础概念之后，我们再来看一下 TCP 为什么需要三次握手？</p><p><strong>原因一：防止重复连接</strong></p><p>首先来说 RFC 793 - Transmission Control Protocol 其实就指出了三次握手的主要原因，它的描述如下：</p><blockquote><p>The principle reason for the three-way handshake is to prevent old duplicate connection initiations from causing confusion.</p></blockquote><p>翻译为中文的意思是，三次握手的主要原因是为了防止旧的重复连接引起连接混乱问题。</p><p>比如在网络状况比较复杂或者网络状况比较差的情况下，发送方可能会连续发送多次建立连接的请求。如果 TCP 握手的次数只有两次，那么接收方只能选择接受请求或者拒绝接受请求，但它并不清楚这次的请求是正常的请求，还是由于网络环境问题而导致的过期请求，如果是过期请求的话就会造成错误的连接。</p><p>所以如果 TCP 是三次握手的话，那么客户端在接收到服务器端 SEQ+1 的消息之后，就可以判断当前的连接是否为历史连接，如果判断为历史连接的话就会发送终止报文（RST）给服务器端终止连接；如果判断当前连接不是历史连接的话就会发送指令给服务器端来建立连接。</p><p><strong>原因二：同步初始化序列化</strong></p><p>通过上面的概念我们知道 TCP 的一个重要特征就是可靠性，而 TCP 为了保证在不稳定的网络环境中构建一个稳定的数据连接，它就需要一个“序列号”字段来保证自己的稳定性，而这个序列号的作用就是防止数据包重复发送，以及有效的解决数据包接收时顺序颠倒的问题。</p><p>那么在建立 TCP 连接时就需要同步初始化一个序列号来保证 TCP 的稳定性，因此它需要执行以下过程：</p><ul><li><p>首先客户端发送一个携带了初始序列号的 SYN 报文给服务器端；</p></li><li><p>服务端接收到消息之后会回复一个 ACK 的应答报文，表示客户端的 SYN 报文已被服务端成功接收了；</p></li><li><p>而客户端收到消息之后也会发送一个 ACK 给服务端，服务器端拿到这个消息之后，我们就可以得到一个可靠的初始化序列号了。</p></li></ul><p>而如果是两次握手的话，就无法进行序列号的确认工作了，因此也就无法得到一个可靠的序列号了，所以 TCP 连接至少需要三次握手。</p><p>以上两种原因就是 TCP 连接为什么需要三次握手的主要原因，当然 TCP 连接还可以四次握手，甚至是五次握手，也能实现 TCP 连接的稳定性，但三次握手是最节省资源的连接方式，因此 TCP 连接应该为三次握手。</p><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h4><hr><p>TCP 知识是计算机编程基础，也是面试中常见的面试问题，因为我们现在所使用的大部分连接都是建立在 TCP 基础上的。因此对 TCP 的掌握可以让我们更清楚地理解技术的实现过程，也能帮我们写出更加优秀的代码，以及排查一些和网络相关的问题。</p><p>和此知识点相关的面试题还有以下这些：</p><ul><li>什么是 UDP？</li><li>TCP 和 UDP 有什么区别？</li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><hr><h5 id="DP-介绍"><a href="#DP-介绍" class="headerlink" title="DP 介绍"></a>DP 介绍</h5><p>UDP（User Data Protocol，用户数据报协议）是无连接的、简单的、面向数据报的传输层协议。也就是 UDP 在发送数据之前，无须建立客户端与服务端的连接，直接发送消息即可。</p><p>UDP 的协议头有 8 个字节（64 位），如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/CgqCHl70cdGAPLl8AABHUQhxFtY478.png"></p><p>UDP 的协议头</p><p>其中源端口和目标端口是指记录发送方和接收方端口；UDP 包长度是指 UDP 头部加上 UDP 数据的总长度；UDP 校验和用于效验 UDP 的内容是否可靠。</p><p>UDP 常见的使用场景有：语音、视频等多媒体通信、DNS（域名转化）、TFTP 等。</p><h5 id="TCP-VS-UDP"><a href="#TCP-VS-UDP" class="headerlink" title="TCP VS UDP"></a>TCP VS UDP</h5><p>TCP 和 UDP 的区别主要体现在以下 7 个方面：</p><ul><li><p><strong>可靠性</strong>，TCP 有“状态性”和“可控制性”可以保证消息不重复、按顺序、不丢失的发送和接收，而 UDP 则不能保证消息的可靠性；</p></li><li><p><strong>连接</strong>，TCP 是面向连接的传输层协议，传输数据前先要建立连接，而 UDP 发送数据之前无需建立连接；</p></li><li><p><strong>服务对象</strong>，TCP 服务的对象为一对一的双端应用，而 UDP 可以应用于一对一、一对多和多对多的通信场景；</p></li><li><p><strong>效率</strong>，TCP 的传输效率较低，而 UDP 的传输效率较高；</p></li><li><p><strong>流量控制</strong>，TCP 有滑动窗口可以用来控制流量，而 UDP 则不具备流量控制的能力；</p></li><li><p><strong>报文</strong>，TCP 是面向字节流的传输层协议，而 UDP 是面向报文的传输层协议；</p></li><li><p><strong>应用场景</strong>，TCP 的应用场景是对消息准确性和顺序要求较高的场景，而 UDP 则是应用于对通信效率较高、准确性要求相对较低的场景。</p></li></ul><p>TCP 和 UDP 的使用场景如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/CgqCHl7x4EKAW86xAACoPgxtPLM601.png"></p><p>TCP 和 UDP 的使用场景</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章介绍了 TCP 三个特点：<strong>面向连接、可靠性和面向字节流</strong>，其中可靠性主要是依赖它的状态记录和根据实际情况调整自身的行为方式。例如，当 TCP 意识到丢包时就会重发此包，这样就保证了通信的可靠性。</p><p>TCP 之所以需要三次握手的主要原因是为了防止在网络环境比较差的情况下不会进行无效的连接，同时三次握手可以实现 TCP 初始化序列号的确认工作，TCP 需要初始化一个序列号来保证消息的顺序。如果是两次握手则不能确认序列号是否正常，如果是四次握手的话会浪费系统的资源，因此 TCP 三次握手是最优的解决方案，所以 TCP 连接需要三次握手。</p><p>最后讲了 UDP 的概念，以及 UDP 和 TCP 的区别，在传输效率要求比较高且对可靠性要求不高的情况下可以使用 UDP，反之则应该使用 TCP。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java进阶4-生产环境如何排除和优化JVM</title>
      <link href="2020/11/02/java-jin-jie-4-sheng-chan-huan-jing-ru-he-pai-chu-he-you-hua-jvm/"/>
      <url>2020/11/02/java-jin-jie-4-sheng-chan-huan-jing-ru-he-pai-chu-he-you-hua-jvm/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文章将重点讲解 JVM 的排查与优化，这样就会对 JVM 的知识点有一个完整的认识，从而可以更好地应用于实际工作或者面试了。</p></blockquote><p><strong>我们本文章的面试题是，生产环境如何排查问题？</strong></p><a id="more"></a><h3 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h3><hr><ul><li>如果是在生产环境中直接排查 JVM 的话，最简单的做法就是使用 JDK 自带的 6 个非常实用的命令行工具来排查。它们分别是：jps、jstat、jinfo、jmap、jhat 和 jstack，它们都位于 JDK 的 bin 目录下，可以使用命令行工具直接运行，其目录如下图所示：</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/187e03e5e1defd1c179cc8db478a853.png"></p><p>接下来我们来看看这些工具的具体使用。</p><h4 id="1-jps（虚拟机进程状况工具）"><a href="#1-jps（虚拟机进程状况工具）" class="headerlink" title="1.jps（虚拟机进程状况工具）"></a>1.jps（虚拟机进程状况工具）</h4><p>jps（JVM Process Status tool，虚拟机进程状况工具）它的功能和 Linux 中的 ps 命令比较类似，用于列出正在运行的 JVM 的 LVMID（Local Virtual Machine IDentifier，本地虚拟机唯一 ID），以及 JVM 的执行主类、JVM 启动参数等信息。语法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">jps <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>hostid<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>常用的 options 选项：</strong></p><ul><li>-l：用于输出运行主类的全名，如果是 jar 包，则输出 jar 包的路径；</li><li>-q：用于输出 LVMID（Local Virtual Machine Identifier，虚拟机唯一 ID）；</li><li>-m：用于输出虚拟机启动时传递给主类 main() 方法的参数；</li><li>-v：用于输出启动时的 JVM 参数。</li></ul><p>使用实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">➜  jps <span class="token operator">-</span>l<span class="token number">68848</span><span class="token number">40085</span> org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>jps<span class="token punctuation">.</span>cmdline<span class="token punctuation">.</span><span class="token class-name">Launcher</span><span class="token number">40086</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span><span class="token class-name">NativeOptimize</span><span class="token number">40109</span> jdk<span class="token punctuation">.</span>jcmd<span class="token operator">/</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>jps<span class="token punctuation">.</span><span class="token class-name">Jps</span><span class="token number">68879</span> org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>idea<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>server<span class="token punctuation">.</span><span class="token class-name">RemoteMavenServer36</span>➜  jps <span class="token operator">-</span>q<span class="token number">40368</span><span class="token number">68848</span><span class="token number">40085</span><span class="token number">40086</span><span class="token number">68879</span>➜  jps <span class="token operator">-</span>m<span class="token number">40400</span> <span class="token class-name">Jps</span> <span class="token operator">-</span>m<span class="token number">68848</span><span class="token number">40085</span> <span class="token class-name">Launcher</span> <span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>lib<span class="token operator">/</span>idea_rt<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>lib<span class="token operator">/</span>oro<span class="token operator">-</span><span class="token number">2.0</span><span class="token number">.8</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>lib<span class="token operator">/</span>resources_en<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>lib<span class="token operator">/</span>maven<span class="token operator">-</span>model<span class="token operator">-</span><span class="token number">3.6</span><span class="token number">.1</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>lib<span class="token operator">/</span>qdox<span class="token operator">-</span><span class="token number">2.0</span><span class="token operator">-</span>M10<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>lib<span class="token operator">/</span>plexus<span class="token operator">-</span>component<span class="token operator">-</span>annotations<span class="token operator">-</span><span class="token number">1.7</span><span class="token number">.1</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>lib<span class="token operator">/</span>httpcore<span class="token operator">-</span><span class="token number">4.4</span><span class="token number">.13</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>lib<span class="token operator">/</span>maven<span class="token operator">-</span>resolver<span class="token operator">-</span>api<span class="token operator">-</span><span class="token number">1.3</span><span class="token number">.3</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>lib<span class="token operator">/</span>netty<span class="token operator">-</span>common<span class="token operator">-</span><span class="token number">4.1</span><span class="token number">.47</span><span class="token punctuation">.</span><span class="token class-name">Final</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>plugins<span class="token operator">/</span>java<span class="token operator">/</span>lib<span class="token operator">/</span>maven<span class="token operator">-</span>resolver<span class="token operator">-</span>connector<span class="token operator">-</span>basic<span class="token operator">-</span><span class="token number">1.3</span><span class="token number">.3</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>lib<span class="token operator">/</span>maven<span class="token operator">-</span>artifact<span class="token operator">-</span><span class="token number">3.6</span><span class="token number">.1</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>lib<span class="token operator">/</span>plexus<span class="token operator">-</span>utils<span class="token operator">-</span><span class="token number">3.2</span><span class="token number">.0</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>lib<span class="token operator">/</span>netty<span class="token operator">-</span>resolver<span class="token operator">-</span><span class="token number">4.1</span><span class="token number">.47</span><span class="token punctuation">.</span><span class="token class-name">Final</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>lib<span class="token operator">/</span>guava<span class="token operator">-</span><span class="token number">28.2</span><span class="token operator">-</span><span class="token number">40086</span> <span class="token class-name">NativeOptimize</span><span class="token number">68879</span> <span class="token class-name">RemoteMavenServer36</span>➜  jps <span class="token operator">-</span>v<span class="token number">68848</span>  <span class="token operator">-</span><span class="token class-name">Xms128m</span> <span class="token operator">-</span><span class="token class-name">Xmx2048m</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">ReservedCodeCacheSize</span><span class="token operator">=</span><span class="token number">240</span>m <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseCompressedOops</span> <span class="token operator">-</span><span class="token class-name">Dfile</span><span class="token punctuation">.</span>encoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseConcMarkSweepGC</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">SoftRefLRUPolicyMSPerMB</span><span class="token operator">=</span><span class="token number">50</span> <span class="token operator">-</span>ea <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">CICompilerCount</span><span class="token operator">=</span><span class="token number">2</span> <span class="token operator">-</span><span class="token class-name">Dsun</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span>useCanonPrefixCache<span class="token operator">=</span><span class="token boolean">false</span> <span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>net<span class="token punctuation">.</span>preferIPv4Stack<span class="token operator">=</span><span class="token boolean">true</span> <span class="token operator">-</span><span class="token class-name">Djdk</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>tunneling<span class="token punctuation">.</span>disabledSchemes<span class="token operator">=</span><span class="token string">""</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">HeapDumpOnOutOfMemoryError</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">-</span><span class="token class-name">OmitStackTraceInFastThrow</span> <span class="token operator">-</span><span class="token class-name">Djdk</span><span class="token punctuation">.</span>attach<span class="token punctuation">.</span>allowAttachSelf <span class="token operator">-</span><span class="token class-name">Dkotlinx</span><span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>debug<span class="token operator">=</span>off <span class="token operator">-</span><span class="token class-name">Djdk</span><span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">.</span>illegalAccess<span class="token punctuation">.</span>silent<span class="token operator">=</span><span class="token boolean">true</span> <span class="token operator">-</span><span class="token class-name">Xverify</span><span class="token operator">:</span>none <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">ErrorFile</span><span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span>java_error_in_idea_<span class="token operator">%</span>p<span class="token punctuation">.</span>log <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">HeapDumpPath</span><span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span>java_error_in_idea<span class="token punctuation">.</span>hprof <span class="token operator">-</span>javaagent<span class="token operator">:</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span><span class="token punctuation">.</span>jetbrains<span class="token operator">/</span>jetbrains<span class="token operator">-</span>agent<span class="token operator">-</span>v3<span class="token punctuation">.</span><span class="token number">2.0</span><span class="token punctuation">.</span>de72<span class="token punctuation">.</span><span class="token number">619</span> <span class="token operator">-</span><span class="token class-name">Djb</span><span class="token punctuation">.</span>vmOptionsFile<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span><span class="token class-name">Library</span><span class="token operator">/</span><span class="token class-name">Application</span> <span class="token class-name">Support</span><span class="token operator">/</span><span class="token class-name">JetBrains</span><span class="token operator">/</span><span class="token class-name">IntelliJIdea2020</span><span class="token number">.1</span><span class="token operator">/</span>idea<span class="token punctuation">.</span>vmoptions <span class="token operator">-</span><span class="token class-name">Didea</span><span class="token punctuation">.</span>paths<span class="token punctuation">.</span>selector<span class="token operator">=</span><span class="token class-name">IntelliJIdea2020</span><span class="token number">.1</span> <span class="token operator">-</span><span class="token class-name">Didea</span><span class="token punctuation">.</span>executable<span class="token operator">=</span>idea <span class="token operator">-</span><span class="token class-name">Didea</span><span class="token punctuation">.</span>home<span class="token punctuation">.</span>path<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span> <span class="token operator">-</span><span class="token class-name">Didea</span><span class="token punctuation">.</span>vendor<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token class-name">JetBrains</span><span class="token number">40085</span> <span class="token class-name">Launcher</span> <span class="token operator">-</span><span class="token class-name">Xmx700m</span> <span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>awt<span class="token punctuation">.</span>headless<span class="token operator">=</span><span class="token boolean">true</span> <span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>endorsed<span class="token punctuation">.</span>dirs<span class="token operator">=</span><span class="token string">""</span> <span class="token operator">-</span><span class="token class-name">Djdt</span><span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>useSingleThread<span class="token operator">=</span><span class="token boolean">true</span> <span class="token operator">-</span><span class="token class-name">Dpreload</span><span class="token punctuation">.</span>project<span class="token punctuation">.</span>path<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span>github<span class="token operator">/</span>blog<span class="token operator">-</span>example<span class="token operator">/</span>blog<span class="token operator">-</span>example <span class="token operator">-</span><span class="token class-name">Dpreload</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>path<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span><span class="token class-name">Library</span><span class="token operator">/</span><span class="token class-name">Application</span> <span class="token class-name">Support</span><span class="token operator">/</span><span class="token class-name">JetBrains</span><span class="token operator">/</span><span class="token class-name">IntelliJIdea2020</span><span class="token number">.1</span><span class="token operator">/</span>options <span class="token operator">-</span><span class="token class-name">Dcompile</span><span class="token punctuation">.</span>parallel<span class="token operator">=</span><span class="token boolean">false</span> <span class="token operator">-</span><span class="token class-name">Drebuild</span><span class="token punctuation">.</span>on<span class="token punctuation">.</span>dependency<span class="token punctuation">.</span>change<span class="token operator">=</span><span class="token boolean">true</span> <span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>net<span class="token punctuation">.</span>preferIPv4Stack<span class="token operator">=</span><span class="token boolean">true</span> <span class="token operator">-</span><span class="token class-name">Dio</span><span class="token punctuation">.</span>netty<span class="token punctuation">.</span>initialSeedUniquifier<span class="token operator">=</span><span class="token number">1366842080359982660</span> <span class="token operator">-</span><span class="token class-name">Dfile</span><span class="token punctuation">.</span>encoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span><span class="token class-name">Duser</span><span class="token punctuation">.</span>language<span class="token operator">=</span>zh <span class="token operator">-</span><span class="token class-name">Duser</span><span class="token punctuation">.</span>country<span class="token operator">=</span>CN <span class="token operator">-</span><span class="token class-name">Didea</span><span class="token punctuation">.</span>paths<span class="token punctuation">.</span>selector<span class="token operator">=</span><span class="token class-name">IntelliJIdea2020</span><span class="token number">.1</span> <span class="token operator">-</span><span class="token class-name">Didea</span><span class="token punctuation">.</span>home<span class="token punctuation">.</span>path<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span> <span class="token operator">-</span><span class="token class-name">Didea</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>path<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span><span class="token class-name">Library</span><span class="token operator">/</span><span class="token class-name">Application</span> <span class="token class-name">Support</span><span class="token operator">/</span><span class="token class-name">JetBrains</span><span class="token operator">/</span><span class="token class-name">IntelliJIdea2020</span><span class="token number">.1</span> <span class="token operator">-</span><span class="token class-name">Didea</span><span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>path<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span><span class="token class-name">Library</span><span class="token operator">/</span><span class="token class-name">Application</span> <span class="token class-name">Support</span><span class="token operator">/</span><span class="token class-name">JetBrains</span><span class="token operator">/</span><span class="token class-name">IntelliJIdea2020</span><span class="token number">.1</span><span class="token operator">/</span>plugins <span class="token operator">-</span><span class="token class-name">Djps</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span>dir<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span><span class="token class-name">Library</span><span class="token operator">/</span><span class="token class-name">Logs</span><span class="token operator">/</span><span class="token class-name">JetBrains</span><span class="token operator">/</span><span class="token class-name">IntelliJIdea2020</span><span class="token number">.1</span><span class="token operator">/</span>build<span class="token operator">-</span>log <span class="token operator">-</span><span class="token class-name">Djps</span><span class="token punctuation">.</span>fallback<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>home<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>jbr<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span><span class="token class-name">Home</span> <span class="token operator">-</span><span class="token class-name">Djps</span><span class="token punctuation">.</span>fallback<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>version<span class="token operator">=</span><span class="token number">11.0</span><span class="token number">.6</span> <span class="token operator">-</span><span class="token class-name">Dio</span><span class="token punctuation">.</span>netty<span class="token punctuation">.</span>noUnsafe<span class="token operator">=</span><span class="token boolean">true</span> <span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>io<span class="token punctuation">.</span>tmpdir<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span><span class="token class-name">Library</span><span class="token operator">/</span><span class="token class-name">Caches</span><span class="token operator">/</span><span class="token class-name">Je</span><span class="token number">40086</span> <span class="token class-name">NativeOptimize</span> <span class="token operator">-</span><span class="token class-name">Dfile</span><span class="token punctuation">.</span>encoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token number">40425</span> <span class="token class-name">Jps</span> <span class="token operator">-</span><span class="token class-name">Dapplication</span><span class="token punctuation">.</span>home<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span><span class="token class-name">Library</span><span class="token operator">/</span><span class="token class-name">Java</span><span class="token operator">/</span><span class="token class-name">JavaVirtualMachines</span><span class="token operator">/</span>openjdk<span class="token operator">-</span><span class="token number">14</span><span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span><span class="token class-name">Home</span> <span class="token operator">-</span><span class="token class-name">Xms8m</span> <span class="token operator">-</span><span class="token class-name">Djdk</span><span class="token punctuation">.</span><span class="token keyword">module</span><span class="token punctuation">.</span>main<span class="token operator">=</span>jdk<span class="token punctuation">.</span>jcmd<span class="token number">68879</span> <span class="token class-name">RemoteMavenServer36</span> <span class="token operator">-</span><span class="token class-name">Djava</span><span class="token punctuation">.</span>awt<span class="token punctuation">.</span>headless<span class="token operator">=</span><span class="token boolean">true</span> <span class="token operator">-</span><span class="token class-name">Dmaven</span><span class="token punctuation">.</span>defaultProjectBuilder<span class="token punctuation">.</span>disableGlobalModelCache<span class="token operator">=</span><span class="token boolean">true</span> <span class="token operator">-</span><span class="token class-name">Xmx768m</span> <span class="token operator">-</span><span class="token class-name">Didea</span><span class="token punctuation">.</span>maven<span class="token punctuation">.</span>embedder<span class="token punctuation">.</span>version<span class="token operator">=</span><span class="token number">3.6</span><span class="token number">.1</span> <span class="token operator">-</span><span class="token class-name">Dmaven</span><span class="token punctuation">.</span>ext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>path<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Applications</span><span class="token operator">/</span><span class="token class-name">IntelliJ</span> IDEA2<span class="token punctuation">.</span>app<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span>plugins<span class="token operator">/</span>maven<span class="token operator">/</span>lib<span class="token operator">/</span>maven<span class="token operator">-</span>event<span class="token operator">-</span>listener<span class="token punctuation">.</span>jar <span class="token operator">-</span><span class="token class-name">Dfile</span><span class="token punctuation">.</span>encoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-jstat（虚拟机统计信息监视工具）"><a href="#2-jstat（虚拟机统计信息监视工具）" class="headerlink" title="2.jstat（虚拟机统计信息监视工具）"></a>2.jstat（虚拟机统计信息监视工具）</h4><p>jstat（JVM Statistics Monitoring Tool，虚拟机统计信息监视工具）用于监控虚拟机的运行状态信息。</p><p>例如，我们用它来查询某个 Java 进程的垃圾收集情况，示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">➜  jstat <span class="token operator">-</span>gc <span class="token number">43704</span> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT    CGC    CGCT     GCT<span class="token number">10752.0</span> <span class="token number">10752.0</span>  <span class="token number">0.0</span>    <span class="token number">0.0</span>   <span class="token number">65536.0</span>   <span class="token number">5243.4</span>   <span class="token number">175104.0</span>     <span class="token number">0.0</span>     <span class="token number">4480.0</span> <span class="token number">774.0</span>  <span class="token number">384.0</span>   <span class="token number">75.8</span>       <span class="token number">0</span>    <span class="token number">0.000</span>   <span class="token number">0</span>      <span class="token number">0.000</span>   <span class="token operator">-</span>          <span class="token operator">-</span>    <span class="token number">0.000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数说明如下表所示：</p><table>    <thead>        <tr>        <th>参数</th>        <th>说明</th>        </tr>    </thead>    <tbody>        <tr>            <td>S0C</td>            <td>年轻代中第一个存活区的大小</td>        </tr>        <tr>            <td>S1C</td>            <td>年轻代中第二个存活区的大小</td>        </tr>            <tr>            <td>S0U</td>            <td>年轻代中第一个存活区已使用的空间（字节）</td>        </tr>        <tr>            <td>S1U</td>            <td>年轻代中第二个存活区已使用的空间（字节）</td>        </tr>        <tr>            <td>EC</td>            <td>Edem 区大小</td>        </tr>        <tr>            <td>EU</td>            <td>年轻代中 Edem 区已使用的空间（字节）</td>        </tr>          <tr>            <td>OC</td>            <td>老年代大小</td>        </tr>        <tr>            <td>OU</td>            <td>老年代已使用的空间（字节）</td>        </tr>        <tr>            <td>YGC</td>            <td>从应用程序启动到采样时 young gc 的次数</td>        </tr>        <tr>            <td>YGCT</td>            <td>从应用程序启动到采样时 young gc 的所用的时间（s）</td>        </tr>        <tr>            <td>FGC</td>            <td>从应用程序启动到采样时 full gc 的次数</td>        </tr>        <tr>            <td>FGCT</td>            <td>从应用程序启动到采样时 full gc 的所用的时间</td>        </tr>        <tr>            <td>GCT</td>            <td>从应用程序启动到采样时整个 gc 所用的时间</td>        </tr>           </tbody> </table><blockquote><p>注意：年轻代的 Edem 区满了会触发 young gc，老年代满了会触发 old gc。full gc 指的是清除整个堆，包括 young 区 和 old 区。</p></blockquote><p>jstat 常用的查询参数有：</p><ul><li>-class，查询类加载器信息；</li><li>-compiler，JIT 相关信息；</li><li>-gc，GC 堆状态；</li><li>-gcnew，新生代统计信息；</li><li>-gcutil，GC 堆统计汇总信息。</li></ul><h4 id="3-jinfo（查询虚拟机参数配置工具）"><a href="#3-jinfo（查询虚拟机参数配置工具）" class="headerlink" title="3.jinfo（查询虚拟机参数配置工具）"></a>3.jinfo（查询虚拟机参数配置工具）</h4><p>jinfo（Configuration Info for Java）用于查看和调整虚拟机各项参数。语法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">jinfo <span class="token generics"><span class="token punctuation">&lt;</span>option<span class="token punctuation">&gt;</span></span> <span class="token generics"><span class="token punctuation">&lt;</span>pid<span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 JVM 参数示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">➜  jinfo <span class="token operator">-</span>flags <span class="token number">45129</span>VM <span class="token class-name">Flags</span><span class="token operator">:</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">CICompilerCount</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">InitialHeapSize</span><span class="token operator">=</span><span class="token number">268435456</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">MaxHeapSize</span><span class="token operator">=</span><span class="token number">4294967296</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">MaxNewSize</span><span class="token operator">=</span><span class="token number">1431306240</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">MinHeapDeltaBytes</span><span class="token operator">=</span><span class="token number">524288</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">NewSize</span><span class="token operator">=</span><span class="token number">89128960</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">OldSize</span><span class="token operator">=</span><span class="token number">179306496</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseCompressedClassPointers</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseCompressedOops</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseFastUnorderedTimeStamps</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseParallelGC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中 45129 是使用 jps 查询的 LVMID。<br>我们可以通过 jinfo -flag [+/-]name 来修改虚拟机的参数值，比如下面的示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">➜  jinfo <span class="token operator">-</span>flag <span class="token class-name">PrintGC</span> <span class="token number">45129</span> # 查询是否开启 GC 打印<span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">-</span><span class="token class-name">PrintGC</span>➜  jinfo <span class="token operator">-</span>flag <span class="token operator">+</span><span class="token class-name">PrintGC</span> <span class="token number">45129</span> # 开启 GC 打印➜  jinfo <span class="token operator">-</span>flag <span class="token class-name">PrintGC</span> <span class="token number">45129</span> # 查询是否开启 GC 打印<span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintGC</span>➜  jinfo <span class="token operator">-</span>flag <span class="token operator">-</span><span class="token class-name">PrintGC</span> <span class="token number">45129</span> # 关闭 GC 打印➜  jinfo <span class="token operator">-</span>flag <span class="token class-name">PrintGC</span> <span class="token number">45129</span> # 查询是否开启 GC 打印<span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">-</span><span class="token class-name">PrintGC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-jmap（堆快照生成工具）"><a href="#4-jmap（堆快照生成工具）" class="headerlink" title="4.jmap（堆快照生成工具）"></a>4.jmap（堆快照生成工具）</h4><p>jmap（Memory Map for Java）用于查询堆的快照信息。</p><p>查询堆信息示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">➜  jmap <span class="token operator">-</span>heap <span class="token number">45129</span><span class="token class-name">Attaching</span> <span class="token keyword">to</span> <span class="token namespace">process</span> <span class="token class-name">ID</span> <span class="token number">45129</span><span class="token punctuation">,</span> please wait<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Debugger</span> attached successfully<span class="token punctuation">.</span><span class="token class-name">Server</span> compiler detected<span class="token punctuation">.</span>JVM version is <span class="token number">25.101</span><span class="token operator">-</span>b13using thread<span class="token operator">-</span>local object allocation<span class="token punctuation">.</span><span class="token class-name">Parallel</span> GC <span class="token keyword">with</span> <span class="token number">6</span> <span class="token function">thread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token class-name">Heap</span> <span class="token class-name">Configuration</span><span class="token operator">:</span>   <span class="token class-name">MinHeapFreeRatio</span>         <span class="token operator">=</span> <span class="token number">0</span>   <span class="token class-name">MaxHeapFreeRatio</span>         <span class="token operator">=</span> <span class="token number">100</span>   <span class="token class-name">MaxHeapSize</span>              <span class="token operator">=</span> <span class="token number">4294967296</span> <span class="token punctuation">(</span><span class="token number">4096.0</span>MB<span class="token punctuation">)</span>   <span class="token class-name">NewSize</span>                  <span class="token operator">=</span> <span class="token number">89128960</span> <span class="token punctuation">(</span><span class="token number">85.0</span>MB<span class="token punctuation">)</span>   <span class="token class-name">MaxNewSize</span>               <span class="token operator">=</span> <span class="token number">1431306240</span> <span class="token punctuation">(</span><span class="token number">1365.0</span>MB<span class="token punctuation">)</span>   <span class="token class-name">OldSize</span>                  <span class="token operator">=</span> <span class="token number">179306496</span> <span class="token punctuation">(</span><span class="token number">171.0</span>MB<span class="token punctuation">)</span>   <span class="token class-name">NewRatio</span>                 <span class="token operator">=</span> <span class="token number">2</span>   <span class="token class-name">SurvivorRatio</span>            <span class="token operator">=</span> <span class="token number">8</span>   <span class="token class-name">MetaspaceSize</span>            <span class="token operator">=</span> <span class="token number">21807104</span> <span class="token punctuation">(</span><span class="token number">20.796875</span>MB<span class="token punctuation">)</span>   <span class="token class-name">CompressedClassSpaceSize</span> <span class="token operator">=</span> <span class="token number">1073741824</span> <span class="token punctuation">(</span><span class="token number">1024.0</span>MB<span class="token punctuation">)</span>   <span class="token class-name">MaxMetaspaceSize</span>         <span class="token operator">=</span> <span class="token number">17592186044415</span> MB   <span class="token class-name">G1HeapRegionSize</span>         <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span>MB<span class="token punctuation">)</span><span class="token class-name">Heap</span> <span class="token class-name">Usage</span><span class="token operator">:</span>PS <span class="token class-name">Young</span> <span class="token class-name">Generation</span><span class="token class-name">Eden</span> <span class="token class-name">Space</span><span class="token operator">:</span>   capacity <span class="token operator">=</span> <span class="token number">67108864</span> <span class="token punctuation">(</span><span class="token number">64.0</span>MB<span class="token punctuation">)</span>   used     <span class="token operator">=</span> <span class="token number">5369232</span> <span class="token punctuation">(</span><span class="token number">5.1204986572265625</span>MB<span class="token punctuation">)</span>   free     <span class="token operator">=</span> <span class="token number">61739632</span> <span class="token punctuation">(</span><span class="token number">58.87950134277344</span>MB<span class="token punctuation">)</span>   <span class="token number">8.000779151916504</span><span class="token operator">%</span> used<span class="token class-name">From</span> <span class="token class-name">Space</span><span class="token operator">:</span>   capacity <span class="token operator">=</span> <span class="token number">11010048</span> <span class="token punctuation">(</span><span class="token number">10.5</span>MB<span class="token punctuation">)</span>   used     <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span>MB<span class="token punctuation">)</span>   free     <span class="token operator">=</span> <span class="token number">11010048</span> <span class="token punctuation">(</span><span class="token number">10.5</span>MB<span class="token punctuation">)</span>   <span class="token number">0.0</span><span class="token operator">%</span> used<span class="token class-name">To</span> <span class="token class-name">Space</span><span class="token operator">:</span>   capacity <span class="token operator">=</span> <span class="token number">11010048</span> <span class="token punctuation">(</span><span class="token number">10.5</span>MB<span class="token punctuation">)</span>   used     <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span>MB<span class="token punctuation">)</span>   free     <span class="token operator">=</span> <span class="token number">11010048</span> <span class="token punctuation">(</span><span class="token number">10.5</span>MB<span class="token punctuation">)</span>   <span class="token number">0.0</span><span class="token operator">%</span> usedPS <span class="token class-name">Old</span> <span class="token class-name">Generation</span>   capacity <span class="token operator">=</span> <span class="token number">179306496</span> <span class="token punctuation">(</span><span class="token number">171.0</span>MB<span class="token punctuation">)</span>   used     <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span>MB<span class="token punctuation">)</span>   free     <span class="token operator">=</span> <span class="token number">179306496</span> <span class="token punctuation">(</span><span class="token number">171.0</span>MB<span class="token punctuation">)</span>   <span class="token number">0.0</span><span class="token operator">%</span> used<span class="token number">2158</span> interned <span class="token class-name">Strings</span> occupying <span class="token number">152472</span> bytes<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以直接生成堆快照文件，示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">➜  jmap <span class="token operator">-</span>dump<span class="token operator">:</span>format<span class="token operator">=</span>b<span class="token punctuation">,</span>file<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span><span class="token class-name">Documents</span><span class="token operator">/</span><span class="token number">2020.d</span>ump <span class="token number">47380</span><span class="token class-name">Dumping</span> heap <span class="token keyword">to</span> <span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span><span class="token class-name">Documents</span><span class="token operator">/</span><span class="token number">2020.d</span>ump <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Heap</span> dump file created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-jhat（堆快照分析功能）"><a href="#5-jhat（堆快照分析功能）" class="headerlink" title="5.jhat（堆快照分析功能）"></a>5.jhat（堆快照分析功能）</h4><p>jhat（JVM Heap Analysis Tool，堆快照分析工具）和 jmap 搭配使用，用于启动一个 web 站点来分析 jmap 生成的快照文件。</p><p>执行示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">jhat <span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span><span class="token class-name">Documents</span><span class="token operator">/</span><span class="token number">2020.d</span>ump<span class="token class-name">Reading</span> from <span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>admin<span class="token operator">/</span><span class="token class-name">Documents</span><span class="token operator">/</span><span class="token number">2020.d</span>ump<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Dump</span> file created <span class="token class-name">Tue</span> <span class="token class-name">May</span> <span class="token number">26</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">41</span> CST <span class="token number">2020</span><span class="token class-name">Snapshot</span> read<span class="token punctuation">,</span> resolving<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Resolving</span> <span class="token number">17797</span> objects<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Chasing</span> references<span class="token punctuation">,</span> expect <span class="token number">3</span> dots<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Eliminating</span> duplicate references<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Snapshot</span> resolved<span class="token punctuation">.</span><span class="token class-name">Started</span> HTTP server on port <span class="token number">7000</span><span class="token class-name">Server</span> is ready<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述信息表示 jhat 启动了一个 http 的服务器端口为 7000 的站点来展示信息，此时我们在浏览器中输入：<a href="http://localhost:7000/%EF%BC%8C%E4%BC%9A%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%E7%9A%84%E4%BF%A1%E6%81%AF%EF%BC%9A">http://localhost:7000/，会看到如下图所示的信息：</a></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/f7a16f3ed843fb083d21bde35b644f8.png"></p><h4 id="6-jstack（查询虚拟机当前的线程快照信息）"><a href="#6-jstack（查询虚拟机当前的线程快照信息）" class="headerlink" title="6.jstack（查询虚拟机当前的线程快照信息）"></a>6.jstack（查询虚拟机当前的线程快照信息）</h4><p>jstack（Stack Trace for Java）用于查看当前虚拟机的线程快照，用它可以排查线程的执行状况，例如排查死锁、死循环等问题。</p><p>比如，我们先写一段死锁的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NativeOptimize</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"锁住 obj2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 执行不到这里</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1秒钟后，"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token operator">+</span> <span class="token string">"锁住 obj1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"锁住 obj1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">try</span> <span class="token punctuation">{</span>                     <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                 <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment">// 执行不到这里</span>                     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1秒钟后，"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">+</span> <span class="token string">"锁住 obj2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">main：锁住 obj1<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span>：锁住 obj2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时我们使用 jstack 工具打印一下当前线程的快照信息，结果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">➜  bin jstack <span class="token operator">-</span>l <span class="token number">50016</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">41</span><span class="token class-name">Full</span> thread dump <span class="token class-name">Java</span> <span class="token class-name">HotSpot</span><span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span><span class="token operator">-</span><span class="token class-name">Bit</span> <span class="token class-name">Server</span> VM <span class="token punctuation">(</span><span class="token number">25.101</span><span class="token operator">-</span>b13 mixed mode<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"Attach Listener"</span> #<span class="token number">10</span> daemon prio<span class="token operator">=</span><span class="token number">9</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c00840800</span> nid<span class="token operator">=</span><span class="token number">0x3c03</span> waiting on condition <span class="token punctuation">[</span><span class="token number">0x0000000000000000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token operator">:</span> RUNNABLE   <span class="token class-name">Locked</span> ownable synchronizers<span class="token operator">:</span><span class="token operator">-</span> <span class="token class-name">None</span><span class="token string">"Thread-0"</span> #<span class="token number">9</span> prio<span class="token operator">=</span><span class="token number">5</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c00840000</span> nid<span class="token operator">=</span><span class="token number">0x3e03</span> waiting <span class="token keyword">for</span> monitor entry <span class="token punctuation">[</span><span class="token number">0x00007000100c8000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token operator">:</span> BLOCKED <span class="token punctuation">(</span>on object monitor<span class="token punctuation">)</span>at com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span><span class="token class-name">NativeOptimize</span>$<span class="token number">1.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">NativeOptimize</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">-</span> waiting <span class="token keyword">to</span> <span class="token namespace">lock</span> <span class="token generics"><span class="token punctuation">&lt;</span>0x000000076abb62d0<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0x000000076abb62e0<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">745</span><span class="token punctuation">)</span>   <span class="token class-name">Locked</span> ownable synchronizers<span class="token operator">:</span><span class="token operator">-</span> <span class="token class-name">None</span><span class="token string">"Service Thread"</span> #<span class="token number">8</span> daemon prio<span class="token operator">=</span><span class="token number">9</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c01814800</span> nid<span class="token operator">=</span><span class="token number">0x4103</span> runnable <span class="token punctuation">[</span><span class="token number">0x0000000000000000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token operator">:</span> RUNNABLE   <span class="token class-name">Locked</span> ownable synchronizers<span class="token operator">:</span><span class="token operator">-</span> <span class="token class-name">None</span><span class="token string">"C1 CompilerThread2"</span> #<span class="token number">7</span> daemon prio<span class="token operator">=</span><span class="token number">9</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c0283c800</span> nid<span class="token operator">=</span><span class="token number">0x4303</span> waiting on condition <span class="token punctuation">[</span><span class="token number">0x0000000000000000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token operator">:</span> RUNNABLE   <span class="token class-name">Locked</span> ownable synchronizers<span class="token operator">:</span><span class="token operator">-</span> <span class="token class-name">None</span><span class="token string">"C2 CompilerThread1"</span> #<span class="token number">6</span> daemon prio<span class="token operator">=</span><span class="token number">9</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c0300a800</span> nid<span class="token operator">=</span><span class="token number">0x4403</span> waiting on condition <span class="token punctuation">[</span><span class="token number">0x0000000000000000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token operator">:</span> RUNNABLE   <span class="token class-name">Locked</span> ownable synchronizers<span class="token operator">:</span><span class="token operator">-</span> <span class="token class-name">None</span><span class="token string">"C2 CompilerThread0"</span> #<span class="token number">5</span> daemon prio<span class="token operator">=</span><span class="token number">9</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c0283c000</span> nid<span class="token operator">=</span><span class="token number">0x3603</span> waiting on condition <span class="token punctuation">[</span><span class="token number">0x0000000000000000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token operator">:</span> RUNNABLE   <span class="token class-name">Locked</span> ownable synchronizers<span class="token operator">:</span><span class="token operator">-</span> <span class="token class-name">None</span><span class="token string">"Signal Dispatcher"</span> #<span class="token number">4</span> daemon prio<span class="token operator">=</span><span class="token number">9</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c0283b000</span> nid<span class="token operator">=</span><span class="token number">0x4603</span> runnable <span class="token punctuation">[</span><span class="token number">0x0000000000000000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token operator">:</span> RUNNABLE   <span class="token class-name">Locked</span> ownable synchronizers<span class="token operator">:</span><span class="token operator">-</span> <span class="token class-name">None</span><span class="token string">"Finalizer"</span> #<span class="token number">3</span> daemon prio<span class="token operator">=</span><span class="token number">8</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c03001000</span> nid<span class="token operator">=</span><span class="token number">0x5003</span> in <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0x000070000f8ad000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token operator">:</span> WAITING <span class="token punctuation">(</span>on object monitor<span class="token punctuation">)</span>at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span><span class="token operator">-</span> waiting on <span class="token generics"><span class="token punctuation">&lt;</span>0x000000076ab08ee0<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span><span class="token class-name">ReferenceQueue</span>$<span class="token class-name">Lock</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span><span class="token class-name">ReferenceQueue</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">ReferenceQueue</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">143</span><span class="token punctuation">)</span><span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0x000000076ab08ee0<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span><span class="token class-name">ReferenceQueue</span>$<span class="token class-name">Lock</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span><span class="token class-name">ReferenceQueue</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">ReferenceQueue</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">164</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span><span class="token class-name">Finalizer</span>$<span class="token class-name">FinalizerThread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Finalizer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">209</span><span class="token punctuation">)</span>   <span class="token class-name">Locked</span> ownable synchronizers<span class="token operator">:</span><span class="token operator">-</span> <span class="token class-name">None</span><span class="token string">"Reference Handler"</span> #<span class="token number">2</span> daemon prio<span class="token operator">=</span><span class="token number">10</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c03000000</span> nid<span class="token operator">=</span><span class="token number">0x2f03</span> in <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0x000070000f7aa000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token operator">:</span> WAITING <span class="token punctuation">(</span>on object monitor<span class="token punctuation">)</span>at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span><span class="token operator">-</span> waiting on <span class="token generics"><span class="token punctuation">&lt;</span>0x000000076ab06b50<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span><span class="token class-name">Reference</span>$<span class="token class-name">Lock</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">502</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span><span class="token class-name">Reference</span><span class="token punctuation">.</span><span class="token function">tryHandlePending</span><span class="token punctuation">(</span><span class="token class-name">Reference</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">191</span><span class="token punctuation">)</span><span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0x000000076ab06b50<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span><span class="token class-name">Reference</span>$<span class="token class-name">Lock</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span><span class="token class-name">Reference</span>$<span class="token class-name">ReferenceHandler</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Reference</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">153</span><span class="token punctuation">)</span>   <span class="token class-name">Locked</span> ownable synchronizers<span class="token operator">:</span><span class="token operator">-</span> <span class="token class-name">None</span><span class="token string">"main"</span> #<span class="token number">1</span> prio<span class="token operator">=</span><span class="token number">5</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c00802800</span> nid<span class="token operator">=</span><span class="token number">0x1003</span> waiting <span class="token keyword">for</span> monitor entry <span class="token punctuation">[</span><span class="token number">0x000070000ef92000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token operator">:</span> BLOCKED <span class="token punctuation">(</span>on object monitor<span class="token punctuation">)</span>at com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span><span class="token class-name">NativeOptimize</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">NativeOptimize</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token operator">-</span> waiting <span class="token keyword">to</span> <span class="token namespace">lock</span> <span class="token generics"><span class="token punctuation">&lt;</span>0x000000076abb62e0<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0x000000076abb62d0<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">)</span>   <span class="token class-name">Locked</span> ownable synchronizers<span class="token operator">:</span><span class="token operator">-</span> <span class="token class-name">None</span><span class="token string">"VM Thread"</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c01008800</span> nid<span class="token operator">=</span><span class="token number">0x2e03</span> runnable<span class="token string">"GC task thread#0 (ParallelGC)"</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c00803000</span> nid<span class="token operator">=</span><span class="token number">0x2007</span> runnable<span class="token string">"GC task thread#1 (ParallelGC)"</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c00006800</span> nid<span class="token operator">=</span><span class="token number">0x2403</span> runnable<span class="token string">"GC task thread#2 (ParallelGC)"</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c01800800</span> nid<span class="token operator">=</span><span class="token number">0x2303</span> runnable<span class="token string">"GC task thread#3 (ParallelGC)"</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c01801800</span> nid<span class="token operator">=</span><span class="token number">0x2a03</span> runnable<span class="token string">"GC task thread#4 (ParallelGC)"</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c01802000</span> nid<span class="token operator">=</span><span class="token number">0x5403</span> runnable<span class="token string">"GC task thread#5 (ParallelGC)"</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c01006800</span> nid<span class="token operator">=</span><span class="token number">0x2d03</span> runnable<span class="token string">"VM Periodic Task Thread"</span> os_prio<span class="token operator">=</span><span class="token number">31</span> tid<span class="token operator">=</span><span class="token number">0x00007f8c00010800</span> nid<span class="token operator">=</span><span class="token number">0x3803</span> waiting on conditionJNI global references<span class="token operator">:</span> <span class="token number">6</span><span class="token class-name">Found</span> one <span class="token class-name">Java</span><span class="token operator">-</span>level deadlock<span class="token operator">:</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token string">"Thread-0"</span><span class="token operator">:</span>  waiting <span class="token keyword">to</span> <span class="token namespace">lock</span> monitor <span class="token number">0x00007f8c000102a8</span> <span class="token punctuation">(</span>object <span class="token number">0x000000076abb62d0</span><span class="token punctuation">,</span> a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  which is held by <span class="token string">"main"</span><span class="token string">"main"</span><span class="token operator">:</span>  waiting <span class="token keyword">to</span> <span class="token namespace">lock</span> monitor <span class="token number">0x00007f8c0000ed58</span> <span class="token punctuation">(</span>object <span class="token number">0x000000076abb62e0</span><span class="token punctuation">,</span> a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  which is held by <span class="token string">"Thread-0"</span><span class="token class-name">Java</span> stack information <span class="token keyword">for</span> the threads listed above<span class="token operator">:</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token string">"Thread-0"</span><span class="token operator">:</span>at com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span><span class="token class-name">NativeOptimize</span>$<span class="token number">1.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">NativeOptimize</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">-</span> waiting <span class="token keyword">to</span> <span class="token namespace">lock</span> <span class="token generics"><span class="token punctuation">&lt;</span>0x000000076abb62d0<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0x000000076abb62e0<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">745</span><span class="token punctuation">)</span><span class="token string">"main"</span><span class="token operator">:</span>at com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span><span class="token class-name">NativeOptimize</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">NativeOptimize</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token operator">-</span> waiting <span class="token keyword">to</span> <span class="token namespace">lock</span> <span class="token generics"><span class="token punctuation">&lt;</span>0x000000076abb62e0<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token operator">-</span> locked <span class="token generics"><span class="token punctuation">&lt;</span>0x000000076abb62d0<span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token class-name">Found</span> <span class="token number">1</span> deadlock<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上述信息可以看出使用 jstack ，可以很方便地排查出代码中出现“deadlock”（死锁）的问题。</p><h3 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h3><hr><p>Java 虚拟机的排查工具是一个合格程序员必备的技能，使用它我们可以很方便地定位出问题的所在，尤其在团队合作的今天，每个人各守一摊很容易出现隐藏的 bug（缺陷）。因此使用这些排查功能可以帮我们快速地定位并解决问题，所以它也是面试中常问的问题之一。</p><p>和此知识点相关的面试题还有以下这些：</p><ul><li>除了比较实用的命令行工具之外，有没有方便一点的排查工具？</li><li>JVM 常见的调优手段有哪些？</li></ul><h3 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h3><hr><h4 id="可视化排查工具"><a href="#可视化排查工具" class="headerlink" title="可视化排查工具"></a>可视化排查工具</h4><p>JVM 除了上面的 6 个基础命令行工具之外，还有两个重要的视图调试工具，即 JConsole 和 JVisualVM，它们相比于命令行工具使用更方便、操作更简单、结果展现也更直观。</p><p>JConsole 和 JVisualVM 都位于 JDK 的 bin 目录下，JConsole（Java Monitoring and Management Console）是最早期的视图调试工具，其启动页面如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/97d8a19e3d7754eebb0ea714e31235d.png"></p><p>可以看出我们可以用它来连接远程的服务器，或者是直接调试本机，这样就可以在不消耗生产环境的性能下，从本机启动 JConsole 来连接服务器。选择了调试的进程之后，运行界面如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/5df6442ae06f47624c50e63d2523ded.png"></p><p>从上图可以看出，使用 JConsole 可以监控线程、CPU、类、堆以及 VM 的相关信息，同样我们可以通过线程这一页的信息，发现之前我们故意写的死锁问题，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/CgqCHl7Z6amAF-LOAAKoeNJzszw795.png"></p><p>可以看到 main（主线程）和 Thread-0 线程处于死锁状态。</p><p>JVisualVM 的启动图如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/CgqCHl7Z6a-AK0DMAAHTxm7JgYI402.png"></p><p>由上图可知，JVisualVM 既可以调试本地也可以调试远程服务器，当我们选择了相关的进程之后，运行如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/CgqCHl7Z6beAUJ6sAAMkaaTyA9U352.png"></p><p>可以看出 JVisualVM 除了包含了 JConsole 的信息之外，还有更多的详细信息，并且更加智能。例如，线程死锁检查的这页内容如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/Ciqc1F7Z6b2Aa8CCAANpsufYncw124.png"></p><p>可以看出 JVisualVM 会直接给你一个死锁的提示，而 JConsole 则需要程序员自己分析。</p><h4 id="JVM-调优"><a href="#JVM-调优" class="headerlink" title="JVM 调优"></a>JVM 调优</h4><p>JVM 调优主要是根据实际的硬件配置信息重新设置 JVM 参数来进行调优的，例如，硬件的内存配置很高，但 JVM 因为是默认参数，所以最大内存和初始化堆内存很小，这样就不能更好地利用本地的硬件优势了。因此，需要调整这些参数，让 JVM 在固定的配置下发挥最大的价值。</p><p>JVM 常见调优参数包含以下这些：</p><ul><li>-Xmx，设置最大堆内存大小；</li><li>-Xms，设置初始堆内存大小；</li><li>-XX:MaxNewSize，设置新生代的最大内存；</li><li>-XX:MaxTenuringThreshold，设置新生代对象经过一定的次数晋升到老生代；</li><li>-XX:PretrnureSizeThreshold，设置大对象的值，超过这个值的对象会直接进入老生代；</li><li>-XX:NewRatio，设置分代垃圾回收器新生代和老生代内存占比；</li><li>-XX:SurvivorRatio，设置新生代 Eden、Form Survivor、To Survivor 占比。</li></ul><p>我们要根据自己的业务场景和硬件配置来设置这些值。例如，当我们的业务场景会有很多大的临时对象产生时，因为这些大对象只有很短的生命周期，因此需要把“-XX:MaxNewSize”的值设置的尽量大一些，否则就会造成大量短生命周期的大对象进入老生代，从而很快消耗掉了老生代的内存，这样就会频繁地触发 full gc，从而影响了业务的正常运行。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><hr><p>本文章讲了 JVM 排查的 6 个基本命令行工具：jps、jstat、jinfo、jmap、jhat、jstack，以及 2 个视图排查工具：JConsole 和 JVisualVM；同时还讲了 JVM 的常见调优参数。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java进阶3-垃圾回收器</title>
      <link href="2020/10/18/java-jin-jie-3-la-ji-hui-shou-qi/"/>
      <url>2020/10/18/java-jin-jie-3-la-ji-hui-shou-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="你用过哪些垃圾回收器？它们有什么区别？"><a href="#你用过哪些垃圾回收器？它们有什么区别？" class="headerlink" title="你用过哪些垃圾回收器？它们有什么区别？"></a>你用过哪些垃圾回收器？它们有什么区别？</h3><ul><li>上一文章我们讲了垃圾回收的理论知识，而本文章将介绍这些理论知识的具体实践。垃圾回收器也叫垃圾收集器，不同的厂商对垃圾收集器的实现也是不同的，这里主要介绍目前使用最广泛的 OracleJDK 中自带的 HotSpot 虚拟机中的几个垃圾收集器。</li></ul><a id="more"></a><p><strong>本文章的面试题是，你用过哪些垃圾回收器？它们有什么区别？</strong></p><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><p>《Java 虚拟机规范》并没有对垃圾收集器的具体实现做任何的规定，因此每家垃圾收集器的实现方式都不同，但比较常用的垃圾回收器是 OracleJDK 中自带的 HotSpot 虚拟机。HotSpot 中使用的垃圾收集器主要包括 7 个：Serial、ParNew、Parallel Scavenge、Serial Old、Parallel Old、CMS 和 G1（Garbage First）收集器。</p><p>其中 Serial 收集器属于最早期的垃圾收集器，也是 JDK 1.3 版本之前唯一的垃圾收集器。它是单线程运行的垃圾收集器，其单线程是指在进行垃圾回收时所有的工作线程必须暂停，直到垃圾回收结束为止，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/9bc5b7545e812f861e4af40f3b4ebd5.png"></p><p>Serial 收集器的特点是简单和高效，并且本身的运行对内存要求不高，因此它在客户端模式下使用的比较多。</p><p>ParNew 收集器实际上是 Serial 收集器的多线程并行版本，运行示意图如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/3ad64d3eed35ebd8435440acd262afe.png"></p><p>Parallel Scavenge 收集器和 ParNew 收集器类似，它也是一个并行运行的垃圾回收器；不同的是，该收集器关注的侧重点是实现一个可以控制的吞吐量。而这个吞吐量计算的也很奇怪，它的计算公式是：用户运行代码的时间 / （用户运行代码的时间 + 垃圾回收执行的时间）。比如用户运行的时间是 8 分钟，垃圾回收运行的时间是 2 分钟，那么吞吐量就是 80%。Parallel Scavenge 收集器追求的目标就是将这个吞吐量的值，控制在一定的范围内。</p><p>Parallel Scavenge 收集器有两个重要的参数：</p><ul><li><strong>-XX:MaxGCPauseMillis 参数：</strong>它是用来控制垃圾回收的最大停顿时间；</li><li><strong>-XX:GCTimeRatio 参数：</strong>它是用来直接设置吞吐量的值的。</li></ul><p>Serial Old 收集器为 Serial 收集器的老年代版本，而 Parallel Old 收集器是 Parallel Scavenge 收集器的老年代版本。</p><p>CMS（Concurrent Mark Sweep）收集器与以吞吐量为目标的 Parallel Scavenge 收集器不同，它强调的是提供最短的停顿时间，因此可能会牺牲一定的吞吐量。它主要应用在 Java Web 项目中，它满足了系统需要短时间停顿的要求，以此来提高用户的交互体验。</p><p>Garbage First（简称 G1）收集器是历史发展的产物，也是一款更先进的垃圾收集器，主要面向服务端应用的垃圾收集器。它将内存划分为多个 Region 分区，回收时则以分区为单位进行回收，这样它就可以用相对较少的时间优先回收包含垃圾最多区块。从 JDK 9 之后也成了官方默认的垃圾收集器，官方也推荐使用 G1 来代替选择 CMS 收集器。</p><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h4><hr><p>JVM 内存布局和垃圾回收算法是面试中常考的题目，也是我们理解并优化 Java 程序的理论基础，而对于垃圾收集器来说除了目前主流版本（JDK 8）常用的 CMS 之外，其他的垃圾收集器都属于面试中的加分项。对于 G1 和 JDK 11 中的 ZGC 的理解代表了你对技术的热爱和新技术的敏感程度，也属于面试中的重要加分项。</p><p>和此知识点相关的面试题还有以下这些：</p><ul><li><p>讲一下分代收集理论？</p></li><li><p>CMS 收集器的具体执行流程是什么？</p></li><li><p>讲一下 JDK 11 中的 ZGC 收集器？</p></li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><hr><h5 id="1-分代收集"><a href="#1-分代收集" class="headerlink" title="1.分代收集"></a>1.分代收集</h5><p>说到垃圾收集器不得不提的一个理论就是“分代收集”，因为目前商用虚拟机的垃圾收集器都是基于分代收集的理论进行设计的，它是指将不同“年龄”的数据分配到不同的内存区域中进行存储，所谓的“年龄”指的是经历过垃圾收集的次数。这样我们就可以把那些朝生暮死的对象集中分配到一起，把不容易消亡的对象分配到一起，对于不容易死亡的对象我们就可以设置较短的垃圾收集频率，这样就能消耗更少的资源来实现更理想的功能了。</p><p>通常情况下分代收集算法会分为两个区域：新生代（Young Generation）和老年代（OldGeneration），其中新生代用于存储刚刚创建的对象，这个区域内的对象存活率不高，而对于经过了一定次数的 GC 之后还存活下来的对象，就可以成功晋级到老生代了。</p><p>对于上面介绍的 7 个垃圾收集器来说，新生代垃圾收集器有：Serial、ParNew、Parallel Scavenge，老生代的垃圾收集器有：Serial Old、Parallel Old、CMS，而 G1 属于混合型的垃圾收集器，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/436ae26934a97ca204f49a3d6be5efb.png"></p><h5 id="2-CMS-收集器的具体执行流程"><a href="#2-CMS-收集器的具体执行流程" class="headerlink" title="2.CMS 收集器的具体执行流程"></a>2.CMS 收集器的具体执行流程</h5><p>CMS 收集器是基于标记-清除算法实现的，我们之前有讲过关于标记-清除的算法，这里简单地回顾一下。标记-清除的算法是由标记阶段和清除阶段构成的，标记阶段会给所有的存活对象做上标记；而清除阶段会把被标记为死亡的对象进行回收，而死亡对象的判断是通过引用计数法或者是目前主流的可达性分析算法实现的。但是 CMS 的实现稍微复杂一些，它的整个过程可以分为四个阶段：</p><ul><li><p>初始标记（CMS initial mark）</p></li><li><p>并发标记（CMS concurrent mark）</p></li><li><p>重新标记（CMS remark）</p></li><li><p>并发清除（CMS concurrent sweep）</p></li></ul><p>首先，<strong>初始标记阶段</strong>的执行时间很短，它只是标记一下 GC Roots 的关联对象；<strong>并发阶段</strong>是从 GC Roots 关联的对象进行遍历判断并标识死亡对象，这个过程比较慢，但不需要停止用户线程，用户的线程可以和垃圾收集线程并发执行；而<strong>重新标记阶段</strong>则是为了判断并标记，刚刚并发阶段用户继续运行的那一部分对象，所以此阶段的执行时间也比较短；最后是<strong>并发清除阶段</strong>，也就是清除上面标记的死亡对象，由于 CMS 使用的是标记-清除算法，而非标记-整理算法，因此无须移动存活的对象，这个阶段垃圾收集线程也可以和用户线程并发执行。</p><p>CMS 的整个执行过程中只有执行时间很短的初始标记和重新标记需要 Stop The World（全局停顿）的，执行过程如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/aaf1656638cce63107cd5a92b0a30d1.png"></p><p>因为 CMS 是一款基于标记清除算法实现的垃圾收集器，因此会在收集时产生大量的空间碎片，为了解决这个问题，CMS 收集器提供了一个 -XX:+UseCMS-CompactAtFullCollection 的参数（默认是开启的，此参数从 JDK9 开始废弃），用于在 CMS 收集器进行 Full GC 时开启内存碎片的合并和整理。</p><p>但又因为碎片整理的过程必须移动存活的对象，所以它和用户线程是无法并发执行的，为了解决这个问题 CMS 收集器又提供了另外一个参数 -XX:CMSFullGCsBefore-Compaction，用于规定多少次（根据此参数的值决定）之后再进行一次碎片整理。</p><h5 id="3-ZGC"><a href="#3-ZGC" class="headerlink" title="3.ZGC"></a>3.ZGC</h5><p>ZGC 收集器是 JDK 11 中新增的垃圾收集器，它是由 Oracle 官方开发的，并且支持 TB 级别的堆内存管理，而且 ZGC 收集器也非常高效，可以做到 10ms 以内完成垃圾收集。</p><p>在 ZGC 收集器中没有新生代和老生代的概念，它只有一代。ZGC 收集器采用的着色指针技术，利用指针中多余的信息位来实现着色标记，并且 ZGC 使用了读屏障来解决 GC 线程和应用线程可能存在的并发（修改对象状态的）问题，从而避免了Stop The World（全局停顿），因此使得 GC 的性能大幅提升。</p><p>ZGC 的执行流程和 CMS 比较相似，首先是进行 GC Roots 标记，然后再通过指针进行并发着色标记，之后便是对标记为死亡的对象进行回收（被标记为橘色的对象），最后是重定位，将 GC 之后存活的对象进行移动，以解决内存碎片的问题。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章介绍了 JDK 11 之前的 7 种垃圾收集器：Serial、Serial Old、ParNew、Parallel Scavenge、Parallel Old、CMS、G1，其中 CMS 收集器是 JDK 8 之前的主流收集器，而 JDK 9 之后的默认收集器为 G1，并且在文章的最后，介绍了性能更加强悍、综合表现更好的 ZGC 收集器。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java进阶2-垃圾回收算法</title>
      <link href="2020/10/16/java-jin-jie-2-la-ji-hui-shou-suan-fa/"/>
      <url>2020/10/16/java-jin-jie-2-la-ji-hui-shou-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="垃圾回收算法有哪些？"><a href="#垃圾回收算法有哪些？" class="headerlink" title="垃圾回收算法有哪些？"></a>垃圾回收算法有哪些？</h3><ul><li>说到 Java 虚拟机不得不提的一个词就是 “垃圾回收”（GC，Garbage Collection），而垃圾回收的执行速度则影响着整个程序的执行效率，所以我们需要知道更多关于垃圾回收的具体执行细节，以便为我们选择合适的垃圾回收器提供理论支持。</li></ul><p><strong>本文章的面试题是，如何判断一个对象是否“死亡”？垃圾回收的算法有哪些？</strong></p><a id="more"></a><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><p>垃圾回收器首先要做的就是，判断一个对象是存活状态还是死亡状态，死亡的对象将会被标识为垃圾数据并等待收集器进行清除。</p><p>判断一个对象是否为死亡状态的常用算法有两个：引用计数器算法和可达性分析算法。</p><p>引用计数算法（Reference Counting） 属于垃圾收集器最早的实现算法了，它是指在创建对象时关联一个与之相对应的计数器，当此对象被使用时加 1，相反销毁时 -1。当此计数器为 0 时，则表示此对象未使用，可以被垃圾收集器回收。</p><p>引用计数算法的优缺点很明显，其优点是垃圾回收比较及时，实时性比较高，只要对象计数器为 0，则可以直接进行回收操作；而缺点是无法解决循环引用的问题，比如以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CustomOne</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">CustomTwo</span> two<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CustomTwo</span> <span class="token function">getCustomTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> two<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustomTwo</span><span class="token punctuation">(</span><span class="token class-name">CustomTwo</span> two<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>two <span class="token operator">=</span> two<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CustomTwo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">CustomOne</span> one<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CustomOne</span> <span class="token function">getCustomOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> one<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCustomOne</span><span class="token punctuation">(</span><span class="token class-name">CustomOne</span> one<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>one <span class="token operator">=</span> one<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RefCountingTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CustomOne</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CustomTwo</span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">setCustomTwo</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">setCustomOne</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>        one <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        two <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即使 one 和 two 都为 null，但因为循环引用的问题，两个对象都不能被垃圾收集器所回收。</p><p>可达性分析算法（Reachability Analysis） 是目前商业系统中所采用的判断对象死亡的常用算法，它是指从对象的起点（GC Roots）开始向下搜索，如果对象到 GC Roots 没有任何引用链相连时，也就是说此对象到 GC Roots 不可达时，则表示此对象可以被垃圾回收器所回收，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201016164214409.png"></p><p>当确定了对象的状态之后（存活还是死亡）接下来就是进行垃圾回收了，垃圾回收的常见算法有以下几个：</p><ul><li>标记-清除算法；</li><li>标记-复制算法；</li><li>标记-整理算法。</li></ul><p><strong>标记-清除（Mark-Sweep）算法</strong>属于最早的垃圾回收算法，它是由标记阶段和清除阶段构成的。标记阶段会给所有的存活对象做上标记，而清除阶段会把没有被标记的死亡对象进行回收。而标记的判断方法就是前面讲的引用计数算法和可达性分析算法。</p><p>标记-清除算法的执行流程如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201016164342823.png"></p><p>从上图可以看出，标记-清除算法有一个最大的问题就是会产生内存空间的碎片化问题，也就是说标记-清除算法执行完成之后会产生大量的不连续内存，这样当程序需要分配一个大对象时，因为没有足够的连续内存而导致需要提前触发一次垃圾回收动作。</p><p><strong>标记-复制算法</strong>是标记-清除算法的一个升级，使用它可以有效地解决内存碎片化的问题。它是指将内存分为大小相同的两块区域，每次只使用其中的一块区域，这样在进行垃圾回收时就可以直接将存活的东西复制到新的内存上，然后再把另一块内存全部清理掉。这样就不会产生内存碎片的问题了，其执行流程如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201016164439981.png"></p><p>标记-复制的算法虽然可以解决内存碎片的问题，但同时也带来了新的问题。因为需要将内存分为大小相同的两块内存，那么内存的实际可用量其实只有原来的一半，这样此算法导致了内存的可用率大幅降低了。</p><p>标记-整理算法的诞生晚于标记-清除算法和标记-复制算法，它也是由两个阶段组成的：标记阶段和整理阶段。其中标记阶段和标记-清除算法的标记阶段一样，不同的是后面的一个阶段，标记-整理算法的后一个阶段不是直接对内存进行清除，而是把所有存活的对象移动到内存的一端，然后把另一端的所有死亡对象全部清除，执行流程图如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201016164554091.png"></p><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h4><hr><p>本题目考察的是关于垃圾收集的一些理论算法问题，都属于概念性的问题，只要深入理解之后还是挺容易记忆的。和此知识点相关的面试题还有这些：</p><ul><li>Java 中可作为 GC Roots 的对象有哪些？</li><li>说一下死亡对象的判断细节？</li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><hr><h5 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a>GC Roots</h5><p>在 Java 中可以作为 GC Roots 的对象，主要包含以下几个：</p><p>所有被同步锁持有的对象，比如被 synchronize 持有的对象；</p><p>字符串常量池里的引用（String Table）；</p><p>类型为引用类型的静态变量；</p><p>虚拟机栈中引用对象；</p><p>本地方法栈中的引用对象。</p><h5 id="死亡对象判断"><a href="#死亡对象判断" class="headerlink" title="死亡对象判断"></a>死亡对象判断</h5><p>当使用可达性分析判断一个对象不可达时，并不会直接标识这个对象为死亡状态，而是先将它标记为“待死亡”状态再进行一次校验。校验的内容就是此对象是否重写了 finalize() 方法，如果该对象重写了 finalize() 方法，那么这个对象将会被存入到 F-Queue 队列中，等待 JVM 的 Finalizer 线程去执行重写的 finalize() 方法，在这个方法中如果此对象将自己赋值给某个类变量时，则表示此对象已经被引用了。因此不能被标识为死亡状态，其他情况则会被标识为死亡状态。</p><p>以上流程对应的示例代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalizeTest</span> <span class="token punctuation">{</span>    <span class="token comment">// 需要状态判断的对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">FinalizeTest</span> <span class="token class-name">Hook</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了 finalize 方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FinalizeTest</span><span class="token punctuation">.</span><span class="token class-name">Hook</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Hook</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizeTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 卸载对象，第一次执行 finalize()</span>        <span class="token class-name">Hook</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待 finalize() 执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Hook</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"存活状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"死亡状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 卸载对象，与上一次代码完全相同</span>        <span class="token class-name">Hook</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待 finalize() 执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Hook</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"存活状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"死亡状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码的执行结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">执行了 finalize 方法存活状态死亡状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从结果可以看出，卸载了两次对象，第一次执行了 finalize() 方法，成功地把自己从待死亡状态拉了回来；而第二次同样的代码却没有执行 finalize() 方法，从而被确认为了死亡状态，这是因为<strong>任何对象的 finalize() 方法都只会被系统调用一次</strong>。</p><p>虽然可以从 finalize() 方法中把自己从死亡状态“拯救”出来，但是不建议这样做，因为所有对象的 finalize() 方法只会执行一次。因此同样的代码可能产生的结果是不同的，这样就给程序的执行带来了很大的不确定性。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章讲了对象状态判断的两种算法：引用计数算法和可达性分析算法。其中引用计数算法无法解决循环引用的问题，因此对于绝大多数的商业系统来说使用的都是可达性分析算法；同时还讲了垃圾回收的三种算法：标记-清除算法、标记-复制算法、标记-整理算法，其中，标记-清除算法会带来内存碎片的问题，而标记-复制算法会降低内存的利用率。所以，标记-整理算法算是一个不错的方案。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java进阶1-JVM 的内存布局和运行原理</title>
      <link href="2020/10/15/java-jin-jie-1-jvm-de-nei-cun-bu-ju-he-yun-xing-yuan-li/"/>
      <url>2020/10/15/java-jin-jie-1-jvm-de-nei-cun-bu-ju-he-yun-xing-yuan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="说一下-JVM-的内存布局和运行原理？"><a href="#说一下-JVM-的内存布局和运行原理？" class="headerlink" title="说一下 JVM 的内存布局和运行原理？"></a>说一下 JVM 的内存布局和运行原理？</h3><ul><li>JVM（Java Virtual Machine，Java 虚拟机）顾名思义就是用来执行 Java 程序的“虚拟主机”，实际的工作是将编译的 class 代码（字节码）翻译成底层操作系统可以运行的机器码并且进行调用执行，这也是 Java 程序能够“<strong>一次编写，到处运行</strong>”的原因（因为它会根据特定的操作系统生成对应的操作指令）。JVM 的功能很强大，像 Java 对象的创建、使用和销毁，还有垃圾回收以及某些高级的性能优化，例如，热点代码检测等功能都是在 JVM 中进行的。因为 JVM 是 Java 程序能够运行的根本，因此掌握 JVM 也已经成了一个合格 Java 程序员必备的技能。</li></ul><a id="more"></a><p><strong>本文章的面试题是，说一下 JVM 的内存布局和运行原理？</strong></p><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><p>JVM 的种类有很多，比如 HotSpot 虚拟机，它是 Sun/OracleJDK 和 OpenJDK 中的默认 JVM，也是目前使用范围最广的 JVM。我们常说的 JVM 其实泛指的是 HotSpot 虚拟机，还有曾经与 HotSpot 齐名为“三大商业 JVM”的 JRockit 和 IBM J9 虚拟机。但无论是什么类型的虚拟机都必须遵守 Oracle 官方发布的《Java虚拟机规范》，它是 Java 领域最权威最重要的著作之一，用于规范 JVM 的一些具体“行为”。</p><p>同样对于 JVM 的内存布局也一样，根据《Java虚拟机规范》的规定，JVM 的内存布局分为以下几个部分：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201015161406947.png"></p><p><strong>以上 5 个内存区域的主要用途如下。</strong></p><h5 id="1-堆"><a href="#1-堆" class="headerlink" title="1.堆"></a>1.堆</h5><p><strong>堆（Java Heap）</strong> 也叫 Java 堆或者是 GC 堆，它是一个线程共享的内存区域，也是 JVM 中占用内存最大的一块区域，Java 中所有的对象都存储在这里。</p><p>《Java虚拟机规范》对 Java 堆的描述是：“所有的对象实例以及数组都应当在堆上分配”。但这在技术日益发展的今天已经有点不那么“准确”了，比如 JIT（Just In Time Compilation，即时编译 ）优化中的逃逸分析，使得变量可以直接在栈上被分配。</p><p>当对象或者是变量在方法中被创建之后，其指针可能被线程所引用，而这个对象就被称作<strong>指针逃逸</strong>或者是<strong>引用逃逸</strong>。</p><p>比如以下代码中的 sb 对象的逃逸：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StringBuffer</span> <span class="token function">createString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sb<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sb 虽然是一个局部变量，但上述代码可以看出，它被直接 return 出去了，因此可能被赋值给了其他变量，并且被完全修改，于是此 sb 就逃逸到了方法外部。<br>想要 sb 变量不逃逸也很简单，可以改为如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小贴士：通过逃逸分析可以让变量或者是对象直接在栈上分配，从而极大地降低了垃圾回收的次数，以及堆分配对象的压力，进而提高了程序的整体运行效率。</p></blockquote><p>回到主题，堆大小的值可通过 -Xms 和 -Xmx 来设置（设置最小值和最大值），当堆超过最大值时就会抛出 OOM（OutOfMemoryError）异常。</p><h5 id="2-方法区"><a href="#2-方法区" class="headerlink" title="2.方法区"></a>2.方法区</h5><p><strong>方法区（Method Area）</strong> 也被称为非堆区，用于和“Java 堆”的概念进行区分，它也是线程共享的内存区域，用于存储已经被 JVM 加载的类型信息、常量、静态变量、代码缓存等数据。</p><p>说到方法区有人可能会联想到“永久代”，但对于《Java虚拟机规范》来说并没有规定这样一个区域，同样它也只是 HotSpot 中特有的一个概念。这是因为 HotSpot 技术团队把垃圾收集器的分代设计扩展到方法区之后才有的一个概念，可以理解为 HotSpot 技术团队只是用永久代来实现方法区而已，但这会导致一个致命的问题，这样设计更容易造成内存溢出。因为永久代有 -XX：MaxPermSize（方法区分配的最大内存）的上限，即使不设置也会有默认的大小。例如，32 位操作系统中的 4GB 内存限制等，并且这样设计导致了部分的方法在不同类型的 Java 虚拟机下的表现也不同，比如 String::intern() 方法。所以在 JDK 1.7 时 HotSpot 虚拟机已经把原本放在永久代的字符串常量池和静态变量等移出了方法区，并且在 JDK 1.8 中完全废弃了永久代的概念。</p><h5 id="3-程序计数器"><a href="#3-程序计数器" class="headerlink" title="3.程序计数器"></a>3.程序计数器</h5><p><strong>程序计数器（Program Counter Register）</strong> 线程独有一块很小的内存区域，保存当前线程所执行字节码的位置，包括正在执行的指令、跳转、分支、循环、异常处理等。</p><h5 id="4-虚拟机栈"><a href="#4-虚拟机栈" class="headerlink" title="4.虚拟机栈"></a>4.虚拟机栈</h5><p>虚拟机栈也叫 Java 虚拟机栈（Java Virtual Machine Stack），和程序计数器相同它也是线程独享的，用来描述 Java 方法的执行，在每个方法被执行时就会同步创建一个栈帧，用来存储局部变量表、操作栈、动态链接、方法出口等信息。当调用方法时执行入栈，而方法返回时执行出栈。</p><h5 id="5-本地方法栈"><a href="#5-本地方法栈" class="headerlink" title="5.本地方法栈"></a>5.本地方法栈</h5><p>本地方法栈（Native Method Stacks）与虚拟机栈类似，它是线程独享的，并且作用也和虚拟机栈类似。只不过虚拟机栈是为虚拟机中执行的 Java 方法服务的，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p><blockquote><p>小贴士：需要注意的是《Java虚拟机规范》只规定了有这么几个区域，但没有规定 JVM 的具体实现细节，因此对于不同的 JVM 来说，实现也是不同的。例如，“永久代”是 HotSpot 中的一个概念，而对于 JRockit 来说就没有这个概念。所以很多人说的 JDK 1.8 把永久代转移到了元空间，这其实只是 HotSpot 的实现，而非《Java虚拟机规范》的规定。</p></blockquote><p>JVM 的执行流程是，首先先把 Java 代码（.java）转化成字节码（.class），然后通过类加载器将字节码加载到内存中，所谓的内存也就是我们上面介绍的运行时数据区，但字节码并不是可以直接交给操作系统执行的机器码，而是一套 JVM 的指令集。这个时候需要使用特定的命令解析器也就是我们俗称的<strong>执行引擎（Execution Engine）</strong>将字节码翻译成可以被底层操作系统执行的指令再去执行，这样就实现了整个 Java 程序的运行，这也是 JVM 的整体执行流程。</p><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h4><hr><p>JVM 的内存布局是一道必考的 Java 面试题，一般会作为 JVM 方面的第一道面试题出现，它也是中高级工程师必须掌握的一个知识点。和此知识点相关的面试题还有这些：类的加载分为几个阶段？每个阶段代表什么含义？加载了什么内容？</p><h4 id="知识扩展——类加载"><a href="#知识扩展——类加载" class="headerlink" title="知识扩展——类加载"></a>知识扩展——类加载</h4><p>类的生命周期会经历以下 7 个阶段：</p><ul><li>加载阶段（Loading）</li><li>验证阶段（Verification）</li><li>准备阶段（Preparation）</li><li>解析阶段（Resolution）</li><li>初始化阶段（Initialization）</li><li>使用阶段（Using）</li><li>卸载阶段（Unloading）</li></ul><p>其中验证、准备、解析 3 个阶段统称为<strong>连接（Linking）</strong>，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201015162013572.png"></p><p>我们平常所说的 JVM 类加载通常指的就是前五个阶段：加载、验证、准备、解析、初始化等，接下来我们分别来看看。</p><h5 id="1-加载阶段"><a href="#1-加载阶段" class="headerlink" title="1.加载阶段"></a>1.加载阶段</h5><p>此阶段用于查到相应的类（通过类名进行查找）并将此类的字节流转换为方法区运行时的数据结构，然后再在内存中生成一个能代表此类的 java.lang.Class 对象，作为其他数据访问的入口。</p><blockquote><p>小贴士：需要注意的是加载阶段和连接阶段的部分动作有可能是交叉执行的，比如一部分字节码文件格式的验证，在加载阶段还未完成时就已经开始验证了。</p></blockquote><h5 id="2-验证阶段"><a href="#2-验证阶段" class="headerlink" title="2.验证阶段"></a>2.验证阶段</h5><p>此步骤主要是为了验证字节码的安全性，如果不做安全校验的话可能会载入非安全或有错误的字节码，从而导致系统崩溃，它是 JVM 自我保护的一项重要举措。</p><p>验证的主要动作大概有以下几个：</p><ul><li>文件格式校验包括常量池中的常量类型、Class 文件的各个部分是否被删除或被追加了其他信息等；</li><li>元数据校验包括父类正确性校验（检查父类是否有被 final 修饰）、抽象类校验等；</li><li>字节码校验，此步骤最为关键和复杂，主要用于校验程序中的语义是否合法且符合逻辑；</li><li>符号引用校验，对类自身以外比如常量池中的各种符号引用的信息进行匹配性校验。</li></ul><h5 id="3-准备阶段"><a href="#3-准备阶段" class="headerlink" title="3.准备阶段"></a>3.准备阶段</h5><p>此阶段是用来初始化并为类中定义的静态变量分配内存的，这些静态变量会被分配到方法区上。</p><p>HotSpot 虚拟机在 JDK 1.7 之前都在方法区，而 JDK 1.8 之后此变量会随着类对象一起存放到 Java 堆中。</p><h5 id="4-解析阶段"><a href="#4-解析阶段" class="headerlink" title="4.解析阶段"></a>4.解析阶段</h5><p>此阶段主要是用来解析类、接口、字段及方法的，解析时会把符号引用替换成直接引用。</p><p>所谓的符号引用是指以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可；而直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。</p><p>符号引用和直接引用有一个重要的区别：使用符号引用时被引用的目标不一定已经加载到内存中；而使用直接引用时，引用的目标必定已经存在虚拟机的内存中了。</p><h5 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5.初始化"></a>5.初始化</h5><p>初始化阶段 JVM 就正式开始执行类中编写的 Java 业务代码了。到这一步骤之后，类的加载过程就算正式完成了。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章讲了 JVM 的内存布局主要分为：堆、方法区、程序计数器、虚拟机栈和本地方法栈，并讲了 JVM 的执行流程，先把 Java 代码编译成字节码，再把字节码加载到运行时数据区；然后交给 JVM 引擎把字节码翻译为操作系统可以执行的指令进行执行；最后还讲了类加载的 5 个阶段：加载、验证、准备、解析和初始化。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库7-Redis 是如何实现高可用</title>
      <link href="2020/10/14/shu-ju-ku-7-redis-shi-ru-he-shi-xian-gao-ke-yong/"/>
      <url>2020/10/14/shu-ju-ku-7-redis-shi-ru-he-shi-xian-gao-ke-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis-是如何实现高可用的？"><a href="#Redis-是如何实现高可用的？" class="headerlink" title="Redis 是如何实现高可用的？"></a>Redis 是如何实现高可用的？</h3><ul><li>高可用是通过设计，减少系统不能提供服务的时间，是分布式系统的基础也是保障系统可靠性的重要手段。而 Redis 作为一款普及率最高的内存型中间件，它的高可用技术也非常的成熟。</li></ul><a id="more"></a><p><strong>本文章的面试题是，Redis 是如何保证系统高可用的？它的实现方式有哪些？</strong></p><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><h5 id="Redis-高可用的手段主要有以下四种："><a href="#Redis-高可用的手段主要有以下四种：" class="headerlink" title="Redis 高可用的手段主要有以下四种："></a>Redis 高可用的手段主要有以下四种：</h5><ul><li>数据持久化</li><li>主从数据同步（主从复制）</li><li>Redis 哨兵模式（Sentinel）</li><li>Redis 集群（Cluster）</li></ul><p>其中数据持久化保证了系统在发生宕机或者重启之后数据不会丢失，增加了系统的可靠性和减少了系统不可用的时间（省去了手动恢复数据的过程）；而主从数据同步可以将数据存储至多台服务器，这样当遇到一台服务器宕机之后，可以很快地切换至另一台服务器以继续提供服务；哨兵模式用于发生故障之后自动切换服务器；而 Redis 集群提供了多主多从的 Redis 分布式集群环境，用于提供性能更好的 Redis 服务，并且它自身拥有故障自动切换的能力。</p><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h4><hr><p>高可用的问题属于 Redis 中比较大的面试题了，因为很多知识点都和这个面试题有关，同时也属于比较难的面试题了。因为涉及了分布式集群，而分布式集群属于 Redis 中比较难懂的一个知识点。和此问题相关的面试题还有以下几个：</p><ul><li>数据持久化有几种方式？</li><li>Redis 主从同步有几种模式？</li><li>什么是 Redis 哨兵模式？它解决了什么问题？</li><li>Redis 集群的优势是什么？</li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><hr><h5 id="1-数据持久化"><a href="#1-数据持久化" class="headerlink" title="1.数据持久化"></a>1.数据持久化</h5><p>持久化功能是 Redis 和 Memcached 的主要区别之一，因为只有 Redis 提供了此功能。</p><p>在 Redis 4.0 之前数据持久化方式有两种：AOF 方式和 RDB 方式。</p><ul><li>RDB（Redis DataBase，快照方式）是将某一个时刻的内存数据，以二进制的方式写入磁盘。</li><li>AOF（Append Only File，文件追加方式）是指将所有的操作命令，以文本的形式追加到文件中。</li></ul><p>RDB 默认的保存文件为 dump.rdb，优点是以二进制存储的，因此占用的空间更小、数据存储更紧凑，并且与 AOF 相比，RDB 具备更快的重启恢复能力。</p><p>AOF 默认的保存文件为 appendonly.aof，它的优点是存储频率更高，因此丢失数据的风险就越低，并且 AOF 并不是以二进制存储的，所以它的存储信息更易懂。缺点是占用空间大，重启之后的数据恢复速度比较慢。</p><p>可以看出 RDB 和 AOF 各有利弊，RDB 具备更快速的数据重启恢复能力，并且占用更小的磁盘空间，但有数据丢失的风险；而 AOF 文件的可读性更高，但却占用了更大的空间，且重启之后的恢复速度更慢，于是在 Redis 4.0 就推出了混合持久化的功能。</p><p>混合持久化的功能指的是 Redis 可以使用 RDB + AOF 两种格式来进行数据持久化，这样就可以做到扬长避短物尽其用了，混合持久化的存储示意图如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201014190132776.png"></p><p>我们可以使用“config get aof-use-rdb-preamble”的命令来查询 Redis 混合持久化的功能是否开启，执行示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> config get aof<span class="token operator">-</span>use<span class="token operator">-</span>rdb<span class="token operator">-</span>preamble<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"aof-use-rdb-preamble"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"yes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果执行结果为“no”则表示混合持久化功能关闭，不过我们可以使用“config set aof-use-rdb-preamble yes”的命令打开此功能。<br>Redis 混合持久化的存储模式是，开始的数据以 RDB 的格式进行存储，因此只会占用少量的空间，并且之后的命令会以 AOF 的方式进行数据追加，这样就可以减低数据丢失的风险，同时可以提高数据恢复的速度。</p><h5 id="2-Redis-主从同步"><a href="#2-Redis-主从同步" class="headerlink" title="2.Redis 主从同步"></a>2.Redis 主从同步</h5><p>主从同步是 Redis 多机运行中最基础的功能，它是把多个 Redis 节点组成一个 Redis 集群，在这个集群当中有一个主节点用来进行数据的操作，其他从节点用于同步主节点的内容，并且提供给客户端进行数据查询。</p><p>Redis 主从同步分为：主从模式和从从模式。<strong>主从模式</strong>就是一个主节点和多个一级从节点，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/12441809e4403df2850e70cae4cc5b8.jpg"></p><p>而从从模式是指一级从节点下面还可以拥有更多的从节点，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/223d258081250a6710454572ee773c8.jpg"></p><p>主从模式可以提高 Redis 的整体运行速度，因为使用主从模式就可以实现数据的读写分离，把写操作的请求分发到主节点上，把其他的读操作请求分发到从节点上，这样就减轻了 Redis 主节点的运行压力，并且提高了 Redis 的整体运行速度。</p><p>不但如此使用主从模式还实现了 Redis 的高可用，当主服务器宕机之后，可以很迅速的把从节点提升为主节点，为 Redis 服务器的宕机恢复节省了宝贵的时间。</p><p>并且主从复制还降低了数据丢失的风险，因为数据是完整拷贝在多台服务器上的，当一个服务器磁盘坏掉之后，可以从其他服务器拿到完整的备份数据。</p><h5 id="3-Redis-哨兵模式"><a href="#3-Redis-哨兵模式" class="headerlink" title="3.Redis 哨兵模式"></a>3.Redis 哨兵模式</h5><p>Redis 主从复制模式有那么多的优点，但是有一个致命的缺点，就是当 Redis 的主节点宕机之后，必须人工介入手动恢复，那么到特殊时间段，比如公司组织全体团建或者半夜突然发生主节点宕机的问题，此时如果等待人工去处理就会很慢，这个时间是我们不允许的，并且我们还需要招聘专职的人来负责数据恢复的事，同时招聘的人还需要懂得相关的技术才能胜任这份工作。既然如此的麻烦，那有没有简单一点的解决方案，这个时候我们就需要用到 Redis 的哨兵模式了。</p><p>Redis 哨兵模式就是用来监视 Redis 主从服务器的，当 Redis 的主从服务器发生故障之后，Redis 哨兵提供了自动容灾修复的功能，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/426c4837c1aba3a7db779cab38f2301.jpg"></p><p>Redis 哨兵模块存储在 Redis 的 src/redis-sentinel 目录下，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/24e1e5a7f88c4850a2bbb206cc8f82e.jpg"></p><p>我们可以使用命令“./src/redis-sentinel sentinel.conf”来启动哨兵功能。</p><p>有了哨兵功能之后，就再也不怕 Redis 主从服务器宕机了。哨兵的工作原理是每个哨兵会以每秒钟 1 次的频率，向已知的主服务器和从服务器，发送一个 PING 命令。如果最后一次有效回复 PING 命令的时间，超过了配置的最大下线时间（Down-After-Milliseconds）时，默认是 30s，那么这个实例会被哨兵标记为主观下线。</p><p>如果一个主服务器被标记为主观下线，那么正在监视这个主服务器的所有哨兵节点，要以每秒 1 次的频率确认主服务器是否进入了主观下线的状态。如果有足够数量（quorum 配置值）的哨兵证实该主服务器为主观下线，那么这个主服务器被标记为客观下线。此时所有的哨兵会按照规则（协商）自动选出新的主节点服务器，并自动完成主服务器的自动切换功能，而整个过程都是无须人工干预的。</p><h5 id="4-Redis-集群"><a href="#4-Redis-集群" class="headerlink" title="4.Redis 集群"></a>4.Redis 集群</h5><p>Redis 集群也就是 Redis Cluster，它是 Redis 3.0 版本推出的 Redis 集群方案，将数据分布在不同的主服务器上，以此来降低系统对单主节点的依赖，并且可以大大提高 Redis 服务的读写性能。Redis 集群除了拥有主从模式 + 哨兵模式的所有功能之外，还提供了多个主从节点的集群功能，实现了真正意义上的分布式集群服务，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/80ac51385d3e58cce60dfd236b7c3c6.jpg"></p><p>Redis 集群可以实现数据分片服务，也就是说在 Redis 集群中有 16384 个槽位用来存储所有的数据，当我们有 N 个主节点时，可以把 16384 个槽位平均分配到 N 台主服务器上。当有键值存储时，Redis 会使用 crc16 算法进行 hash 得到一个整数值，然后用这个整数值对 16384 进行取模来得到具体槽位，再把此键值存储在对应的服务器上，读取操作也是同样的道理，这样我们就实现了数据分片的功能。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章我们讲了保障 Redis 高可用的 4 种手段：数据持久化保证了数据不丢失；Redis 主从让 Redis 从单机变成了多机。它有两种模式：主从模式和从从模式，但当主节点出现问题时，需要人工手动恢复系统；Redis 哨兵模式用来监控 Redis 主从模式，并提供了自动容灾恢复的功能。最后是 Redis 集群，除了可以提供主从和哨兵的功能之外，还提供了多个主从节点的集群功能，这样就可以把数据均匀的存储各个主机主节点上，实现了系统的横向扩展，大大提高了 Redis 的并发处理能力。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库6-Redis 中如何实现的消息队列</title>
      <link href="2020/10/09/shu-ju-ku-6-redis-zhong-ru-he-shi-xian-de-xiao-xi-dui-lie/"/>
      <url>2020/10/09/shu-ju-ku-6-redis-zhong-ru-he-shi-xian-de-xiao-xi-dui-lie/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis-中如何实现的消息队列？实现的方式有几种？"><a href="#Redis-中如何实现的消息队列？实现的方式有几种？" class="headerlink" title="Redis 中如何实现的消息队列？实现的方式有几种？"></a>Redis 中如何实现的消息队列？实现的方式有几种？</h3><ul><li>细心的你可能发现了，本系列课程中竟然出现了三个文章都是在说消息队列，前面文章讲了程序级别的消息队列以及延迟消息队列的实现，而后面讲了常见的消息队列中间件 RabbitMQ、Kafka 等，由此可见消息队列在整个 Java 技术体系中的重要程度。本文章将重点来看一下 Redis 是如何实现消息队列的。</li></ul><a id="more"></a><p><strong>本文章的面试题是，在 Redis 中实现消息队列的方式有几种？</strong></p><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><p>早在 Redis 2.0 版本之前使用 Redis 实现消息队列的方式有两种：</p><ul><li>使用 List 类型实现</li><li>使用 ZSet 类型实现</li></ul><p>其中使用** List 类型实现的方式最为简单和直接**，它主要是通过 lpush、rpop 存入和读取实现消息队列的，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201013154141712.png"></p><p>lpush 可以把最新的消息存储到消息队列（List 集合）的首部，而 rpop 可以读取消息队列的尾部，这样就实现了先进先出，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201013154732006.png"></p><p>命令行的实现命令如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> lpush mq <span class="token string">"java"</span> #推送消息 java<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> lpush mq <span class="token string">"msg"</span> #推送消息 msg<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> rpop mq #接收到消息 java<span class="token string">"java"</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> rpop mq #接收到消息 msg<span class="token string">"mq"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，mq 相当于消息队列的名称，而 lpush 用于生产并添加消息，而 rpop 用于拉取并消费消息。<br>使用 List 实现消息队列的优点是消息可以被持久化，List 可以借助 Redis 本身的持久化功能，AOF 或者是 RDB 或混合持久化的方式，用于把数据保存至磁盘，这样当 Redis 重启之后，消息不会丢失。</p><p>但使用 List 同样存在一定的问题，比如消息不支持重复消费、没有按照主题订阅的功能、不支持消费消息确认等。</p><p>ZSet 实现消息队列的方式和 List 类似，它是利用 zadd 和 zrangebyscore 来实现存入和读取消息的，这里就不重复叙述了。但 ZSet 的实现方式更为复杂一些，因为 ZSet 多了一个分值（score）属性，我们可以使用它来实现更多的功能，比如用它来存储时间戳，以此来实现延迟消息队列等。</p><p>ZSet 同样具备持久化的功能，List 存在的问题它也同样存在，不但如此，使用 ZSet 还不能存储相同元素的值。因为它是有序集合，有序集合的存储元素值是不能重复的，但分值可以重复，也就是说当消息值重复时，只能存储一条信息在 ZSet 中。</p><p>在 Redis 2.0 之后 Redis 就新增了专门的发布和订阅的类型，Publisher（发布者）和 Subscriber（订阅者）来实现消息队列了，它们对应的执行命令如下：</p><ul><li>发布消息，publish channel “message”</li><li>订阅消息，subscribe channel</li></ul><p>使用发布和订阅的类型，我们可以实现主题订阅的功能，也就是 Pattern Subscribe 的功能。因此我们可以使用一个消费者“queue_*”来订阅所有以“queue_”开头的消息队列，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201013154842767.png"></p><p>发布订阅模式的优点很明显，但同样存在以下 3 个问题：</p><ul><li>无法持久化保存消息，如果 Redis 服务器宕机或重启，那么所有的消息将会丢失；</li><li>发布订阅模式是“发后既忘”的工作模式，如果有订阅者离线重连之后就不能消费之前的历史消息；</li><li>不支持消费者确认机制，稳定性不能得到保证，例如当消费者获取到消息之后，还没来得及执行就宕机了。因为没有消费者确认机制，Redis 就会误以为消费者已经执行了，因此就不会重复发送未被正常消费的消息了，这样整体的 Redis 稳定性就被没有办法得到保障了。</li></ul><p>然而在 Redis 5.0 之后新增了 Stream 类型，我们就可以使用 Stream 的 xadd 和 xrange 来实现消息的存入和读取了，并且 Stream 提供了 xack 手动确认消息消费的命令，用它我们就可以实现消费者确认的功能了，使用命令如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> xack mq group1 <span class="token number">1580959593553</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相关语法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">xack key group<span class="token operator">-</span>key ID <span class="token punctuation">[</span>ID <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>消费确认增加了消息的可靠性，一般在业务处理完成之后，需要执行 ack 确认消息已经被消费完成，整个流程的执行如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201013155020699.png"></p><p>其中“Group”为群组，消费者也就是接收者需要订阅到群组才能正常获取到消息。</p><p>以上就 Redis 实现消息队列的四种方式，他们分别是：</p><ul><li>使用 List 实现消息队列；</li><li>使用 ZSet 实现消息队列；</li><li>使用发布订阅者模式实现消息队列；</li><li>使用 Stream 实现消息队列。</li></ul><h3 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h3><hr><p>本文章的题目比较全面的考察了面试者对于 Redis 整体知识框架和新版本特性的理解和领悟。早期版本中比较常用的实现消息队列的方式是 List、ZSet 和发布订阅者模式，使用 Stream 来实现消息队列是近两年才流行起来的方案，并且很多企业也没有使用到 Redis 5.0 这么新的版本。因此只需回答出前三种就算及格了，而 Stream 方式实现消息队列属于附加题，如果面试中能回答上来的话就更好了，它体现了你对新技术的敏感度与对技术的热爱程度，属于面试中的加分项。</p><p>和此知识点相关的面试题还有以下几个：</p><ul><li>在 Java 代码中使用 List 实现消息队列会有什么问题？应该如何解决？</li><li>在程序中如何使用 Stream 来实现消息队列？</li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><hr><h5 id="使用-List-实现消息队列"><a href="#使用-List-实现消息队列" class="headerlink" title="使用 List 实现消息队列"></a>使用 List 实现消息队列</h5><p>在 Java 程序中我们需要使用 Redis 客户端框架来辅助程序操作 Redis，比如 Jedis 框架。</p><p>使用 Jedis 框架首先需要在 pom.xml 文件中添加 Jedis 依赖，配置如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>redis<span class="token punctuation">.</span>clients<span class="token operator">/</span>jedis <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>  <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>redis<span class="token punctuation">.</span>clients<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>  <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>jedis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>  <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span>$<span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>List 实现消息队列的完整代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span><span class="token punctuation">;</span>publicclass <span class="token class-name">ListMQTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 启动一个线程作为消费者</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 生产者</span>        <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 生产者     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 推送消息</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"mq"</span><span class="token punctuation">,</span> <span class="token string">"Hello, List."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 消费者     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 消费消息</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 获取消息</span>            <span class="token class-name">String</span> msg <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">rpop</span><span class="token punctuation">(</span><span class="token string">"mq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 接收到了消息</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到消息："</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的运行结果是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">接收到消息：<span class="token class-name">Hello</span><span class="token punctuation">,</span> <span class="token class-name">Java</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是以上的代码存在一个问题，可以看出以上消费者的实现是通过 while 无限循环来获取消息，但如果消息的空闲时间比较长，一直没有新任务，而 while 循环不会因此停止，<strong>它会一直执行循环的动作，这样就会白白浪费了系统的资源</strong>。</p><p>此时我们可以借助 Redis 中的<strong>阻塞读</strong>来替代 rpop 的方法就可以解决此问题，具体实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListMQExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">// 消费者</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">bConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 生产者</span>        <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 生产者     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 推送消息</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"mq"</span><span class="token punctuation">,</span> <span class="token string">"Hello, Java."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"mq"</span><span class="token punctuation">,</span> <span class="token string">"message 2."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"mq"</span><span class="token punctuation">,</span> <span class="token string">"message 3."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 消费者（阻塞版）     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 阻塞读</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> jedis<span class="token punctuation">.</span><span class="token function">brpop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"mq"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 读取到相关数据，进行业务处理</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的运行结果是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">接收到消息：<span class="token class-name">Hello</span><span class="token punctuation">,</span> <span class="token class-name">Java</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上代码是经过改良的，我们使用 brpop 替代 rpop 来读取最后一条消息，就可以解决 while 循环在没有数据的情况下，一直循环消耗系统资源的情况了。brpop 中的 b 是 blocking 的意思，表示阻塞读，也就是当队列没有数据时，它会进入休眠状态，当有数据进入队列之后，它才会“苏醒”过来执行读取任务，这样就可以解决 while 循环一直执行消耗系统资源的问题了。</p><h5 id="使用-Stream-实现消息队列"><a href="#使用-Stream-实现消息队列" class="headerlink" title="使用 Stream 实现消息队列"></a>使用 Stream 实现消息队列</h5><p>在开始实现消息队列之前，我们必须先创建分组才行，因为消费者需要关联分组信息才能正常运行，具体实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span></span><span class="token class-name">Gson</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">StreamEntry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">StreamEntryID</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">utils<span class="token punctuation">.</span></span><span class="token class-name">JedisUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">AbstractMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamGroupExample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> _STREAM_KEY <span class="token operator">=</span> <span class="token string">"mq"</span><span class="token punctuation">;</span> <span class="token comment">// 流 key</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> _GROUP_NAME <span class="token operator">=</span> <span class="token string">"g1"</span><span class="token punctuation">;</span> <span class="token comment">// 分组名称</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> _CONSUMER_NAME <span class="token operator">=</span> <span class="token string">"c1"</span><span class="token punctuation">;</span> <span class="token comment">// 消费者 1 的名称</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> _CONSUMER2_NAME <span class="token operator">=</span> <span class="token string">"c2"</span><span class="token punctuation">;</span> <span class="token comment">// 消费者 2 的名称</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 生产者</span>        <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建消费组</span>        <span class="token function">createGroup</span><span class="token punctuation">(</span>_STREAM_KEY<span class="token punctuation">,</span> _GROUP_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 消费者 1</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 消费者 2</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">consumer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建消费分组     * @param stream    流 key     * @param groupName 分组名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createGroup</span><span class="token punctuation">(</span><span class="token class-name">String</span> stream<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token class-name">JedisUtils</span><span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">xgroupCreate</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StreamEntryID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 生产者     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token class-name">JedisUtils</span><span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加消息 1</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token string">"redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StreamEntryID</span> id <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">xadd</span><span class="token punctuation">(</span>_STREAM_KEY<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息添加成功 ID："</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加消息 2</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StreamEntryID</span> id2 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">xadd</span><span class="token punctuation">(</span>_STREAM_KEY<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> map2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息添加成功 ID："</span> <span class="token operator">+</span> id2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 消费者 1     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token class-name">JedisUtils</span><span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 消费消息</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 读取消息</span>            <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">StreamEntryID</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbstractMap</span><span class="token punctuation">.</span><span class="token class-name">SimpleImmutableEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_STREAM_KEY<span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">StreamEntryID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>UNRECEIVED_ENTRY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 阻塞读取一条消息（最大阻塞时间120s）</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">StreamEntry</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">xreadGroup</span><span class="token punctuation">(</span>_GROUP_NAME<span class="token punctuation">,</span> _CONSUMER_NAME<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                    <span class="token number">120</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 读取到消息</span>                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> content <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 消息内容</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 1 读取到消息 ID："</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                        <span class="token string">" 内容："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 消费者 2     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">consumer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token class-name">JedisUtils</span><span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 消费消息</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 读取消息</span>            <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">StreamEntryID</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbstractMap</span><span class="token punctuation">.</span><span class="token class-name">SimpleImmutableEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>_STREAM_KEY<span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">StreamEntryID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>UNRECEIVED_ENTRY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 阻塞读取一条消息（最大阻塞时间120s）</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">StreamEntry</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">xreadGroup</span><span class="token punctuation">(</span>_GROUP_NAME<span class="token punctuation">,</span> _CONSUMER2_NAME<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                    <span class="token number">120</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 读取到消息</span>                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> content <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 消息内容</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consumer 2 读取到消息 ID："</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                        <span class="token string">" 内容："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码运行结果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">消息添加成功 ID：<span class="token number">1580971482344</span><span class="token operator">-</span><span class="token number">0</span>消息添加成功 ID：<span class="token number">1580971482415</span><span class="token operator">-</span><span class="token number">0</span><span class="token class-name">Consumer</span> <span class="token number">1</span> 读取到消息 ID：<span class="token number">1580971482344</span><span class="token operator">-</span><span class="token number">0</span> 内容：<span class="token punctuation">{</span><span class="token string">"data"</span><span class="token operator">:</span><span class="token string">"redis"</span><span class="token punctuation">}</span><span class="token class-name">Consumer</span> <span class="token number">2</span> 读取到消息 ID：<span class="token number">1580971482415</span><span class="token operator">-</span><span class="token number">0</span> 内容：<span class="token punctuation">{</span><span class="token string">"data"</span><span class="token operator">:</span><span class="token string">"java"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中，jedis.xreadGroup() 方法的第五个参数 noAck 表示是否自动确认消息，如果设置 true 收到消息会自动确认 (ack) 消息，否则需要手动确认。</p><p>可以看出，同一个分组内的多个 consumer 会读取到不同消息，不同的 consumer 不会读取到分组内的同一条消息。</p><blockquote><p>小贴士：Jedis 框架要使用最新版，低版本 block 设置大于 0 时，会出现 bug，抛连接超时异常。</p></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章我们讲了 Redis 中消息队列的四种实现方式：List 方式、ZSet 方式、发布订阅者模式、Stream 方式，其中发布订阅者模式不支持消息持久化、而其他三种方式支持持久化，并且 Stream 方式支持消费者确认。我们还使用 Jedis 框架完成了 List 和 Stream 的消息队列功能，需要注意的是在 List 中需要使用 brpop 来读取消息，而不是 rpop，这样可以解决没有任务时 ，while 一直循环浪费系统资源的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库5-Redis 怎样实现的分布式锁</title>
      <link href="2020/10/05/shu-ju-ku-5-redis-zen-yang-shi-xian-de-fen-bu-shi-suo/"/>
      <url>2020/10/05/shu-ju-ku-5-redis-zen-yang-shi-xian-de-fen-bu-shi-suo/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis-怎样实现的分布式锁"><a href="#Redis-怎样实现的分布式锁" class="headerlink" title="Redis 怎样实现的分布式锁"></a>Redis 怎样实现的分布式锁</h3><ul><li>“锁”是我们实际工作和面试中无法避开的话题之一，正确使用锁可以保证高并发环境下程序的正确执行，也就是说只有使用锁才能保证多人同时访问时程序不会出现问题。</li></ul><a id="more"></a><p><strong>本文章的面试题是，什么是分布式锁？如何实现分布式锁？</strong></p><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><ul><li><p>前面文章讲了单机锁的一些知识，包括悲观锁、乐观锁、可重入锁、共享锁和独占锁等内容，但它们都属于单机锁也就是程序级别的锁，如果在分布式环境下使用就会出现锁不生效的问题，因此我们需要使用<strong>分布式锁</strong>来解决这个问题。</p></li><li><p><strong>分布式锁</strong>是控制分布式系统之间同步访问共享资源的一种方式。是为了解决分布式系统中，不同的系统或是同一个系统的不同主机共享同一个资源的问题，它通常会采用互斥来保证程序的一致性，这就是分布式锁的用途以及执行原理。</p></li></ul><p>分布式锁示意图，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201013152720465.png"></p><p><strong>分布式锁的常见实现方式有四种：</strong></p><ul><li>基于 MySQL 的悲观锁来实现分布式锁，这种方式使用的最少，因为这种实现方式的性能不好，且容易造成死锁；</li><li>基于 Memcached 实现分布式锁，可使用 add 方法来实现，如果添加成功了则表示分布式锁创建成功；</li><li>基于 Redis 实现分布式锁，这也是本课时要介绍的重点，可以使用 setnx 方法来实现；</li><li>基于 ZooKeeper 实现分布式锁，利用 ZooKeeper 顺序临时节点来实现。</li></ul><p>由于 MySQL 的执行效率问题和死锁问题，所以这种实现方式会被我们先排除掉，而 Memcached 和 Redis 的实现方式比较类似，但因为 Redis 技术比较普及，所以会优先使用 Redis 来实现分布式锁，而 ZooKeeper 确实可以很好的实现分布式锁。但此技术在中小型公司的普及率不高，尤其是非 Java 技术栈的公司使用的较少，如果只是为了实现分布式锁而重新搭建一套 ZooKeeper 集群，显然实现成本和维护成本太高，所以综合以上因素，我们本文会采用 Redis 来实现分布式锁。</p><p>之所以可以使用以上四种方式来实现分布式锁，是因为以上四种方式都属于程序调用的“外部系统”，而分布式的程序是需要共享“外部系统”的，这就是<strong>分布式锁</strong>得以实现的基本前提。</p><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h4><hr><p>分布式锁的问题看似简单，但却有很多细节需要注意，比如，需要考虑分布式锁的超时问题，如果不设置超时时间的话，可能会导致死锁的产生，所以在对待这个“锁”的问题上，一定不能马虎。和此知识点相关的面试还有以下这些：</p><ul><li>单机锁有哪些？它为什么不能在分布式环境下使用？</li><li>Redis 是如何实现分布式锁的？可能会遇到什么问题？</li><li>分布式锁超时的话会有什么问题？如何解决？</li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><hr><h5 id="单机锁"><a href="#单机锁" class="headerlink" title="单机锁"></a>单机锁</h5><p>程序中使用的锁叫单机锁，我们日常中所说的“锁”都泛指<strong>单机锁</strong>，其分类有很多，大体可分为以下几类：</p><ul><li><strong>悲观锁</strong>，是数据对外界的修改采取保守策略，它认为线程很容易把数据修改掉，因此在整个数据被修改的过程中都会采取锁定状态，直到一个线程使用完，其他线程才可以继续使用，典型应用是 synchronized；</li><li><strong>乐观锁</strong>，和悲观锁的概念恰好相反，乐观锁认为一般情况下数据在修改时不会出现冲突，所以在数据访问之前不会加锁，只是在数据提交更改时，才会对数据进行检测，典型应用是 ReadWriteLock 读写锁；</li><li><strong>可重入锁</strong>，也叫递归锁，指的是同一个线程在外面的函数获取了锁之后，那么内层的函数也可以继续获得此锁，在 Java 语言中 ReentrantLock 和 synchronized 都是可重入锁；</li><li><strong>独占锁和共享锁</strong>，只能被单线程持有的锁叫做独占锁，可以被多线程持有的锁叫共享锁，独占锁指的是在任何时候最多只能有一个线程持有该锁，比如 ReentrantLock 就是独占锁；而 ReadWriteLock 读写锁允许同一时间内有多个线程进行读操作，它就属于共享锁。</li></ul><p>单机锁之所以不能应用在分布式系统中是因为，在分布式系统中，每次请求可能会被分配在不同的服务器上，而单机锁是在单台服务器上生效的。如果是多台服务器就会导致请求分发到不同的服务器，从而导致锁代码不能生效，因此会造成很多异常的问题，那么单机锁就不能应用在分布式系统中了。</p><h5 id="使用-Redis-实现分布式锁"><a href="#使用-Redis-实现分布式锁" class="headerlink" title="使用 Redis 实现分布式锁"></a>使用 Redis 实现分布式锁</h5><p>使用 Redis 实现分布式锁主要需要使用 setnx 方法，也就是 set if not exists（不存在则创建），具体的实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> setnx lock <span class="token boolean">true</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span> #创建锁成功#逻辑业务处理<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> del lock<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span> #释放锁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当执行 setnx 命令之后返回值为 1 的话，则表示创建锁成功，否则就是失败。释放锁使用 del 删除即可，当其他程序 setnx 失败时，则表示此锁正在使用中，这样就可以实现简单的分布式锁了。</p><p>但是以上代码有一个问题，就是没有设置锁的超时时间，因此如果出现异常情况，会导致锁未被释放，而其他线程又在排队等待此锁就会导致程序不可用。</p><p>有人可能会想到使用 expire 来设置键值的过期时间来解决这个问题，例如以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> setnx lock <span class="token boolean">true</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span> #创建锁成功<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> expire lock <span class="token number">30</span> #设置锁的<span class="token punctuation">(</span>过期<span class="token punctuation">)</span>超时时间为 <span class="token number">30</span>s<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span> #逻辑业务处理<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> del lock<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span> #释放锁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但这样执行仍然会有问题，因为 setnx lock true 和 expire lock 30 命令是非原子的，也就是一个执行完另一个才能执行。但如果在 setnx 命令执行完之后，发生了异常情况，那么就会导致 expire 命令不会执行，因此依然没有解决死锁的问题。</p><p>这个问题在 Redis 2.6.12 之前一直没有得到有效的处理，当时的解决方案是在客户端进行原子合并操作，于是就诞生了很多客户端类库来解决此原子问题，不过这样就增加了使用的成本。因为你不但要添加 Redis 的客户端，还要为了解决锁的超时问题，需额外的增加新的类库，这样就增加了使用成本，但这个问题在 Redis 2.6.12 版本中得到了有效的处理。</p><p>在 Redis 2.6.12 中我们可以使用一条 set 命令来执行键值存储，并且可以判断键是否存在以及设置超时时间了，如下代码所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> set lock <span class="token boolean">true</span> ex <span class="token number">30</span> nxOK #创建锁成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，ex 是用来设置超时时间的，而 nx 是 not exists 的意思，用来判断键是否存在。如果返回的结果为“OK”则表示创建锁成功，否则表示此锁有人在使用。</p><h5 id="锁超时"><a href="#锁超时" class="headerlink" title="锁超时"></a>锁超时</h5><p>从上面的内容可以看出，使用 set 命令之后好像一切问题都解决了，但在这里我要告诉你，其实并没有。例如，我们给锁设置了超时时间为 10s，但程序的执行需要使用 15s，那么在第 10s 时此锁因为超时就会被释放，这时候线程二在执行 set 命令时正常获取到了锁，于是在很短的时间内 2s 之后删除了此锁，这就造成了锁被误删的情况，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201013153307603.png"></p><p>锁被误删的解决方案是在使用 set 命令创建锁时，给 value 值设置一个归属标识。例如，在 value 中插入一个 UUID，每次在删除之前先要判断 UUID 是不是属于当前的线程，如果属于再删除，这样就避免了锁被误删的问题。</p><p>注意：在锁的归属判断和删除的过程中，不能先判断锁再删除锁，如下代码所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 判断是否是自己的锁</span><span class="token function">del</span><span class="token punctuation">(</span>luck<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除锁</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>应该把判断和删除放到一个原子单元中去执行，因此需要借助 Lua 脚本来执行，在 Redis 中执行 Lua 脚本可以保证这批命令的原子性，它的实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 释放分布式锁 * @param jedis Redis客户端 * @param lockKey 锁的 key * @param flagId 锁归属标识 * @return 是否释放成功   */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token class-name">String</span> flagId<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span>   <span class="token class-name">Object</span> result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>flagId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"1L"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断执行结果</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，Collections.singletonList() 方法是将 String 转成 List，因为 jedis.eval() 最后两个参数要求必须是 List 类型。</p><p><strong>锁超时可以通过两种方案来解决：</strong></p><ul><li>把执行耗时的方法从锁中剔除，减少锁中代码的执行时间，保证锁在超时之前，代码一定可以执行完；</li><li>把锁的超时时间设置的长一些，正常情况下我们在使用完锁之后，会调用删除的方法手动删除锁，因此可以把超时时间设置的稍微长一些。</li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章我们讲了分布式锁的四种实现方式，即 MySQL、Memcached、Redis 和 ZooKeeper，因为 Redis 的普及率比较高，因此对于很多公司来说使用 Redis 实现分布式锁是最优的选择。本课时我们还讲了使用 Redis 实现分布式锁的具体步骤以及实现代码，还讲了在实现过程中可能会遇到的一些问题以及解决方案。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人简历的制作</title>
      <link href="2020/10/02/ge-ren-jian-li-de-zhi-zuo/"/>
      <url>2020/10/02/ge-ren-jian-li-de-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo-博客添加pdf插件"><a href="#hexo-博客添加pdf插件" class="headerlink" title="hexo-博客添加pdf插件"></a>hexo-博客添加pdf插件</h3><h4 id="一、安装插件"><a href="#一、安装插件" class="headerlink" title="一、安装插件"></a>一、安装插件</h4><pre class="line-numbers language-none"><code class="language-none">npm install --save hexo-pdf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h4><a id="more"></a><p>创建 resume 页面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">hexo <span class="token keyword">new</span> page resume<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>resume目录下的index.md修改为如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">title<span class="token operator">:</span> 个人简历date<span class="token operator">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">32</span>type<span class="token operator">:</span> resumelayout<span class="token operator">:</span> <span class="token string">"resume"</span>toc<span class="token operator">:</span> <span class="token boolean">false</span>comments<span class="token operator">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题_config.yml文件，在menu添加如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">简历<span class="token operator">:</span> <span class="token operator">/</span>resume <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>整体菜单为如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># <span class="token class-name">Header</span><span class="token operator">-</span>菜单menu<span class="token operator">:</span>  主页<span class="token operator">:</span> <span class="token operator">/</span>  归档<span class="token operator">:</span> <span class="token operator">/</span>archives  标签<span class="token operator">:</span> <span class="token operator">/</span>tags  分类<span class="token operator">:</span> <span class="token operator">/</span>categories  简历<span class="token operator">:</span> <span class="token operator">/</span>resume <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、编写"><a href="#三、编写" class="headerlink" title="三、编写"></a>三、编写</h4><p>在生成的index.md文件中添加pdf</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">外部链接：<span class="token punctuation">{</span><span class="token operator">%</span> pdf http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">7</span>xov2f<span class="token punctuation">.</span>com1<span class="token punctuation">.</span>z0<span class="token punctuation">.</span>glb<span class="token punctuation">.</span>clouddn<span class="token punctuation">.</span>com<span class="token operator">/</span>bash_freshman<span class="token punctuation">.</span>pdf <span class="token operator">%</span><span class="token punctuation">}</span>本地连接：<span class="token punctuation">{</span><span class="token operator">%</span> pdf <span class="token punctuation">.</span>/pdf名字<span class="token punctuation">.</span>pdf <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="生成外部链接2-种方法："><a href="#生成外部链接2-种方法：" class="headerlink" title="生成外部链接2 种方法："></a>生成外部链接2 种方法：</h5><p><strong>方法一</strong>：使用相对路径</p><p><strong>方法二</strong>：传到 七牛云、阿里云 oss 等 CDN，生成外部链接，即可。（个人推荐这个）</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201202220708329.png"></p><h5 id="如果是不成功，更新npm试试"><a href="#如果是不成功，更新npm试试" class="headerlink" title="如果是不成功，更新npm试试"></a>如果是不成功，更新npm试试</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">npm update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201202221659315.png" alt="image-20201202221659315"></p><h4 id="个人简历制作完成效果如下："><a href="#个人简历制作完成效果如下：" class="headerlink" title="个人简历制作完成效果如下："></a>个人简历制作完成效果如下：</h4><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201202220544114.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库4-Redis 的过期策略和内存淘汰机制</title>
      <link href="2020/10/01/shu-ju-ku-4-redis-de-guo-qi-ce-lue-he-nei-cun-tao-tai-ji-zhi/"/>
      <url>2020/10/01/shu-ju-ku-4-redis-de-guo-qi-ce-lue-he-nei-cun-tao-tai-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis-的过期策略和内存淘汰机制有什么区别？"><a href="#Redis-的过期策略和内存淘汰机制有什么区别？" class="headerlink" title="Redis 的过期策略和内存淘汰机制有什么区别？"></a>Redis 的过期策略和内存淘汰机制有什么区别？</h3><ul><li>Redis 和 MySQL 是面试绕不过的两座大山，他们一个是关系型数据库的代表（MySQL），一个是键值数据库以及缓存中间件的一哥。尤其 Redis 几乎是所有互联网公司都在用的技术，比如国内的 BATJ、新浪、360、小米等公司；国外的微软、Twitter、Stack Overflow、GitHub、暴雪等公司。我从业了十几年，就职过 4、5 家公司，有的公司用 MySQL、有的用 SQL Server、甚至还有的用 Oracle 和 DB2，但缓存无一例外使用的都是 Redis，从某种程度上来讲 Redis 是普及率最高的技术，没有之一。</li></ul><a id="more"></a><p><strong>本文章的面试题是，Redis 是如何处理过期数据的？当内存不够用时 Redis 又是如何处理的？</strong></p><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><p>我们在新增 Redis 缓存时可以设置缓存的过期时间，该时间保证了数据在规定的时间内失效，可以借助这个特性来实现很多功能。比如，存储一定天数的用户（登录）会话信息，这样在一定范围内用户不用重复登录了，但为了安全性，需要在一定时间之后重新验证用户的信息。因此，我们可以使用 Redis 设置过期时间来存储用户的会话信息。</p><p>对于已经过期的数据，Redis 将使用两种策略来删除这些过期键，它们分别是<strong>惰性删除</strong>和<strong>定期删除</strong>。</p><p><strong>惰性删除</strong>是指 Redis 服务器不主动删除过期的键值，而是当访问键值时，再检查当前的键值是否过期，如果过期则执行删除并返回 null 给客户端；如果没过期则正常返回值信息给客户端。</p><p>它的优点是不会浪费太多的系统资源，只是在每次访问时才检查键值是否过期。缺点是删除过期键不及时，造成了一定的空间浪费。</p><p>惰性删除的源码位于 src/db.c 文件的 expireIfNeeded 方法中，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">expireIfNeeded</span><span class="token punctuation">(</span>redisDb <span class="token operator">*</span>db<span class="token punctuation">,</span> robj <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 判断键是否过期</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">keyIsExpired</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>server<span class="token punctuation">.</span>masterhost <span class="token operator">!=</span> NULL<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/* 删除过期键 */</span>    <span class="token comment">// 增加过期键个数</span>    server<span class="token punctuation">.</span>stat_expiredkeys<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 传播键过期的消息</span>    <span class="token function">propagateExpire</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span>key<span class="token punctuation">,</span>server<span class="token punctuation">.</span>lazyfree_lazy_expire<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">notifyKeyspaceEvent</span><span class="token punctuation">(</span>NOTIFY_EXPIRED<span class="token punctuation">,</span>        <span class="token string">"expired"</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span>db<span class="token operator">-&gt;</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// server.lazyfree_lazy_expire 为 1 表示异步删除，否则则为同步删除</span>    <span class="token keyword">return</span> server<span class="token punctuation">.</span>lazyfree_lazy_expire <span class="token operator">?</span> <span class="token function">dbAsyncDelete</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">:</span>                                         <span class="token function">dbSyncDelete</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 判断键是否过期</span><span class="token keyword">int</span> <span class="token function">keyIsExpired</span><span class="token punctuation">(</span>redisDb <span class="token operator">*</span>db<span class="token punctuation">,</span> robj <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mstime_t when <span class="token operator">=</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>when <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>server<span class="token punctuation">.</span>loading<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    mstime_t now <span class="token operator">=</span> server<span class="token punctuation">.</span>lua_caller <span class="token operator">?</span> server<span class="token punctuation">.</span>lua_time_start <span class="token operator">:</span> <span class="token function">mstime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> now <span class="token operator">&gt;</span> when<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获取键的过期时间</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>redisDb <span class="token operator">*</span>db<span class="token punctuation">,</span> robj <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dictEntry <span class="token operator">*</span>de<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dictSize</span><span class="token punctuation">(</span>db<span class="token operator">-&gt;</span>expires<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span>       <span class="token punctuation">(</span>de <span class="token operator">=</span> <span class="token function">dictFind</span><span class="token punctuation">(</span>db<span class="token operator">-&gt;</span>expires<span class="token punctuation">,</span>key<span class="token operator">-&gt;</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> NULL<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">serverAssertWithInfo</span><span class="token punctuation">(</span>NULL<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token function">dictFind</span><span class="token punctuation">(</span>db<span class="token operator">-&gt;</span>dict<span class="token punctuation">,</span>key<span class="token operator">-&gt;</span>ptr<span class="token punctuation">)</span> <span class="token operator">!=</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">dictGetSignedIntegerVal</span><span class="token punctuation">(</span>de<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>惰性删除的执行流程如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/08/B3/CgqCHl67XjqAPZOAAAA2gxqwspY599.png"></p><p>除了惰性删除之外，Redis 还提供了定期删除功能以弥补惰性删除的不足。</p><p>定期删除是指 Redis 服务器每隔一段时间会检查一下数据库，看看是否有过期键可以被清除。</p><p>默认情况下 Redis 定期检查的频率是每秒扫描 10 次，用于定期清除过期键。当然此值还可以通过配置文件进行设置，在 redis.conf 中修改配置“hz”即可，默认的值为“hz 10”。</p><blockquote><p>小贴士：定期删除的扫描并不是遍历所有的键值对，这样的话比较费时且太消耗系统资源。Redis 服务器采用的是随机抽取形式，每次从过期字典中，取出 20 个键进行过期检测，过期字典中存储的是所有设置了过期时间的键值对。如果这批随机检查的数据中有 25% 的比例过期，那么会再抽取 20 个随机键值进行检测和删除，并且会循环执行这个流程，直到抽取的这批数据中过期键值小于 25%，此次检测才算完成。</p></blockquote><p>定期删除的源码在 expire.c 文件的 activeExpireCycle 方法中，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">activeExpireCycle</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> unsigned <span class="token keyword">int</span> current_db <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* 上次定期删除遍历到的数据库ID */</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> timelimit_exit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token keyword">long</span> last_fast_cycle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* 上次执行定期删除的时间点 */</span>    <span class="token keyword">int</span> j<span class="token punctuation">,</span> iteration <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dbs_per_call <span class="token operator">=</span> CRON_DBS_PER_CALL<span class="token punctuation">;</span> <span class="token comment">// 需要遍历数据库的数量</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token function">ustime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timelimit<span class="token punctuation">,</span> elapsed<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">clientsArePaused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> ACTIVE_EXPIRE_CYCLE_FAST<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timelimit_exit<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment">// ACTIVE_EXPIRE_CYCLE_FAST_DURATION 快速定期删除的执行时长</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> last_fast_cycle <span class="token operator">+</span> ACTIVE_EXPIRE_CYCLE_FAST_DURATION<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        last_fast_cycle <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dbs_per_call <span class="token operator">&gt;</span> server<span class="token punctuation">.</span>dbnum <span class="token operator">||</span> timelimit_exit<span class="token punctuation">)</span>        dbs_per_call <span class="token operator">=</span> server<span class="token punctuation">.</span>dbnum<span class="token punctuation">;</span>    <span class="token comment">// 慢速定期删除的执行时长</span>    timelimit <span class="token operator">=</span> <span class="token number">1000000</span><span class="token operator">*</span>ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC<span class="token operator">/</span>server<span class="token punctuation">.</span>hz<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>    timelimit_exit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timelimit <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> timelimit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> ACTIVE_EXPIRE_CYCLE_FAST<span class="token punctuation">)</span>        timelimit <span class="token operator">=</span> ACTIVE_EXPIRE_CYCLE_FAST_DURATION<span class="token punctuation">;</span> <span class="token comment">/* 删除操作花费的时间 */</span>    <span class="token keyword">long</span> total_sampled <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> total_expired <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> dbs_per_call <span class="token operator">&amp;&amp;</span> timelimit_exit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> expired<span class="token punctuation">;</span>        redisDb <span class="token operator">*</span>db <span class="token operator">=</span> server<span class="token punctuation">.</span>db<span class="token operator">+</span><span class="token punctuation">(</span>current_db <span class="token operator">%</span> server<span class="token punctuation">.</span>dbnum<span class="token punctuation">)</span><span class="token punctuation">;</span>        current_db<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token comment">// .......</span>            expired <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            ttl_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            ttl_samples <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// 每个数据库中检查的键的数量</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP<span class="token punctuation">)</span>                num <span class="token operator">=</span> ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP<span class="token punctuation">;</span>            <span class="token comment">// 从数据库中随机选取 num 个键进行检查</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dictEntry <span class="token operator">*</span>de<span class="token punctuation">;</span>                <span class="token keyword">long</span> <span class="token keyword">long</span> ttl<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>de <span class="token operator">=</span> <span class="token function">dictGetRandomKey</span><span class="token punctuation">(</span>db<span class="token operator">-&gt;</span>expires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> NULL<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                ttl <span class="token operator">=</span> dictGetSignedInteger                <span class="token comment">// 过期检查，并对过期键进行删除</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">activeExpireCycleTryExpire</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span>de<span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> expired<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ttl <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ttl_sum <span class="token operator">+=</span> ttl<span class="token punctuation">;</span>                    ttl_samples<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                total_sampled<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            total_expired <span class="token operator">+=</span> expired<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ttl_samples<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> <span class="token keyword">long</span> avg_ttl <span class="token operator">=</span> ttl_sum<span class="token operator">/</span>ttl_samples<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>db<span class="token operator">-&gt;</span>avg_ttl <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> db<span class="token operator">-&gt;</span>avg_ttl <span class="token operator">=</span> avg_ttl<span class="token punctuation">;</span>                db<span class="token operator">-&gt;</span>avg_ttl <span class="token operator">=</span> <span class="token punctuation">(</span>db<span class="token operator">-&gt;</span>avg_ttl<span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">49</span> <span class="token operator">+</span> <span class="token punctuation">(</span>avg_ttl<span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>iteration <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* check once every 16 iterations. */</span>                elapsed <span class="token operator">=</span> <span class="token function">ustime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsed <span class="token operator">&gt;</span> timelimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    timelimit_exit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    server<span class="token punctuation">.</span>stat_expired_time_cap_reached_count<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">/* 判断过期键删除数量是否超过 25% */</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>expired <span class="token operator">&gt;</span> ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// .......</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定期删除的执行流程，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/08/B3/Ciqc1F67Xl6ARsvYAADOQ1M6viA643.png"></p><blockquote><p>小贴士：Redis 服务器为了保证过期删除策略不会导致线程卡死，会给过期扫描增加了最大执行时间为 25ms。</p></blockquote><p>以上是 Redis 服务器对待过期键的处理方案，当 Redis 的内存超过最大允许的内存之后，Redis 会触发内存淘汰策略，这和过期策略是完全不同的两个概念，经常有人把二者搞混，这两者一个是在正常情况下清除过期键，一个是在非正常情况下为了保证 Redis 顺利运行的保护策略。</p><p>当 Redis 内存不够用时，Redis 服务器会根据服务器设置的淘汰策略，删除一些不常用的数据，以保证 Redis 服务器的顺利运行。</p><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h4><hr><p>本文章的面试题并非 Redis 的入门级面试题，需要面试者对 Redis 有一定的了解才能对答如流，并且 Redis 的过期淘汰策略和内存淘汰策略的概念比较类似，都是用于淘汰数据的。因此很多人会把二者当成一回事，但其实并不是，这个面试者特别注意一下，和此知识点相关的面试题还有以下这些：</p><ul><li>Redis 内存淘汰策略有哪些？</li><li>Redis 有哪些内存淘汰算法？</li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><hr><h5 id="Redis-内存淘汰策略"><a href="#Redis-内存淘汰策略" class="headerlink" title="Redis 内存淘汰策略"></a><strong>Redis 内存淘汰策略</strong></h5><p>我们可以使用 config get maxmemory-policy 命令，来查看当前 Redis 的内存淘汰策略，示例代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> config get maxmemory<span class="token operator">-</span>policy<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"maxmemory-policy"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"noeviction"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从上面的结果可以看出，当前 Redis 服务器设置的是“noeviction”类型的内存淘汰策略，那么这表示什么含义呢？Redis 又有几种内存淘汰策略呢？</p><p>在 4.0 版本之前 Redis 的内存淘汰策略有以下 6 种。</p><ul><li>noeviction：不淘汰任何数据，当内存不足时，执行缓存新增操作会报错，它是 Redis 默认内存淘汰策略。</li><li>allkeys-lru：淘汰整个键值中最久未使用的键值。</li><li>allkeys-random：随机淘汰任意键值。</li><li>volatile-lru：淘汰所有设置了过期时间的键值中最久未使用的键值。</li><li>volatile-random：随机淘汰设置了过期时间的任意键值。</li><li>volatile-ttl：优先淘汰更早过期的键值。</li></ul><p>可以看出我们上面示例使用的是 Redis 默认的内存淘汰策略“noeviction”。</p><p>而在 Redis 4.0 版本中又新增了 2 种淘汰策略：</p><ul><li>volatile-lfu，淘汰所有设置了过期时间的键值中最少使用的键值；</li><li>allkeys-lfu，淘汰整个键值中最少使用的键值。</li></ul><blockquote><p>小贴士：从以上内存淘汰策略中可以看出，allkeys-xxx 表示从所有的键值中淘汰数据，而 volatile-xxx 表示从设置了过期键的键值中淘汰数据。</p></blockquote><p>这个内存淘汰策略我们可以通过配置文件来修改，redis.conf 对应的配置项是“maxmemory-policy noeviction”，只需要把它修改成我们需要设置的类型即可。</p><p>需要注意的是，如果使用修改 redis.conf 的方式，当设置完成之后需要重启 Redis 服务器才能生效。</p><p>还有另一种简单的修改内存淘汰策略的方式，我们可以使用命令行工具输入“config set maxmemory-policy noeviction”来修改内存淘汰的策略，这种修改方式的好处是执行成功之后就会生效，无需重启 Redis 服务器。但它的坏处是不能持久化内存淘汰策略，每次重启 Redis 服务器之后设置的内存淘汰策略就会丢失。</p><h5 id="Redis-内存淘汰算法"><a href="#Redis-内存淘汰算法" class="headerlink" title="Redis 内存淘汰算法"></a><strong>Redis 内存淘汰算法</strong></h5><p>内存淘汰算法主要包含两种：LRU 淘汰算法和 LFU 淘汰算法。</p><p><strong>LRU</strong>（ Least Recently Used，最近最少使用）<strong>淘汰算法</strong>：是一种常用的页面置换算法，也就是说最久没有使用的缓存将会被淘汰。</p><p>LRU 是基于链表结构实现的，链表中的元素按照操作顺序从前往后排列，最新操作的键会被移动到表头，当需要进行内存淘汰时，只需要删除链表尾部的元素即可。</p><p>Redis 使用的是一种近似 LRU 算法，目的是为了更好的节约内存，它的实现方式是给现有的数据结构添加一个额外的字段，用于记录此键值的最后一次访问时间。Redis 内存淘汰时，会使用随机采样的方式来淘汰数据，它是随机取 5 个值 (此值可配置) ，然后淘汰最久没有使用的数据。</p><p><strong>LFU</strong>（Least Frequently Used，最不常用的）<strong>淘汰算法</strong>：最不常用的算法是根据总访问次数来淘汰数据的，它的核心思想是“如果数据过去被访问多次，那么将来被访问的频率也更高”。</p><p>LFU 相对来说比 LRU 更“智能”，因为它解决了使用频率很低的缓存，只是最近被访问了一次就不会被删除的问题。如果是使用 LRU 类似这种情况数据是不会被删除的，而使用 LFU 的话，这个数据就会被删除。</p><p>Redis 内存淘汰策略使用了 LFU 和近 LRU 的淘汰算法，具体使用哪种淘汰算法，要看服务器是如何设置内存淘汰策略的，也就是要看“maxmemory-policy”的值是如何设置的。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章我们讲了 Redis 的过期删除策略：惰性删除 + 定期删除；还讲了 Redis 的内存淘汰策略，它和过期策略是完全不同的两个概念，内存淘汰策略是当内存不够用时才会触发的一种机制，它在 Redis 4.0 之后提供了 8 种内存淘汰策略，这些淘汰策略主要使用了近 LRU 淘汰算法和 LFU 淘汰算法。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库3-关系型数据和文档型数据库</title>
      <link href="2020/09/25/shu-ju-ku-3-guan-xi-xing-shu-ju-he-wen-dang-xing-shu-ju-ku/"/>
      <url>2020/09/25/shu-ju-ku-3-guan-xi-xing-shu-ju-he-wen-dang-xing-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h3 id="关系型数据和文档型数据库有什么区别？"><a href="#关系型数据和文档型数据库有什么区别？" class="headerlink" title="关系型数据和文档型数据库有什么区别？"></a>关系型数据和文档型数据库有什么区别？</h3><ul><li><p>关系数据库（Relational Database）是建立在关系模型基础上的数据库，借助于几何代数等数学概念和方法来处理数据库中的数据。所谓关系模型是一对一、一对多或者多对多等关系，常见的关系型数据库有 Oracle、SQL Server、DB2、MySQL 等。</p></li><li><p>而文档型数据库是一种非关系型数据库，非关系型数据库（Not Only SQL，NoSQL）正好与关系型数据库相反，它不是建立在“关系模型”上的数据库。文档型数据库的典型代表是 MongoDB。</p></li></ul><a id="more"></a><h4 id="本文章的面试题是，关系型数据库和文档型数据库有什么区别？"><a href="#本文章的面试题是，关系型数据库和文档型数据库有什么区别？" class="headerlink" title="本文章的面试题是，关系型数据库和文档型数据库有什么区别？"></a>本文章的面试题是，关系型数据库和文档型数据库有什么区别？</h4><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><p>关系型数据库属于早期的传统型数据库，它有着标准化的数据模型，以及事务和持久化的支持、例如，关系型数据库都会支持的 <strong>ACID 特性</strong>，也就是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability），具体含义如下。</p><ul><li><p><strong>原子性</strong>（Atomicity）：是指一个事务中的所有操作，要么全部完成、要么全部不完成，不会存在中间的状态。也就是说事务在正常的情况下会执行完成；异常的情况下，比如在执行的过程中如果出现问题，会回滚成最初的状态，而非中间状态。</p></li><li><p><strong>一致性</strong>（Consistency）：是指事务从开始执行到结束执行之间的中间状态不会被其他事务看到。</p></li><li><p><strong>隔离性</strong>（Isolation）：是指数据库允许多个事务同时对数据进行读写或修改的能力，并且整个过程对各个事务来说是相互隔离的。</p></li><li><p><strong>持久性</strong>（Durability）：是指每次事务提交之后都不会丢失。</p></li></ul><p>关系型数据库一般遵循三范式设计思想，具体内容如下。</p><p><strong>第一范式（The First Normal Form，1NF）</strong>：要求对属性的原子性，也就是说要求数据库中的字段需要具备原子性，不能再被拆分。</p><p>比如，用户表中有字段：用户 ID、用户名、电话；而其中电话又可以分为：家庭电话和移动电话等。因此，此表不符合第一范式，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/04/EE/Ciqc1F609LGAVe-VAACjotekkQg824.png"></p><p><strong>第二范式（The Second Normal Form，2NF）</strong>：例如订单详情表有这些字段：订单 ID、产品 ID、产品名称、产品单价、折扣。其中，订单 ID 和产品 ID 为联合主键，但这个表中的产品名称和产品单价两个字段只依赖产品 ID，和订单 ID 就没有任何关系了，因此这个表也不符合第二范式。</p><p>我们可以把原来的订单表拆分为订单表和产品表，其中订单表包含：订单 ID、产品 ID、折扣等字段；而产品表包含：产品 ID、产品名称、产品单价等字段。这样就消除了产品名称和产品单价多次重复出现的情况了，从而避免了冗余数据的产生。</p><p><img src="https://s0.lgstatic.com/i/image/M00/04/EE/CgqCHl609MKAFYSYAADJf5bDe60684.png"></p><p><strong>第三范式（The Third Normal Form，3NF）</strong>：想要满足第三范式必须先满足第二范式，第三范式要求所有的非主键字段必须直接依赖主键，且不存在传递依赖的情况。</p><p>例如，有一个学生表中包含了：学生 ID、姓名、所在学院 ID、学院电话、学院地址等字段。这个表的所有字段（除去主键字段）都完全依赖唯一的主键字段（学生 ID），所以符合第二范式。但它存在一个问题，学院电话、学院地址依赖非主键字段学院 ID，而不是直接依赖于主键，它是通过传递才依赖于主键，所以不符合第三范式。</p><p>我们可以把学生表分为两张表，一张是学生表包含了：学生 ID、姓名、所在学院 ID 等字段；另一张为学院表包含了：学院 ID、学院电话、学院地址等字段，这样就满足第三范式的要求了。</p><p><img src="https://s0.lgstatic.com/i/image/M00/04/EE/Ciqc1F609NeAe9auAADiqrkjytE051.png"></p><p>可以看出，使用三范式可以避免数据的冗余，而且在更新表操作时，只需要更新单张表就可以了。</p><p>但随着互联网应用的快速发展，我们需要应对日益复杂且快速迭代的数据库，以应对互联网快速发展的趋势，于是诞生了以 MongoDB 为代表的文档型数据库。它提供了更高效的读/写性能以及可自动容灾的数据库集群，还有灵活的数据库结构，从而给系统的数据库存储带来了更多可能 性。</p><p>当然 MongoDB 的诞生并不是为了替代关系型数据库，而是为系统的快速开发提供一种可能性，它和关系型数据库是一种互补的关系，可供开发者在不同的业务场景下选择相对应的数据库类型。</p><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h4><hr><p>本文章的面试题考察的是面试者对数据库整体概念的理解与区分，这个问题看似简单，但包含着众多小的知识点，面试者需要真正的理解关系型数据库和非关系型数据库以及文档型数据库之间的区别才能灵活应对。与之相关的面试题还有：</p><ul><li>非关系型数据库和文档型数据库有什么区别？</li><li>MongoDB 支持事务吗？</li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><hr><p><strong>非关系型数据库 VS 文档型数据库</strong><br>非关系型数据和文档型数据库属于包含关系，非关系型数据包含了文档型数据库，文档型数据库属于非关系型数据。</p><p>非关系型数据通常包含 3 种数据库类型：文档型数据库、键值型数据库和全文搜索型数据库，下面分别来看每种类型的具体用途。</p><h5 id="1-文档型数据库"><a href="#1-文档型数据库" class="headerlink" title="1.文档型数据库"></a>1.文档型数据库</h5><p>文档型数据库以 MongoDB 和 Apache CouchDB 为代表，文档型数据库通常以 JSON 或者 XML 为格式进行数据存储。</p><p>以 MongoDB 为例，它是由 C++ 编写的一种面向文档的数据库管理系统，在 2007 年 10 月 由 10gen 团队所开发，并在 2009 年 2 月首度推出。MongoDB 是以二进制 JSON 格式存储数据的，MongoDB 对 JSON 做了一些优化，它支持了更多的数据类型，这种二进制存储的 JSON 我们也可以称之为 <strong>BSON（Binary JSON）</strong>。</p><p>BSON 具备三个特点：轻量、可遍历以及高效，它的缺点是空间利用率不是很理想。MongoDB 使用 BSON 进行存储的另一个重要原因是 BSON 具备可遍历性。</p><p>MongoDB 存储结构示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token operator">:</span><span class="token class-name">ObjectId</span><span class="token punctuation">(</span>“<span class="token number">57</span>ce2d4cce8685a6fd9df3a3<span class="token string">"),"</span>name<span class="token string">":"</span>老王<span class="token string">","</span>email"<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'java@qq.com'</span><span class="token punctuation">,</span><span class="token string">'java@163.com'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，“_id”为 MongoDB 默认的主键字段，它会为我们生成一起全局唯一的 id 值，并且这个值在做数据分片时非常有用。</p><p>文档型数据库的使用场景如下。</p><ul><li><strong>敏捷开发</strong>，因为 MongoDB 拥有比关系型数据库更快的开发速度，因此很多敏捷开发组织，包括纽约时报等都采用了 MongoDB 数据库。使用它可以有效地避免在增加和修改数据库带来的沟通成本，以及维护和创建数据库模型成本，使用 MongoDB 只需要在程序层面严格把关就行，程序提交的数据结构可以直接更新到数据库中，并不需要繁杂的设计数据库模型再生成修改语句等过程。</li><li><strong>日志系统</strong>，使用 MongoDB 数据库非常适合存储日志，日志对应到数据库中就是很多个文件，而 MongoDB 更擅长存储和查询文档，它提供了更简单的存储和更方便的查询功能。</li><li><strong>社交系统</strong>，使用 MongoDB 可以很方便的存储用户的位置信息，可以方便的实现查询附近的人以及附近的地点等功能。</li></ul><h5 id="2-键值型数据库"><a href="#2-键值型数据库" class="headerlink" title="2.键值型数据库"></a>2.键值型数据库</h5><p>键值数据库也就是 <strong>Key-Value 数据库</strong>，它的典型代表数据库是 <strong>Redis</strong> 和 <strong>Memcached</strong>，而它们通常被当做非持久化的内存型数据库缓存来使用。当然 Redis 数据库是具备可持久化得能力的，但是开启持久化会降低系统的运行效率，因此在使用时需要根据实际的情况，选择开启或者关闭持久化的功能。</p><p>键值型数据库以极高的性能著称，且除了 Key-Value 字符串类型之外，还包含一些其他的数据类型。以 Redis 为例，它提供了字符串类型（String）、列表类型（List）、哈希表类型（Hash）、集合类型（Set）、有序集合类型（ZSet）等五种最常用的基础数据类型，还有管道类型（Pipeline）、地理位置类型（GEO）、基数统计类型（HyperLogLog）和流类型（Stream），并且还提供了消息队列的功能。</p><p>此数据库的优点是性能比较高，缺点是对事务的支持不是很好。</p><h5 id="3-全文搜索型数据库"><a href="#3-全文搜索型数据库" class="headerlink" title="3.全文搜索型数据库"></a>3.全文搜索型数据库</h5><p>传统的关系型数据库主要是依赖索引来实现快速查询功能的，而在全文搜索的业务下，索引很难满足查询的需求。因为全文搜索需要支持模糊匹配的，当数据量比较大的情况下，传递的关系型数据库的查询效率是非常低的；另一个原因是全文搜索需要支持多条件随意组合排序，如果要通过索引来实现的话，则需要创建大量的索引，而传统型数据库也很难实现，因此需要专门全文搜索引擎和相关的数据库才能实现此功能。</p><p>全文搜索型数据库以 ElasticSearch 和 Solr 为代表，它们的出现解决了关系型数据库全文搜索功能较弱的问题。</p><h5 id="MongoDB-事务"><a href="#MongoDB-事务" class="headerlink" title="MongoDB 事务"></a>MongoDB 事务</h5><p>MongoDB 在 4.0 之前是不支持事务的，不支持的原因也很简单，因为文档型数据库和传统的关系型数据库不一样，不需要满足三范式。文档型数据库之所以性能比较高的另一个主要原因，就是使用文档型数据库不用进行多表关联性查询，因为文档型数据库会把相关的信息存放到一张表中。因此，无需关联多表查询的 MongoDB，在这种情况下的查询性能是比较高的。</p><p>把所有相关的数据都放入一个表中，这也是 MongoDB 之前很长一段时间内不支持事务的原因，它可以保证单表操作的原子性，一条记录要么成功插入，要么插入失败，不会存在插入了一半的数据。因此，在这种设计思路下，MongoDB 官方认为“事务功能”的实现没有那么紧迫。</p><p>但在 MongoDB 4.0 之中正式添加了事务的功能，并且在 MongoDB 4.2 中实现了分布式事务的功能，至此 MongoDB 开启了支持事务之旅。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章首先讲了关系型数据库的 ACID 特性以及设计时需要遵循的三范式设计思想；然后介绍了以 MongoDB 为代表的文档型数据库与关系型数据库的不同；最后还讲了 MongoDB 的事务功能，以及文档性数据库与非关系型数据库的关系。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库2-MySQL 的优化方案有哪些</title>
      <link href="2020/09/24/shu-ju-ku-2-mysql-de-you-hua-fang-an-you-na-xie/"/>
      <url>2020/09/24/shu-ju-ku-2-mysql-de-you-hua-fang-an-you-na-xie/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL-的优化方案有哪些？"><a href="#MySQL-的优化方案有哪些？" class="headerlink" title="MySQL 的优化方案有哪些？"></a>MySQL 的优化方案有哪些？</h3><p><strong>性能优化</strong>（Optimize）指的是在保证系统正确性的前提下，能够更快速响应请求的一种手段。而且有些性能问题，比如慢查询等，如果积累到一定的程度或者是遇到急速上升的并发请求之后，会导致严重的后果，轻则造成服务繁忙，重则导致应用不可用。它对我们来说就像一颗即将被引爆的定时炸弹一样，时刻威胁着我们。因此在上线项目之前需要严格的把关，以确保 MySQL 能够以最优的状态进行运行。同时，在实际工作中还有面试中关于 MySQL 优化的知识点，都是面试官考察的重点内容。</p><a id="more"></a><h4 id="本文章的面试题是，MySQL-的优化方案有哪些？"><a href="#本文章的面试题是，MySQL-的优化方案有哪些？" class="headerlink" title="本文章的面试题是，MySQL 的优化方案有哪些？"></a>本文章的面试题是，MySQL 的优化方案有哪些？</h4><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><p>MySQL 数据库常见的<strong>优化手段分为三个层面：SQL 和索引优化、数据库结构优化、系统硬件优化</strong>等，然而每个大的方向中又包含多个小的优化点，下面我们具体来看看。</p><h5 id="1-SQL-和索引优化"><a href="#1-SQL-和索引优化" class="headerlink" title="1.SQL 和索引优化"></a>1.SQL 和索引优化</h5><p>此优化方案指的是通过优化 SQL 语句以及索引来提高 MySQL 数据库的运行效率，具体内容如下。</p><p><strong>① 使用正确的索引</strong></p><p>索引是数据库中最重要的概念之一，也是提高数据库性能最有效的手段之一，它的诞生本身就是为了提高数据查询效率的，就像字典的目录一样，通过目录可以很快找到相关的内容，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/03/32/Ciqc1F6yb8mAAcbmAAR1G3_Q7uA370.png"></p><p><img src="https://s0.lgstatic.com/i/image/M00/03/32/Ciqc1F6yb8-AH8sDAAZVGooSv0U688.png"></p><p>假如我们没有添加索引，那么在查询时就会触发全表扫描，因此查询的数据就会很多，并且查询效率会很低，为了提高查询的性能，我们就需要给最常使用的查询字段上，添加相应的索引，这样才能提高查询的性能。</p><blockquote><p>小贴士：我们应该尽可能的使用主键查询，而非其他索引查询，因为主键查询不会触发回表查询，因此节省了一部分时间，变相的提高了查询的性能。</p></blockquote><p>在 MySQL 5.0 之前的版本要尽量避免使用 or 查询，可以使用 union 或者子查询来替代，因为早期的 MySQL 版本使用 or 查询可能会导致索引失效，在 MySQL 5.0 之后的版本中引入了索引合并，简单来说就是把多条件查询，比如 or 或 and 查询的结果集进行合并交集或并集的功能，因此就不会导致索引失效的问题了。</p><p>避免在 where 查询条件中使用 != 或者 &lt;&gt; 操作符，因为这些操作符会导致查询引擎放弃索引而进行全表扫描。</p><p>适当使用前缀索引，MySQL 是支持前缀索引的，也就是说我们可以定义字符串的一部分来作为索引。我们知道索引越长占用的磁盘空间就越大，那么在相同数据页中能放下的索引值也就越少，这就意味着搜索索引需要的查询时间也就越长，进而查询的效率就会降低，所以我们可以适当的选择使用前缀索引，以减少空间的占用和提高查询效率。比如，邮箱的后缀都是固定的“@xxx.com”，那么类似这种后面几位为固定值的字段就非常适合定义为前缀索引。</p><p><strong>② 查询具体的字段而非全部字段</strong></p><p>要尽量避免使用 select *，而是查询需要的字段，这样可以提升速度，以及减少网络传输的带宽压力。</p><p><strong>③ 优化子查询</strong></p><p>尽量使用 Join 语句来替代子查询，因为子查询是嵌套查询，而嵌套查询会新创建一张临时表，而临时表的创建与销毁会占用一定的系统资源以及花费一定的时间，但 Join 语句并不会创建临时表，因此性能会更高。</p><p><strong>④ 注意查询结果集</strong></p><p>我们要尽量使用小表驱动大表的方式进行查询，也就是如果 B 表的数据小于 A 表的数据，那执行的顺序就是先查 B 表再查 A 表，具体查询语句如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">select name from <span class="token class-name">A</span> where id in <span class="token punctuation">(</span>select id from <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>⑤ 不要在列上进行运算操作</strong></p><p>不要在列字段上进行算术运算或其他表达式运算，否则可能会导致查询引擎无法正确使用索引，从而影响了查询的效率。</p><p><strong>⑥ 适当增加冗余字段</strong></p><p>增加冗余字段可以减少大量的连表查询，因为多张表的连表查询性能很低，所有可以适当的增加冗余字段，以减少多张表的关联查询，这是以空间换时间的优化策略。</p><h5 id="2-数据库结构优化"><a href="#2-数据库结构优化" class="headerlink" title="2.数据库结构优化"></a>2.数据库结构优化</h5><p><strong>① 最小数据长度</strong></p><p>一般说来数据库的表越小，那么它的查询速度就越快，因此为了提高表的效率，应该将表的字段设置的尽可能小，比如身份证号，可以设置为 char(18) 就不要设置为 varchar(18)。</p><p><strong>② 使用最简单数据类型</strong></p><p>能使用 int 类型就不要使用 varchar 类型，因为 int 类型比 varchar 类型的查询效率更高。</p><p><strong>③ 尽量少定义 text 类型</strong></p><p>text 类型的查询效率很低，如果必须要使用 text 定义字段，可以把此字段分离成子表，需要查询此字段时使用联合查询，这样可以提高主表的查询效率。</p><p><strong>④ 适当分表、分库策略</strong></p><p>分表和分库方案也是我们经常说的垂直分隔（分表）和水平分隔（分库）。</p><p><strong>分表</strong>是指当一张表中的字段更多时，可以尝试将一张大表拆分为多张子表，把使用比较高频的主信息放入主表中，其他的放入子表，这样我们大部分查询只需要查询字段更少的主表就可以完成了，从而有效的提高了查询的效率。</p><p><strong>分库</strong>是指将一个数据库分为多个数据库。比如我们把一个数据库拆分为了多个数据库，一个主数据库用于写入和修改数据，其他的用于同步主数据并提供给客户端查询，这样就把一个库的读和写的压力，分摊给了多个库，从而提高了数据库整体的运行效率。</p><h5 id="3-硬件优化"><a href="#3-硬件优化" class="headerlink" title="3.硬件优化"></a>3.硬件优化</h5><p>MySQL 对硬件的要求主要体现在三个方面：磁盘、网络和内存。</p><p><strong>① 磁盘</strong></p><p>磁盘应该尽量使用有高性能读写能力的磁盘，比如固态硬盘，这样就可以减少 I/O 运行的时间，从而提高了 MySQL 整体的运行效率。</p><p>磁盘也可以尽量使用多个小磁盘而不是一个大磁盘，因为磁盘的转速是固定的，有多个小磁盘就相当于拥有多个并行运行的磁盘一样。</p><p><strong>② 网络</strong></p><p>保证网络带宽的通畅（低延迟）以及够大的网络带宽是 MySQL 正常运行的基本条件，如果条件允许的话也可以设置多个网卡，以提高网络高峰期 MySQL 服务器的运行效率。</p><p><strong>③ 内存</strong></p><p>MySQL 服务器的内存越大，那么存储和缓存的信息也就越多，而内存的性能是非常高的，从而提高了整个 MySQL 的运行效率。</p><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h4><hr><p>MySQL 性能优化的方案很多，因此它可以全面考察的一个程序员的经验是否丰富。当然这个问题的回答也是可深可浅，不同的岗位对此问题的答案要求也是不同的，这个问题也可以引申出更多的面试问题，比如：</p><ul><li>联合索引需要注意什么问题？</li><li>如何排查慢查询？</li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><hr><p><strong>正确使用联合索引</strong><br>使用了 B+ 树的 MySQL 数据库引擎，比如 InnoDB 引擎，在每次查询复合字段时是从左往右匹配数据的，因此在创建联合索引的时候需要注意索引创建的顺序。例如，我们创建了一个联合索引是 idx(name,age,sex)，那么当我们使用，姓名+年龄+性别、姓名+年龄、姓名等这种最左前缀查询条件时，就会触发联合索引进行查询；然而如果非最左匹配的查询条件，例如，性别+姓名这种查询条件就不会触发联合索引。</p><p>当然，当我们已经有了（name,age）这个联合索引之后，一般情况下就不需要在 name 字段单独创建索引了，这样就可以少维护一个索引。</p><p><strong>慢查询</strong><br><strong>慢查询</strong>通常的排查手段是先使用慢查询日志功能，查询出比较慢的 SQL 语句，然后再通过 explain 来查询 SQL 语句的执行计划，最后分析并定位出问题的根源，再进行处理。</p><p>慢查询日志指的是在 MySQL 中可以通过配置来开启慢查询日志的记录功能，超过 long_query_time 值的 SQL 将会被记录在日志中。我们可以通过设置“slow_query_log=1”来开启慢查询，它的开启方式有两种：</p><ul><li>通过 MySQL 命令行的模式进行开启，只需要执行“set global slow_query_log=1”即可，然而这种配置模式再重启 MySQL 服务之后就会失效；</li><li>另一种方式可通过修改 MySQL 配置文件的方式进行开启，我们需要配置 my.cnf 中的“slow_query_log=1”即可，并且可以通过设置“slow_query_log_file=/tmp/mysql_slow.log”来配置慢查询日志的存储目录，但这种方式配置完成之后需要重启 MySQL 服务器才可生效。</li></ul><p>需要注意的是，在开启慢日志功能之后，会对 MySQL 的性能造成一定的影响，因此在生产环境中要慎用此功能。</p><p>explain 执行计划的使用示例 SQL 如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">explain select <span class="token operator">*</span> from person where uname <span class="token operator">=</span> <span class="token string">'Java'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它的执行结果如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/03/33/CgqCHl6ycJOAKJVoAAC7goXXIAs030.png"></p><p>摘要说明如下表所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/03/33/CgqCHl6ycGyAAMg7AADD5S9L1ek214.png"></p><p>以上字段中最重要的就是 type 字段，它的所有值如下所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/03/33/CgqCHl6ycKeAA46vAACNn0J31Ik660.png"></p><p>当 type 为 all 时，则表示全表扫描，因此效率会比较低，此时需要查看一下为什么会造成此种原因，是没有创建索引还是索引创建的有问题？以此来优化整个 MySQL 运行的速度。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章从三个维度讲了 MySQL 的优化手段：SQL 和索引优化、数据库结构优化以及系统硬件优化等；同时深入到每个维度中，详细地介绍了 MySQL 具体的优化细节；最后我们讲了联合索引的最左匹配原则，以及慢查询的具体解决方案。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库1-MySQL 的运行机制</title>
      <link href="2020/09/23/shu-ju-ku-1-mysql-de-yun-xing-ji-zhi/"/>
      <url>2020/09/23/shu-ju-ku-1-mysql-de-yun-xing-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL-的运行机制是什么？它有哪些引擎？"><a href="#MySQL-的运行机制是什么？它有哪些引擎？" class="headerlink" title="MySQL 的运行机制是什么？它有哪些引擎？"></a>MySQL 的运行机制是什么？它有哪些引擎？</h3><ul><li>数据库是 Java 程序员面试必问的知识点之一，它和 Java 的核心面试点共同组成了一个完整的技术面试。而数据库一般泛指的就是 MySQL，因为 MySQL 几乎占据了数据库的半壁江山，即使有些公司没有使用 MySQL 数据库，如果你对 MySQL 足够精通的话，也是会被他们录取的。因为数据库的核心与原理基本是相通的，所以有了 MySQL 的基础之后，再去熟悉其他数据库也是非常快的，那么接下来的几个课时就让我们好好的学习一下 MySQL。</li></ul><a id="more"></a><h4 id="本文章的面试题是，MySQL-是如何运行的？说一下它有哪些引擎？"><a href="#本文章的面试题是，MySQL-是如何运行的？说一下它有哪些引擎？" class="headerlink" title="本文章的面试题是，MySQL 是如何运行的？说一下它有哪些引擎？"></a>本文章的面试题是，MySQL 是如何运行的？说一下它有哪些引擎？</h4><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><p>MySQL 的执行流程是这样的，<strong>首先客户端先要发送用户信息去服务器端进行授权认证</strong>。如果使用的是命令行工具，通常需要输入如下信息：</p><blockquote><p>mysql -h 主机名(IP) -u 用户名 -P 端口 -p</p></blockquote><p>其中：</p><ul><li>-h 表示要连接的数据库服务器的主机名或者 IP 信息；</li><li>-u 表示数据库的用户名称；</li><li>-P 表示数据库服务器的端口号，</li><li>小写的 -p 表示需要输入数据库的密码。</li></ul><p>具体使用示例，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/00/F1/Ciqc1F6qtjOARs11AABEmyDSuJs566.png"></p><p>当输入正确密码之后可以连接到数据库了，如果密码输入错误，则会提示“Access denied for user ‘xxx’@’xxx’ (using password: YES)”密码错误信息，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/00/F1/CgqCHl6qtjqAHetRAAB0dQvpF6k199.png"></p><p><strong>当连接服务器端成功之后就可以正常的执行 SQL 命令了</strong>，MySQL 服务器拿到 SQL 命令之后，<strong>会使用 MySQL 的分析器解析 SQL 指令，同时会根据语法分析器验证 SQL 指令</strong>，查询 SQL 指令是否满足 MySQL 的语法规则。如果不支持此语法，则会提示“SQL syntax”语法错误信息。</p><p><strong>当分析器验证并解析 SQL 命令之后，会进入优化器阶段，执行生成计划，并设置相应的索引；当上面的这些步骤都执行完之后，就进入了执行器阶段，并开始正式执行 SQL 命令</strong>。同样在执行命令之前，它会先对你的执行命令进行权限查询，看看是否有操作某个表的权限，如果有相应的权限，执行器就去调用 MySQL 数据库引擎提供的接口，<strong>执行相应的命令；如果是非查询操作会记录对应的操作日志，再命令执行完成之后返回结果给客户端</strong>，这就是整个 MySQL 操作的完整流程。</p><p>需要注意的是，如果执行的是 select 语句并且是 MySQL 8.0 之前的版本的话，则会去 MySQL 的查询缓存中查看之前是否有执行过这条 SQL；如果缓存中可以查到，则会直接返回查询结果，这样查询性能就会提升很高。</p><p>整个 SQL 的执行流程，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/01/27/CgqCHl6r0YyAaKAIAAFBbmI8vwQ529.png"></p><p>我们可以使用 SHOW ENGINES 命令来查看 MySQL 数据库使用的存储引擎，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/00/F1/CgqCHl6qtn2Ac9jLAAGz-uccw7E865.png"></p><p>常用的数据库引擎有 InnoDB、MyISAM、MEMORY 等，其中 InnoDB 支持事务功能，而 MyISAM 不支持事务，但 MyISAM 拥有较高的插入和查询的速度。而 MEMORY 是内存型的数据库引擎，它会将表中的数据存储到内存中，因为它是内存级的数据引擎，因此具备最快速的查询效率，但它的缺点是，重启数据库之后，所有数据都会丢失，因为这些数据是存放在内存中的。</p><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h4><hr><p>此面试题考察的是面试者对 MySQL 基础知识的掌握程度，以及对于 MySQL 引擎的了解程度，这些都是属于 MySQL 最核心的原理之一，也是面试中常见的面试问题，它一般作为数据库面试题的开始题目，和此面试题相关的面试点还有以下几个：</p><ul><li>查询缓存在什么问题？</li><li>如何选择数据库的引擎？</li><li>InnoDB 自增索引的持久化问题。</li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><hr><h5 id="1-查询缓存的利弊"><a href="#1-查询缓存的利弊" class="headerlink" title="1.查询缓存的利弊"></a>1.查询缓存的利弊</h5><p>MySQL 8.0 之前可以正常的使用查询缓存的功能，可通过“SHOW GLOBAL VARIABLES LIKE ‘query_cache_type’”命令查询数据库是否开启了查询缓存的功能，它的结果值有以下三项：</p><ul><li><strong>OFF</strong>，关闭了查询缓存功能；</li><li><strong>ON</strong>，开启了查询缓存功能；</li><li><strong>DEMAND</strong>，在 sql 语句中指定 sql_cache 关键字才会有查询缓存，也就是说必须使用 sql_cache 才可以把该 select 语句的查询结果缓存起来，比如“select sql_cache name from token where tid=1010”语句。</li></ul><p>开启和关闭查询缓存可以通过修改 MySQL 的配置文件 my.cnf 进行修改，它的配置项如下：</p><blockquote><p>query_cache_type = ON</p></blockquote><p>➡️注意：配置被更改之后需要重启 MySQL 服务才能生效。</p><p>查询缓存的功能要根据实际的情况进行使用，建议设置为<strong>按需缓存</strong>（DEMAND）模式，因为查询缓存的功能并不是那么好用。比如我们设置了 query_cache_type = ON，当我们好不容易缓存了很多查询语句之后，任何一条对此表的更新操作都会把和这个表关联的所有查询缓存全部清空，那么在更新频率相对较高的业务中，查询缓存功能完全是一个鸡肋。因此，在 MySQL 8.0 的版本中已经完全移除了此功能，也就是说在 MySQL 8.0 之后就完全没有查询缓存这个概念和功能了。</p><h5 id="2-如何选择数据库引擎"><a href="#2-如何选择数据库引擎" class="headerlink" title="2.如何选择数据库引擎"></a>2.如何选择数据库引擎</h5><p>选择数据库引擎要从实际的业务情况入手，比如是否需要支持事务？是否需要支持外键？是否需要支持持久化？以及是否支持地理位置存储以及索引等方面进行综合考量。</p><p>我们最常用的数据库引擎是 InnoDB，它是 MySQL 5.5.5 之后的默认引擎，其优点是支持事务，且支持 4 种隔离级别。</p><ul><li><strong>读未提交</strong>：也就是一个事务还没有提交时，它做的变更就能被其他事务看到。</li><li><strong>读已提交</strong>：指的是一个事务只有提交了之后，其他事务才能看得到它的变更。</li><li><strong>可重复读</strong>：此方式为默认的隔离级别，它是指一个事务在执行过程中（从开始到结束）看到的数据都是一致的，在这个过程中未提交的变更对其他事务也是不可见的。</li><li><strong>串行化</strong>：是指对同一行记录的读、写都会添加读锁和写锁，后面访问的事务必须等前一个事务执行完成之后才能继续执行，所以这种事务的执行效率很低。</li></ul><p>InnoDB 还支持外键、崩溃后的快速恢复、支持全文检索（需要 5.6.4+ 版本）、集群索引，以及地理位置类型的存储和索引等功能。</p><p>MyISAM 引擎是 MySQL 原生的引擎，但它并不支持事务功能，这也是后来被 InnoDB 替代为默认引擎的主要原因。MyISAM 有独立的索引文件，因此在读取数据方面的性能很高，它也支持全文索引、地理位置存储和索引等功能，但不支持外键。</p><p>InnoDB 和 MyISAM 都支持持久化，但 MEMORY 引擎是将数据直接存储在内存中了，因此在重启服务之后数据就会丢失，但它带来的优点是执行速度很快，可以作为临时表来使用。</p><p>我们可以根据实际的情况设置相关的数据库引擎，还可以针对不同的表设置不同的数据引擎，只需要在创建表的时候指定 engine=引擎名称即可，SQL 代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">create table <span class="token function">student</span><span class="token punctuation">(</span>   id <span class="token keyword">int</span> primary key auto_increment<span class="token punctuation">,</span>   uname <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   age <span class="token keyword">int</span><span class="token punctuation">)</span> engine<span class="token operator">=</span><span class="token class-name">Memory</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-InnoDB-自增主键"><a href="#3-InnoDB-自增主键" class="headerlink" title="3.InnoDB 自增主键"></a>3.InnoDB 自增主键</h5><p>在面试的过程中我们经常看到这样一道面试题：</p><blockquote><p>在一个自增表里面一共有 5 条数据，id 从 1 到 5，删除了最后两条数据，也就是 id 为 4 和 5 的数据，之后重启的 MySQL 服务器，又新增了一条数据，请问新增的数据 id 为几？</p></blockquote><p>我们通常的答案是如果表为 MyISAM 引擎，那么 id 就是 6，如果是 InnoDB 那么 id 就是 4。</p><p>但是这个情况在高版本的 InnoDB 中，也就是 MySQL 8.0 之后就不准确了，它的 id 就不是 4 了，而是 6 了。因为在 MySQL 8.0 之后 InnoDB 会把索引持久化到日志中，重启服务之后自增索引是不会丢失的，因此答案是 6，这个需要面试者注意一下。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章讲了 MySQL 数据库运行流程的几个阶段，先从连接器授权，再到分析器进行语法分析。如果是 MySQL 8.0 之前的 select 语句可能会先查询缓存，如果有缓存则会直接返回结果给客户端，否则会从分析器进入优化器生成 SQL 的执行计划，然后交给执行器调用操作引擎执行相关的 SQL，再把结果返回给客户端。我们还讲了最常见的三种数据库引擎 InnoDB、MyISAM、MEMORY，以及它们的利弊分析。最后讲了 InnoDB 在高版本（8.0）之后可以持久化自增主键的小特性。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热门框架5-MQ 有什么作用</title>
      <link href="2020/09/21/re-men-kuang-jia-5-mq-you-shi-me-zuo-yong/"/>
      <url>2020/09/21/re-men-kuang-jia-5-mq-you-shi-me-zuo-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="MQ-有什么作用？你都用过哪些-MQ-中间件？"><a href="#MQ-有什么作用？你都用过哪些-MQ-中间件？" class="headerlink" title="MQ 有什么作用？你都用过哪些 MQ 中间件？"></a>MQ 有什么作用？你都用过哪些 MQ 中间件？</h3><ul><li>在之前中讲过“手写消息队列”，当时粗略的讲了 Java API 中使用 Queue 实现自定义消息队列，以及使用 Delayed 实现延迟队列的示例；同时还讲了 RabbitMQ 中的一些基础概念。本文章将会更加深入的讲解 MQ（Message Queue，消息队列）中间件，以及这些热门中间件的具体使用。</li></ul><a id="more"></a><h4 id="本文章的面试题是，MQ-常见的使用场景有哪些？你都用过哪些-MQ-中间件？"><a href="#本文章的面试题是，MQ-常见的使用场景有哪些？你都用过哪些-MQ-中间件？" class="headerlink" title="本文章的面试题是，MQ 常见的使用场景有哪些？你都用过哪些 MQ 中间件？"></a>本文章的面试题是，MQ 常见的使用场景有哪些？你都用过哪些 MQ 中间件？</h4><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><p>在介绍 MQ 的使用场景之前，先来回忆一下 MQ 的作用。MQ 可以用来实现削峰填谷，也就是使用它可以解决短时间内爆发式的请求任务，在不使用 MQ 的情况下会导致服务处理不过来，出现应用程序假死的情况，而使用了 MQ 之后可以把这些请求先暂存到消息队列中，然后进行排队执行，那么就不会出现应用程序假死的情况了，所以它的<strong>第一个应用就是商品秒杀以及产品抢购等使用场景</strong>，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/00/57/Ciqc1F6pUvmAD5AIAACea-Dr-GI912.png"></p><h5 id="使用-MQ-实现消息通讯"><a href="#使用-MQ-实现消息通讯" class="headerlink" title="使用 MQ 实现消息通讯"></a>使用 MQ 实现消息通讯</h5><p>使用 MQ 可以作为消息通讯的实现手段，利用它可以实现点对点的通讯或者多对多的聊天室功能。</p><p>点对点的消息通讯如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/00/57/Ciqc1F6pUw6AOt55AAEo3ij3m_I665.png"></p><p>多对多的消息通讯如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/00/57/CgqCHl6pUxaAYKOEAAFfQw8KV78965.png"></p><h5 id="使用-MQ-实现日志系统"><a href="#使用-MQ-实现日志系统" class="headerlink" title="使用 MQ 实现日志系统"></a>使用 MQ 实现日志系统</h5><p>可使用 MQ 实现对日志的采集和转发，比如有多个日志写入到程序中，然后把日志添加到 MQ，紧接着由日志处理系统订阅 MQ，最后 MQ 将消息接收并转发给日志处理系统，这样就完成了日志的分析和保存功能，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/00/57/Ciqc1F6pUx-AOEVkAACdQvKFiYs680.png"></p><p>常用的 MQ 中间件有 RabbitMQ、Kafka 和 Redis 等，其中 Redis 属于轻量级的消息队列，而 RabbitMQ、Kafka 属于比较成熟且比较稳定和高效的 MQ 中间件。</p><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h4><hr><p>MQ 属于中高级或优秀的程序员必备的技能，对于 MQ 中间件掌握的数量则是你技术广度和编程经验的直接体现信息之一。值得庆幸的是，关于 MQ 中间件的实现原理和使用方式都比较类似，因此如果开发者掌握一项 MQ 中间件再去熟悉其他 MQ 中间件时，会非常的容易。</p><p>MQ 相关的面试题还有这些：</p><ul><li>MQ 的特点是什么？引入 MQ 中间件会带来哪些问题？</li><li>常见的 MQ 中间件的优缺点分析。</li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><hr><h5 id="MQ-的特点及注意事项"><a href="#MQ-的特点及注意事项" class="headerlink" title="MQ 的特点及注意事项"></a><strong>MQ 的特点及注意事项</strong></h5><p>MQ 具有以下 5 个特点。</p><ul><li><strong>先进先出</strong>：消息队列的顺序一般在入列时就基本确定了，最先到达消息队列的信息，一般情况下也会先转发给订阅的消费者，我们把这种实现了先进先出的数据结构称之为队列。</li><li><strong>发布、订阅工作模式</strong>：<strong>生产者</strong>也就是消息的创建者，负责创建和推送数据到消息服务器；<strong>消费者</strong>也就是消息的接收方，用于处理数据和确认消息的消费；<strong>消息队列</strong>也是 MQ 服务器中最重要的组成元素之一，它负责消息的存储，这三者是 MQ 中的三个重要角色。而它们之间的消息传递与转发都是通过发布以及订阅的工作模式来进行的，即生产者把消息推送到消息队列，消费者订阅到相关的消息后进行消费，在消息非阻塞的情况下，此模式基本可以实现同步操作的效果。并且此种工作模式会把请求的压力转移给 MQ 服务器，以减少了应用服务器本身的并发压力。</li><li><strong>持久化</strong>：持久化是把消息从内存存储到磁盘的过程，并且在服务器重启或者发生宕机的情况下，重新启动服务器之后是保证数据不会丢失的一种手段，也是目前主流 MQ 中间件都会提供的重要功能。</li><li><strong>分布式</strong>：MQ 的一个主要特性就是要应对大流量、大数据的高并发环境，一个单体的 MQ 服务器是很难应对这种高并发的压力的，所以 MQ 服务器都会支持分布式应用的部署，以分摊和降低高并发对 MQ 系统的冲击。</li><li><strong>消息确认</strong>：消息消费确认是程序稳定性和安全性的一个重要考核指标，假如消费者在拿到消息之后突然宕机了，那么 MQ 服务器会误认为此消息已经被消费者消费了，从而造成消息丢失的问题，而目前市面上的主流 MQ 都实现了消息确认的功能，保证了消息不会丢失，从而保证了系统的稳定性。</li></ul><p><strong>引入 MQ 系统会带来的问题</strong></p><p>任何系统的引入都是有两面性的，MQ 也不例外，在引入 MQ 之后，可能会带来以下两个问题。</p><ul><li><strong>增加了系统的运行风险</strong>：引入 MQ 系统，则意味着新增了一套系统，并且其他的业务系统会对 MQ 系统进行深度依赖，系统部署的越多则意味着发生故障的可能性就越大，如果 MQ 系统挂掉的话可能会导致整个业务系统瘫痪。</li><li><strong>增加了系统的复杂度</strong>：引入 MQ 系统后，需要考虑消息丢失、消息重复消费、消息的顺序消费等问题，同时还需要引入新的客户端来处理 MQ 的业务，增加了编程的运维门槛，增加了系统的复杂性。</li></ul><p>使用 MQ 需要注意的问题，不要过度依赖 MQ，比如发送短信验证码或邮件等功能，这种低频但有可能比较耗时的功能可以使用多线程异步处理即可，不用任何的功能都依赖 MQ 中间件来完成，但像秒杀抢购可能会导致超卖（也就是把货卖多了，库存变成负数了）等短时间内高并发的请求，此时建议使用 MQ 中间件。</p><h5 id="常用的-MQ-中间件"><a href="#常用的-MQ-中间件" class="headerlink" title="常用的 MQ 中间件"></a>常用的 MQ 中间件</h5><p>常用的 MQ 中间件有 Redis、RabbitMQ、Kafka，下来我们分别来看看各自的作用。</p><p><strong>Redis 轻量级的消息中间件</strong><br>Redis 是一个高效的内存性数据库中间件，但使用 Redis 也可以实现消息队列的功能。</p><p>早期的 Redis（Redis 5.0 之前）是不支持消息确认的，那时候我们可以通过 List 数据类型的 lpush 和 rpop 方法来实现队列消息的存入和读取功能，或者使用 Redis 提供的发布订阅（pub/sub）功能来实现消息队列，但这种模式不支持持久化，List 虽然支持持久化但不能设置复杂的路由规则来匹配多个消息，并且他们二者都不支持消息消费确认。</p><p>于是在 Redis 5.0 之后提供了新的数据类型 Stream 解决了消息确认的问题，但它同样不能提供复杂的路由匹配规则，因此在业务不复杂的场景下可以尝试性的使用 Redis 提供的消息队列。</p><p><strong>RabbitMQ</strong><br>在第 10 课时中，我们对 RabbitMQ 有过初步的讲解，它是一个实现了标准的高级消息队列协议（AMQP，Advanced Message Queuing Protocol）的老牌开源消息中间件，最初起源于金融系统，后来被普遍应用在了其他分布式系统中，它支持集群部署，和多种客户端调用。</p><p>之前主要介绍了 RabbitMQ 的基础功能，本课时我们重点来看 RabbitMQ 集群相关的内容。</p><p>RabbitMQ 集群是由多个节点组成，但默认情况下每个节点并不是存储所有队列的完整拷贝，这是出于存储空间和性能的考虑，因为如果存储了队列的完整拷贝，那么就会有很多冗余的重复数据，并且在新增节点的情况下，不但没有新增存储空间，反而需要更大的空间来存储旧的数据；同样的道理，如果每个节点都保存了所有队列的完整信息，那么非查询操作的性能就会很慢，就会需要更多的网络带宽和磁盘负载来存储这些数据。</p><p>为了能兼顾性能和稳定性，RabbitMQ 集群的节点分为两种类型，即磁盘节点和内存节点，对于磁盘节点来说显然它的优势就是稳定，可以把相关数据保存下来，若 RabbitMQ 因为意外情况宕机，重启之后保证了数据不丢失；而内存节点的优势是快，因为是在内存中进行数据交换和操作，因此性能比磁盘节点要高出很多倍。</p><p>如果是单个 RabbitMQ 那么就必须要求是磁盘节点，否则当 RabbitMQ 服务器重启之后所有的数据都会丢失，这样显然是不能接受的。在 RabbitMQ 的集群中，至少需要一个磁盘节点，这样至少能保证集群数据的相对可靠性。</p><p>如果集群中的某一个磁盘节点崩溃了，此时整个 RabbitMQ 服务也不会处于崩溃的状态，不过部分操作会受影响，比如不能创建队列、交换器、也不能添加用户及修改用户权限，更不能添加和删除集群的节点等功能。</p><blockquote><p>小贴士：对于 RabbitMQ 集群来说，我们启动集群节点的顺序应该是先启动磁盘节点再启动内存节点，而关闭的顺序正好和启动的顺序相反，不然可能会导致 RabbitMQ 集群启动失败或者是数据丢失等异常问题。</p></blockquote><p><strong>Kafka</strong><br>Kafka 是 LinkedIn 公司开发的基于 ZooKeeper 的多分区、多副本的分布式消息系统，它于 2010 年贡献给了 Apache 基金会，并且成为了 Apache 的顶级开源项目。其中 ZooKeeper 的作用是用来为 Kafka 提供集群元数据管理以及节点的选举和发现等功能。</p><p>与 RabbitMQ 比较类似，一个典型的 Kafka 是由多个 Broker、多个生产者和消费者，以及 ZooKeeper 集群组成的，其中 Broker 可以理解为一个代理，Kafka 集群中的一台服务器称之为一个 Broker，其组成框架图如下所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/00/58/Ciqc1F6pVM6AYc7IAADyGfH6aOQ413.png"></p><p><strong>Kafka VS RabbitMQ</strong><br>Kafka（2.0.0）和 RabbitMQ（3.6.10）的区别主要体现在以下几点：</p><ul><li>Kafka 支持消息回溯，它可以根据 Offset（消息偏移量）、TimeStamp（时间戳）等维度进行消息回溯，而 RabbitMQ 并不支持消息回溯；</li><li>Kafka 的消息消费是基于拉取数据的模式，也就是消费者主动向服务器端发送拉取消息请求，而 RabbitMQ 支持拉取数据模式和主动推送数据的模式，也就说 RabbitMQ 服务器会主动把消息推送给订阅的消费者；</li><li>在相同配置下，Kafka 的吞吐量通常会比 RabbitMQ 高一到两个级别，比如在单机模式下，RabbitMQ 的吞吐量大概是万级别的处理能力，而 Kafka 则可以到达十万甚至是百万的吞吐级别；</li><li>Kafka 从 0.11 版本就开始支持幂等性了，当然所谓的幂等性指的是对单个生产者在单分区上的单会话的幂等操作，但对于全局幂等性则还需要结合业务来处理，比如，消费者在消费完一条消息之后没有来得及确认就发生异常了，等到恢复之后又得重新消费原来消费过的消息，类似这种情况，是无法在消息中间件层面来保证的，这个时候则需要引入更多的外部资源来保证全局幂等性，比如唯一的订单号、消费之前先做去重判断等；而 RabbitMQ 是没有幂等性功能支持的；</li><li>RabbitMQ 支持多租户的功能，也就是常说的 Virtual Host（vhost），每一个 vhost 相当于一个独立的小型 RabbitMQ 服务器，它们拥有自己独立的交换器、消息队列及绑定关系等，并且拥有自己独立权限，而且多个 vhost 之间是绝对隔离的，但 Kafka 并不支持多租户的功能。</li></ul><p>Kafka 和 RabbitMQ 都支持分布式集群部署，并且都支持数据持久化和消息消费确认等 MQ 的核心功能，对于 MQ 的选型要结合自己团队本身的情况，从性能、稳定性及二次开发的难易程度等维度来进行综合的考量并选择。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章我们讲了 MQ 的常见使用场景，以及常见的 MQ 中间件（Redis、RabbitMQ、Kafka）及其优缺点分析；同时还了解了 MQ 的五大特点：先进先出、发布和订阅的模式、持久化、分布式和消息确认等；接着讲了 MQ 引入对系统可能带来的风险；最后讲了 MQ 在使用时需要注意的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热门框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git clone主题项目文件时报错</title>
      <link href="2020/09/20/git-clone-zhu-ti-xiang-mu-wen-jian-shi-bao-cuo/"/>
      <url>2020/09/20/git-clone-zhu-ti-xiang-mu-wen-jian-shi-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h4 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">git clone https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h4><a id="more"></a><pre class="line-numbers language-java" data-language="java"><code class="language-java">remote<span class="token operator">:</span> <span class="token class-name">Enumerating</span> objects<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>remote<span class="token operator">:</span> <span class="token class-name">Counting</span> objects<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>remote<span class="token operator">:</span> <span class="token class-name">Compressing</span> objects<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>error<span class="token operator">:</span> <span class="token class-name">RPC</span> failed<span class="token punctuation">;</span> curl <span class="token number">18</span> transfer closed <span class="token keyword">with</span> <span class="token namespace">outstanding</span> read data remainingfatal<span class="token operator">:</span> the remote end hung up unexpectedlyfatal<span class="token operator">:</span> early EOFfatal<span class="token operator">:</span> index<span class="token operator">-</span>pack failed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920193631664.png"></p><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>➡️原因1：由于git默认缓存大小不足导致的，使用下面的命令增加缓存大小。</p><p>➡️原因2：执行上面命令如果依旧clone失败，可能网络下载速度缓慢。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">git config <span class="token operator">--</span>global http<span class="token punctuation">.</span>postBuffer <span class="token number">20000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920194144169.png"></p><p>➡️出现以下页面表面已克隆成功！</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920211621057.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热门框架4-SpringBoot 有哪些优点</title>
      <link href="2020/09/20/re-men-kuang-jia-4-springboot-you-na-xie-you-dian/"/>
      <url>2020/09/20/re-men-kuang-jia-4-springboot-you-na-xie-you-dian/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringBoot-有哪些优点？它和-Spring-有什么区别？"><a href="#SpringBoot-有哪些优点？它和-Spring-有什么区别？" class="headerlink" title="SpringBoot 有哪些优点？它和 Spring 有什么区别？"></a>SpringBoot 有哪些优点？它和 Spring 有什么区别？</h3><ul><li>Spring 和 Spring Boot 的区别很多新手容易搞混，从这道简单的面试题也可以很轻易试探出你的 Java 基础功底，如果连这个问题都答不上来的话，通常就没有什么下文了，因为这已经是用人单位对面试者的最低要求了，所以本课时我们就来看一下二者的区别，以及 Spring Boot 的特性。</li></ul><a id="more"></a><h4 id="本文章的面试题是，Spring-和-Spring-Boot-有什么区别？Spring-Boot-的优点有哪些？"><a href="#本文章的面试题是，Spring-和-Spring-Boot-有什么区别？Spring-Boot-的优点有哪些？" class="headerlink" title="本文章的面试题是，Spring 和 Spring Boot 有什么区别？Spring Boot 的优点有哪些？"></a>本文章的面试题是，Spring 和 Spring Boot 有什么区别？Spring Boot 的优点有哪些？</h4><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><ul><li><p>作为 Java 开发人员对 Spring 框架都很熟悉，Spring 为 Java 程序提供了全面的基础架构支持，包含了很多非常实用的功能，如 Spring JDBC、Spring AOP、Spring ORM、Spring Test 等，这些模块的出现，大大的缩短了应用程序的开发时间，同时提高了应用开发的效率。</p></li><li><p>Spring Boot 本质上是 Spring 框架的延伸和扩展，它的诞生是为了简化 Spring 框架初始搭建以及开发的过程，使用它可以不再依赖 Spring 应用程序中的 XML 配置，为更快、更高效的开发 Spring 提供更加有力的支持。Spring Boot 具体的特性如下。</p></li></ul><h5 id="Spring-Boot-特性一：更快速的构建能力"><a href="#Spring-Boot-特性一：更快速的构建能力" class="headerlink" title="Spring Boot 特性一：更快速的构建能力"></a>Spring Boot 特性一：更快速的构建能力</h5><p>Spring Boot 提供了更多的 Starters 用于快速构建业务框架，Starters 可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包，你可以一站式集成 Spring 及其他技术，而不需要到处找依赖包。</p><p>例如在 Spring 中如果要创建 Web 应用程序的最小依赖项为：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而 Spring Boot 只需要一个依赖项就可以来启动和运行 Web 应用程序，如下所示：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当我们添加了 Starter 模块支持之后，在项目的构建期，它就会把所有其他依赖项将自动添加到项目中。</p><p>这样的例子还有很多，比如测试库，如果是 Spring 项目我们通常要添加 Spring Test、JUnit、Hamcrest 和 Mockito 库；而如果是 Spring Boot 项目的话，只需要添加 spring-boot-starter-test 即可，它会自动帮我们把其他的依赖项添加到项目中。</p><p>常见的 Starters 有以下几个：</p><ul><li>spring-boot-starter-test</li><li>spring-boot-starter-web</li><li>spring-boot-starter-data-jpa</li><li>spring-boot-starter-thymeleaf</li></ul><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter">点击这里访问文档</a>，查看完整的 Starters 列表。</p><h5 id="Spring-Boot-特性二：起步依赖"><a href="#Spring-Boot-特性二：起步依赖" class="headerlink" title="Spring Boot 特性二：起步依赖"></a>Spring Boot 特性二：起步依赖</h5><p>Spring Boot 提供了起步依赖，也就是在创建 Spring Boot 时可以直接勾选依赖模块，这样在项目初始化时就会把相关依赖直接添加到项目中，大大缩短了查询并添加依赖的时间，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/07/A6/CgoCgV6iUq2AVmIhAAGjN3d9ZEI221.png"></p><h5 id="Spring-Boot-特性三：内嵌容器支持"><a href="#Spring-Boot-特性三：内嵌容器支持" class="headerlink" title="Spring Boot 特性三：内嵌容器支持"></a>Spring Boot 特性三：内嵌容器支持</h5><p>Spring Boot 内嵌了 Tomcat、Jetty、Undertow 三种容器，其默认嵌入的容器是 Tomcat，这个在我们启动 Spring Boot 项目的时候，在控制台上就能看到，具体信息如下：</p><blockquote><p>o.s.b.w.embedded.tomcat.TomcatWebServer :Tomcat started on port(s): 8080 (http) with context path ‘’</p></blockquote><p>可以看出 Spring Boot 默认使用的是 Tomcat 容器启动的。</p><p>我们可以通过修改 pom.xml 来移除内嵌的 Tomcat 更换为其他的容器，比如更换为 Jetty 容器，配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 移处 Tomcat --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 移处 jetty 容器 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们添加完成之后，再重新生成 pom.xml 文件，然后再启动 Spring Boot 项目容器信息就变了，如下所示：</p><blockquote><p>o.e.jetty.server.AbstractConnector: Started ServerConnector@53f9009d{HTTP/1.1, (http/1.1)}{0.0.0.0:8080}<br>o.s.b.web.embedded.jetty.JettyWebServer</p></blockquote><p>可以看出 Spring Boot 使用了我们指定的 Jetty 容器启动了。</p><h5 id="Spring-Boot-特性四：Actuator-监控"><a href="#Spring-Boot-特性四：Actuator-监控" class="headerlink" title="Spring Boot 特性四：Actuator 监控"></a>Spring Boot 特性四：Actuator 监控</h5><p>Spring Boot 自带了 Actuator 监控功能，主要用于提供对应用程序监控，以及控制的能力，比如监控应用程序的运行状况，或者内存、线程池、Http 请求统计等，同时还提供了关闭应用程序等功能。</p><p>Actuator 提供了 19 个接口，接口请求地址和代表含义如下表所示：</p><table>    <thead>        <tr>        <th>访问路径</th>        <th>描述</th>        </tr>    </thead>    <tbody>        <tr>            <td>/auditevents</td>            <td>显示应用暴露的审计事件（比如认证进入）</td>        </tr>        <tr>            <td>/beans</td>            <td>显示应用程序中所有 Spring Bean 的完整列表</td>        </tr>            <tr>            <td>/caches</td>            <td>公开可用的缓存</td>        </tr>        <tr>            <td>/conditions</td>            <td>显示在配置和自动配置类上评估的条件以及它们匹配或不匹配的原因</td>        </tr>        <tr>            <td>/configprops</td>            <td>显示所有 @ConfigurationPropertie 的整理列表</td>        </tr>        <tr>            <td>/env</td>            <td>获取全部环境属性</td>        </tr>          <tr>            <td>/flyway</td>            <td>提供一份 Flyway 数据库迁移信息</td>        </tr>        <tr>            <td>/health</td>            <td>显示应用程序运行状况信息</td>        </tr>        <tr>            <td>/httptrace</td>            <td>显示 HTTP 跟踪信息（默认情况下，最近 100 个 HTTP 请求-响应交换）</td>        </tr>        <tr>            <td>/info</td>            <td>获取应用程序的定制信息，这些信息由 info 开头的属性提供</td>        </tr>        <tr>            <td>/integrationgraph</td>            <td>显示 Spring Integration 图，需要依赖于 spring-integration-core</td>        </tr>        <tr>            <td>/loggers</td>            <td>显示和修改应用程序的配置</td>        </tr>        <tr>            <td>/liquibase</td>            <td>显示已应用的所有 Liquibase 数据库迁移</td>        </tr>        <tr>            <td>/metrics/{name}</td>            <td>报告指定名称的应用程序度量值</td>        </tr>        <tr>            <td>/mappings</td>            <td>显示所有 @RequestMapping 路径的列表</td>        </tr>        <tr>            <td>/scheduledtasks</td>            <td>显示应用程序中的计划任务</td>        </tr>        <tr>            <td>/sessions</td>            <td>允许从 Spring Session 支持的会话存储中检索和删除用户会话，需要使用 Spring Session 基于 Servlet 的 Web 应用程序</td>        </tr>        <tr>            <td>/shutdown</td>            <td>使应用程序正常关闭，默认禁用</td>        </tr>        <tr>            <td>/threaddump</td>            <td>获取线程活动的快照</td>        </tr>    </tbody> </table><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h4><hr><p>很多人都知道 Spring Boot 是基于 Spring 的，使用它可以更加快速高效的构建 Spring，然而当面试官问到 Spring Boot 是如何高效构建 Spring 时，可能大部分人回答不上来了，上面讲解的 Spring Boot 四大特性基本涵盖了此问题的答案。如果面试官继续追问更深的细节的话，可能会问到关于 Spring Boot 执行的源码细节，比如 Spring Boot 的启动流程是怎么样的？</p><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><hr><h5 id="Spring-Boot-启动源码分析"><a href="#Spring-Boot-启动源码分析" class="headerlink" title="Spring Boot 启动源码分析"></a>Spring Boot 启动源码分析</h5><p>我们知道 Spring Boot 程序的入口是 SpringApplication.run(Application.class, args) 方法，那么就从 run() 方法开始分析吧，它的源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.创建并启动计时监控类</span>    <span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.声明应用上下文对象和异常报告集合</span>    <span class="token class-name">ConfigurableApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpringBootExceptionReporter</span><span class="token punctuation">&gt;</span></span> exceptionReporters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.设置系统属性 headless 的值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.创建所有 Spring 运行监听器并发布应用启动事件</span>    <span class="token class-name">SpringApplicationRunListeners</span> listeners <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collection</span> exceptionReporters<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 5.处理 args 参数</span>        <span class="token class-name">ApplicationArguments</span> applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 6.准备环境</span>        <span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 7.创建 Banner 的打印类</span>        <span class="token class-name">Banner</span> printedBanner <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 8.创建应用上下文</span>        context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 9.实例化异常报告器</span>        exceptionReporters <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span><span class="token class-name">SpringBootExceptionReporter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 10.准备应用上下文</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 11.刷新应用上下文</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 12.应用上下文刷新之后的事件的处理</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 13.停止计时监控类</span>        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 14.输出日志记录执行主类名、时间信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 15.发布应用上下文启动完成事件</span>        listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 16.执行所有 Runner 运行器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callRunners</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var10<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> var10<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>var10<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 17.发布应用上下文就绪事件</span>        listeners<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 18.返回应用上下文对象</span>        <span class="token keyword">return</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var9<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> var9<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">SpringApplicationRunListeners</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>var9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上源码可以看出 Spring Boot 的启动总共分为以下 18 个步骤。</p><h5 id="Spring-Boot-的启动流程"><a href="#Spring-Boot-的启动流程" class="headerlink" title="Spring Boot 的启动流程"></a>Spring Boot 的启动流程</h5><h6 id="1-创建并启动计时监控类"><a href="#1-创建并启动计时监控类" class="headerlink" title="1.创建并启动计时监控类"></a>1.创建并启动计时监控类</h6><p>此计时器是为了监控并记录 Spring Boot 应用启动的时间的，它会记录当前任务的名称，然后开启计时器。</p><h6 id="2-声明应用上下文对象和异常报告集合"><a href="#2-声明应用上下文对象和异常报告集合" class="headerlink" title="2.声明应用上下文对象和异常报告集合"></a>2.声明应用上下文对象和异常报告集合</h6><p>此过程声明了应用上下文对象和一个异常报告的 ArrayList 集合。</p><h6 id="3-设置系统属性-headless-的值"><a href="#3-设置系统属性-headless-的值" class="headerlink" title="3.设置系统属性 headless 的值"></a>3.设置系统属性 headless 的值</h6><p>设置 Java.awt.headless = true，其中 awt（Abstract Window Toolkit）的含义是抽象窗口工具集。设置为 true 表示运行一个 headless 服务器，可以用它来作一些简单的图像处理。</p><h6 id="4-创建所有-Spring-运行监听器并发布应用启动事件"><a href="#4-创建所有-Spring-运行监听器并发布应用启动事件" class="headerlink" title="4.创建所有 Spring 运行监听器并发布应用启动事件"></a>4.创建所有 Spring 运行监听器并发布应用启动事件</h6><p>此过程用于获取配置的监听器名称并实例化所有的类。</p><h6 id="5-初始化默认应用的参数类"><a href="#5-初始化默认应用的参数类" class="headerlink" title="5.初始化默认应用的参数类"></a>5.初始化默认应用的参数类</h6><p>也就是说声明并创建一个应用参数对象。</p><h6 id="6-准备环境"><a href="#6-准备环境" class="headerlink" title="6.准备环境"></a>6.准备环境</h6><p>创建配置并且绑定环境（通过 property sources 和 profiles 等配置文件）。</p><h6 id="7-创建-Banner-的打印类"><a href="#7-创建-Banner-的打印类" class="headerlink" title="7.创建 Banner 的打印类"></a>7.创建 Banner 的打印类</h6><p>Spring Boot 启动时会打印 Banner 图片，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/14/D9/Ciqah16iVnqAFdGvAABQamtevj4608.png"></p><p>此 banner 信息是在 SpringBootBanner 类中定义的，我们可以通过实现 Banner 接口来自定义 banner 信息，然后通过代码 setBanner() 方法设置 Spring Boot 项目使用自己自定义 Banner 信息，或者是在 resources 下添加一个 banner.txt，把 banner 信息添加到此文件中，就可以实现自定义 banner 的功能了。</p><h6 id="8-创建应用上下文"><a href="#8-创建应用上下文" class="headerlink" title="8.创建应用上下文"></a>8.创建应用上下文</h6><p>根据不同的应用类型来创建不同的 ApplicationContext 上下文对象。</p><h6 id="9-实例化异常报告器"><a href="#9-实例化异常报告器" class="headerlink" title="9.实例化异常报告器"></a>9.实例化异常报告器</h6><p>它调用的是 getSpringFactoriesInstances() 方法来获取配置异常类的名称，并实例化所有的异常处理类。</p><h6 id="10-准备应用上下文"><a href="#10-准备应用上下文" class="headerlink" title="10.准备应用上下文"></a>10.准备应用上下文</h6><p>此方法的主要作用是把上面已经创建好的对象，传递给 prepareContext 来准备上下文，例如将环境变量 environment 对象绑定到上下文中、配置 bean 生成器以及资源加载器、记录启动日志等操作。</p><h6 id="11-刷新应用上下文"><a href="#11-刷新应用上下文" class="headerlink" title="11.刷新应用上下文"></a>11.刷新应用上下文</h6><p>此方法用于解析配置文件，加载 bean 对象，并且启动内置的 web 容器等操作。</p><h6 id="12-应用上下文刷新之后的事件处理"><a href="#12-应用上下文刷新之后的事件处理" class="headerlink" title="12.应用上下文刷新之后的事件处理"></a>12.应用上下文刷新之后的事件处理</h6><p>这个方法的源码是空的，可以做一些自定义的后置处理操作。</p><h6 id="13-停止计时监控类"><a href="#13-停止计时监控类" class="headerlink" title="13.停止计时监控类"></a>13.停止计时监控类</h6><p>停止此过程第一步中的程序计时器，并统计任务的执行信息。</p><h6 id="14-输出日志信息"><a href="#14-输出日志信息" class="headerlink" title="14.输出日志信息"></a>14.输出日志信息</h6><p>把相关的记录信息，如类名、时间等信息进行控制台输出。</p><h6 id="15-发布应用上下文启动完成事件"><a href="#15-发布应用上下文启动完成事件" class="headerlink" title="15.发布应用上下文启动完成事件"></a>15.发布应用上下文启动完成事件</h6><p>触发所有 SpringApplicationRunListener 监听器的 started 事件方法。</p><h6 id="16-执行所有-Runner-运行器"><a href="#16-执行所有-Runner-运行器" class="headerlink" title="16.执行所有 Runner 运行器"></a>16.执行所有 Runner 运行器</h6><p>执行所有的 ApplicationRunner 和 CommandLineRunner 运行器。</p><h6 id="17-发布应用上下文就绪事件"><a href="#17-发布应用上下文就绪事件" class="headerlink" title="17.发布应用上下文就绪事件"></a>17.发布应用上下文就绪事件</h6><p>触发所有的 SpringApplicationRunListener 监听器的 running 事件。</p><h6 id="18-返回应用上下文对象"><a href="#18-返回应用上下文对象" class="headerlink" title="18.返回应用上下文对象"></a>18.返回应用上下文对象</h6><p>到此为止 Spring Boot 的启动程序就结束了，我们就可以正常来使用 Spring Boot 框架了。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章首先讲了 Spring 和 Spring Boot 的区别，Spring Boot 本质上是 Spring 的延伸，它是基于 Spring 的，它为快速构建和开发 Spring 提供了有力的支撑；接着介绍了 Spring Boot 的四大特性：更快速的构建能力、起步依赖、内嵌容器支持、Actuator 监控支持等，最后 还介绍了 Spring Boot 启动的 18 个步骤。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热门框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热门框架3-MyBatis 使用了哪些设计模式</title>
      <link href="2020/09/18/re-men-kuang-jia-3-mybatis-shi-yong-liao-na-xie-she-ji-mo-shi/"/>
      <url>2020/09/18/re-men-kuang-jia-3-mybatis-shi-yong-liao-na-xie-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="MyBatis-使用了哪些设计模式？在源码中是如何体现的？"><a href="#MyBatis-使用了哪些设计模式？在源码中是如何体现的？" class="headerlink" title="MyBatis 使用了哪些设计模式？在源码中是如何体现的？"></a>MyBatis 使用了哪些设计模式？在源码中是如何体现的？</h3><ul><li>MyBatis 的前身是 IBatis，IBatis 是由 Internet 和 Abatis 组合而成，其目的是想当做互联网的篱笆墙，围绕着数据库提供持久化服务的一个框架，2010 年正式改名为 MyBatis。它是一款优秀的持久层框架，支持自定义 SQL、存储过程及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作，还可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Ordinary Java Object，普通 Java 对象）为数据库中的记录。</li></ul><a id="more"></a><ul><li>关于 MyBatis 的介绍与使用，官方已经提供了比较详尽的中文参考文档，<a href="https://mybatis.org/mybatis-3/zh/getting-started.html">可点击这里查看</a>，而本文章则以面试的角度出发，聊一聊不一样的知识点，它也是 MyBatis 比较热门的面试题之一，MyBatis 使用了哪些设计模式？在源码中是如何体现的？</li></ul><blockquote><p>注意：本文章使用的 MyBatis 源码为 3.5.5。</p></blockquote><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a><strong>典型回答</strong></h4><hr><h5 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1.工厂模式"></a>1.工厂模式</h5><p>工厂模式想必都比较熟悉，它是 Java 中最常用的设计模式之一。工厂模式就是提供一个工厂类，当有客户端需要调用的时候，只调用这个工厂类就可以得到自己想要的结果，从而无需关注某类的具体实现过程。这就好比你去餐馆吃饭，可以直接点菜，而不用考虑厨师是怎么做的。</p><p>工厂模式在 MyBatis 中的典型代表是 SqlSessionFactory。</p><p>SqlSession 是 MyBatis 中的重要 Java 接口，可以通过该接口来执行 SQL 命令、获取映射器示例和管理事务，而 SqlSessionFactory 正是用来产生 SqlSession 对象的，所以它在 MyBatis 中是比较核心的接口之一。</p><p>工厂模式应用解析：SqlSessionFactory 是一个接口类，它的子类 DefaultSqlSessionFactorys 有一个 openSession(ExecutorType execType) 的方法，其中使用了工厂模式，源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">SqlSession</span> <span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span> execType<span class="token punctuation">,</span> <span class="token class-name">TransactionIsolationLevel</span> level<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Transaction</span> tx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Environment</span> environment <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">TransactionFactory</span> transactionFactory <span class="token operator">=</span> <span class="token function">getTransactionFactoryFromEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        tx <span class="token operator">=</span> transactionFactory<span class="token punctuation">.</span><span class="token function">newTransaction</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Executor</span> executor <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newExecutor</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> execType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">closeTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error opening session.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从该方法我们可以看出它会 configuration.newExecutor(tx, execType) 读取对应的环境配置，而此方法的源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">newExecutor</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span> transaction<span class="token punctuation">,</span> <span class="token class-name">ExecutorType</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> defaultExecutorType <span class="token operator">:</span> executorType<span class="token punctuation">;</span>    executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">ExecutorType</span><span class="token punctuation">.</span>SIMPLE <span class="token operator">:</span> executorType<span class="token punctuation">;</span>    <span class="token class-name">Executor</span> executor<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span>BATCH <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span>REUSE <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReuseExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    executor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Executor</span><span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> executor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出 newExecutor() 方法为标准的工厂模式，它会根据传递 ExecutorType 值生成相应的对象然后进行返回。</p><h5 id="2-建造者模式（Builder）"><a href="#2-建造者模式（Builder）" class="headerlink" title="2.建造者模式（Builder）"></a>2.建造者模式（Builder）</h5><p>建造者模式指的是将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。也就是说建造者模式是通过多个模块一步步实现了对象的构建，相同的构建过程可以创建不同的产品。</p><p>例如，组装电脑，最终的产品就是一台主机，然而不同的人对它的要求是不同的，比如设计人员需要显卡配置高的；而影片爱好者则需要硬盘足够大的（能把视频都保存起来），但对于显卡却没有太大的要求，我们的装机人员根据每个人不同的要求，组装相应电脑的过程就是建造者模式。</p><p>建造者模式在 MyBatis 中的典型代表是 SqlSessionFactoryBuilder。</p><p>普通的对象都是通过 new 关键字直接创建的，但是如果创建对象需要的构造参数很多，且不能保证每个参数都是正确的或者不能一次性得到构建所需的所有参数，那么就需要将构建逻辑从对象本身抽离出来，让对象只关注功能，把构建交给构建类，这样可以简化对象的构建，也可以达到分步构建对象的目的，而 SqlSessionFactoryBuilder 的构建过程正是如此。</p><p>在 SqlSessionFactoryBuilder 中构建 SqlSessionFactory 对象的过程是这样的，首先需要通过 XMLConfigBuilder 对象读取并解析 XML 的配置文件，然后再将读取到的配置信息存入到 Configuration 类中，然后再通过 build 方法生成我们需要的 DefaultSqlSessionFactory 对象，实现源码如下（在 SqlSessionFactoryBuilder 类中）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">,</span> <span class="token class-name">String</span> environment<span class="token punctuation">,</span> <span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">XMLConfigBuilder</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error building SqlSession."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Intentionally ignore. Prefer previous error.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSessionFactory</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SqlSessionFactoryBuilder 类相当于一个建造工厂，先读取文件或者配置信息、再解析配置、然后通过反射生成对象，最后再把结果存入缓存，这样就一步步构建造出一个 SqlSessionFactory 对象。</p><h5 id="3-单例模式"><a href="#3-单例模式" class="headerlink" title="3.单例模式"></a>3.单例模式</h5><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一，此模式保证某个类在运行期间，只有一个实例对外提供服务，而这个类被称为<strong>单例类</strong>。</p><p>单例模式也比较好理解，比如一个人一生当中只能有一个真实的身份证号，每个收费站的窗口都只能一辆车子一辆车子的经过，类似的场景都是属于<strong>单例模式</strong>。</p><p>单例模式在 MyBatis 中的典型代表是 ErrorContext。</p><p>ErrorContext 是线程级别的的单例，每个线程中有一个此对象的单例，用于记录该线程的执行环境的错误信息。</p><p>ErrorContext 的实现源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorContext</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> LINE_SEPARATOR <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">lineSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 每个线程存储的容器</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorContext</span><span class="token punctuation">&gt;</span></span> LOCAL <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token class-name">ErrorContext</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ErrorContext</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> LOCAL<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 忽略其他</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出 ErrorContext 使用 private 修饰的 ThreadLocal 来保证每个线程拥有一个 ErrorContext 对象，在调用 instance() 方法时再从 ThreadLocal 中获取此单例对象。</p><h5 id="4-适配器模式"><a href="#4-适配器模式" class="headerlink" title="4.适配器模式"></a>4.适配器模式</h5><p>适配器模式是指将一个不兼容的接口转换成另一个可以兼容的接口，这样就可以使那些不兼容的类可以一起工作。</p><p>例如，最早之前我们用的耳机都是圆形的，而现在大多数的耳机和电源都统一成了方形的 typec 接口，那之前的圆形耳机就不能使用了，只能买一个适配器把圆形接口转化成方形的，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/13/8A/Ciqah16f6OqAIKAYAADKCLdmqIs159.png"></p><p>而这个转换头就相当于程序中的适配器模式，适配器模式在 MyBatis 中的典型代表是 Log。</p><p>MyBatis 中的日志模块适配了以下多种日志类型：</p><ul><li>SLF4J</li><li>Apache Commons Logging</li><li>Log4j 2</li><li>Log4j</li><li>JDK logging</li></ul><p>首先 MyBatis 定义了一个 Log 的接口，用于统一和规范接口的行为，源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span>  <span class="token keyword">boolean</span> <span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">warn</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后 MyBatis 定义了多个适配接口，例如 Log4j2 实现源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log4j2Impl</span> <span class="token keyword">implements</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Log4j2Impl</span><span class="token punctuation">(</span><span class="token class-name">String</span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger <span class="token keyword">instanceof</span> <span class="token class-name">AbstractLogger</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Log4j2AbstractLoggerImpl</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractLogger</span><span class="token punctuation">)</span> logger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      log <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Log4j2LoggerImpl</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> log<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">warn</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样当你项目中添加了 Log4j2 时，MyBatis 就可以直接使用它打印 MyBatis 的日志信息了。Log 的所有子类如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/13/7A/Ciqah16f2v2AeeNMAAFjYUNVZ4Q221.png"></p><h5 id="5-代理模式"><a href="#5-代理模式" class="headerlink" title="5.代理模式"></a>5.代理模式</h5><p>代理模式指的是给某一个对象提供一个代理对象，并由代理对象控制原对象的调用。</p><p>代理模式在生活中也比较常见，比如我们常见的超市、小卖店其实都是一个个“代理”，他们的最上游是一个个生产厂家，他们这些代理负责把厂家生产出来的产品卖出去。</p><p>代理模式在 MyBatis 中的典型代表是 MapperProxyFactory。</p><p>MapperProxyFactory 的 newInstance() 方法就是生成一个具体的代理来实现功能的，源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">MapperMethodInvoker</span><span class="token punctuation">&gt;</span></span> methodCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">MapperProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface <span class="token operator">=</span> mapperInterface<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMapperInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> mapperInterface<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">MapperMethodInvoker</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMethodCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> methodCache<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 创建代理类</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>  <span class="token keyword">protected</span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> mapperInterface <span class="token punctuation">}</span><span class="token punctuation">,</span> mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> mapperInterface<span class="token punctuation">,</span> methodCache<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">newInstance</span><span class="token punctuation">(</span>mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-模板方法模式"><a href="#6-模板方法模式" class="headerlink" title="6.模板方法模式"></a>6.模板方法模式</h5><p>模板方法模式是最常用的设计模式之一，它是指定义一个操作算法的骨架，而将一些步骤的实现延迟到子类中去实现，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。此模式是基于继承的思想实现代码复用的。</p><p>例如，我们喝茶的一般步骤都是这样的：</p><ul><li>把热水烧开</li><li>把茶叶放入壶中</li><li>等待一分钟左右</li><li>把茶倒入杯子中</li><li>喝茶</li></ul><p>整个过程都是固定的，唯一变的就是泡入茶叶种类的不同，比如今天喝的是绿茶，明天可能喝的是红茶，那么我们就可以把流程定义为一个模板，而把茶叶的种类延伸到子类中去实现，这就是模板方法的实现思路。</p><p>模板方法在 MyBatis 中的典型代表是 BaseExecutor。</p><p>在 MyBatis 中 BaseExecutor 实现了大部分 SQL 执行的逻辑，然后再把几个方法交给子类来实现，它的继承关系如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/06/4C/CgoCgV6f2wyAULMBAABm_m36wXw649.png"></p><p>比如 doUpdate() 就是交给子类自己去实现的，它在 BaseExecutor 中的定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">doUpdate</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 SimpleExecutor 中的实现如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">BaseExecutor</span> <span class="token punctuation">{</span>  <span class="token comment">// 构造方法</span>  <span class="token keyword">public</span> <span class="token class-name">SimpleExecutor</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">Transaction</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 更新方法</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doUpdate</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">StatementHandler</span> handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 忽略其他代码...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出 SimpleExecutor 每次使用完 Statement 对象之后，都会把它关闭掉，而 ReuseExecutor 中的实现源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReuseExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">BaseExecutor</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Statement</span><span class="token punctuation">&gt;</span></span> statementMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">ReuseExecutor</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">Transaction</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 更新方法</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doUpdate</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StatementHandler</span> handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 忽略其他代码...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，ReuseExecutor 每次使用完 Statement 对象之后不会把它关闭掉。</p><h5 id="7-装饰器模式"><a href="#7-装饰器模式" class="headerlink" title="7.装饰器模式"></a>7.装饰器模式</h5><p>装饰器模式允许向一个现有的对象添加新的功能，同时又不改变其结构，这种类型的设计模式属于结构型模式，它是作为现有类的一个包装。</p><p>装饰器模式在生活中很常见，比如装修房子，我们在不改变房子结构的同时，给房子添加了很多的点缀；比如安装了天然气报警器，增加了热水器等附加的功能都属于装饰器模式。</p><p>装饰器模式在 MyBatis 中的典型代表是 Cache。</p><p>Cache 除了有数据存储和缓存的基本功能外（由 PerpetualCache 永久缓存实现），还有其他附加的 Cache 类，比如先进先出的 FifoCache、最近最少使用的 LruCache、防止多线程并发访问的 SynchronizedCache 等众多附加功能的缓存类，Cache 所有实现子类如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/06/4C/CgoCgV6f2yOAeRJoAACY-E2QwcM337.png"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章重点讲了 MyBatis 源码中的几个主要设计模式，即工厂模式、建造者模式、单例模式、适配器模式、代理模式、模板方法模式等，希望本课时的内容能起到抛砖引玉的作用，对你理解设计模式和 MyBatis 提供一些帮助，如果想要阅读全部的 MyBatis 源码可以访问：<a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a> 。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热门框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热门框架2-谈一谈你对 IoC 和 DI 的理解</title>
      <link href="2020/09/13/re-men-kuang-jia-2-tan-yi-tan-ni-dui-ioc-he-di-de-li-jie/"/>
      <url>2020/09/13/re-men-kuang-jia-2-tan-yi-tan-ni-dui-ioc-he-di-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="本文章的面试题是，谈一谈你对-IoC-和-DI-的理解。"><a href="#本文章的面试题是，谈一谈你对-IoC-和-DI-的理解。" class="headerlink" title="本文章的面试题是，谈一谈你对 IoC 和 DI 的理解。"></a>本文章的面试题是，谈一谈你对 IoC 和 DI 的理解。</h4><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><ul><li><p><strong>IoC</strong>（Inversion of Control，翻译为“<strong>控制反转</strong>”）不是一个具体的技术，而是一种设计思想。与传统控制流相比，IoC 会颠倒控制流，在传统的编程中需要开发者自行创建并销毁对象，而在 IoC 中会把这些操作交给框架来处理，这样开发者就不用关注具体的实现细节了，拿来直接用就可以了，这就是控制反转。</p><a id="more"></a></li><li><p>IoC 很好的体现出了面向对象的设计法则之一——好莱坞法则：“别找我们，我们找你”。即由 IoC 容器帮对象找到相应的依赖对象并注入，而不是由对象主动去找。</p></li></ul><blockquote><p>举个例子，比如说传统找对象，先要设定好你的要求，如身高、体重、长相等，然后再一个一个的主动去找符合要求的对象，而 IoC 相当于，你把这些要求直接告诉婚介中心，由他们直接给你匹配到符合要求的对象，理想情况下是直接会帮你找到合适的对象，这就是传统编程模式和 IoC 的区别。</p></blockquote><ul><li><p><strong>DI</strong>（Dependency Injection，翻译为“<strong>依赖注入</strong>”）表示组件间的依赖关系交由容器在运行期自动生成，也就是说，由容器动态的将某个依赖关系注入到组件之中，这样就能提升组件的重用频率。通过依赖注入机制，我们只需要通过简单的配置，就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心资源来自哪里、由谁实现等问题。</p></li><li><p>IoC 和 DI 其实是同一个概念从不同角度的描述的，由于控制反转这个概念比较含糊（可能只理解成了容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以 2004 年被开发者尊称为“教父”的 Martin Fowler（世界顶级专家，敏捷开发方法的创始人之一）又给出了一个新的名字“依赖注入”，相对 IoC 而言，“依赖注入”明确描述了“<strong>被注入对象依赖 IoC 容器配置依赖对象</strong>”。</p></li></ul><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h4><hr><p>IoC 和 DI 为 Spring 框架设计的精髓所在，也是面试中必问的考点之一，这个优秀的设计思想对于初学者来说可能理解起来比较困难，但对于 Spring 的使用者来说可以很快的看懂。因此如果对于此概念还有疑问的话，建议先上手使用 Spring 实现几个小功能再回头来看这些概念，相信你会豁然开朗。</p><p>Spring 相关的高频面试题，还有以下这些：</p><ul><li>Spring IoC 有哪些优势？</li><li>IoC 的注入方式有哪些？</li><li>谈一谈你对 AOP 的理解。</li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h4><hr><h5 id="1-Spring-IoC-的优点"><a href="#1-Spring-IoC-的优点" class="headerlink" title="1.Spring IoC 的优点"></a><strong>1.Spring IoC 的优点</strong></h5><p>IoC 的优点有以下几个：</p><ul><li>使用更方便，拿来即用，无需显式的创建和销毁的过程；</li><li>可以很容易提供众多服务，比如事务管理、消息服务等；</li><li>提供了单例模式的支持；</li><li>提供了 AOP 抽象，利用它很容易实现权限拦截、运行期监控等功能；</li><li>更符合面向对象的设计法则；</li><li>低侵入式设计，代码的污染极低，降低了业务对象替换的复杂性。</li></ul><h5 id="2-Spring-IoC-注入方式汇总"><a href="#2-Spring-IoC-注入方式汇总" class="headerlink" title="2.Spring IoC 注入方式汇总"></a><strong>2.Spring IoC 注入方式汇总</strong></h5><p>IoC 的注入方式有三种：构造方法注入、Setter 注入和接口注入。</p><h6 id="①-构造方法注入"><a href="#①-构造方法注入" class="headerlink" title="① 构造方法注入"></a><strong>① 构造方法注入</strong></h6><p>构造方法注入主要是依赖于构造方法去实现，构造方法可以是有参的也可以是无参的，我们平时 new 对象时就是通过类的构造方法来创建类对象的，每个类对象默认会有一个无参的构造方法，Spring 通过构造方法注入的代码示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">// 忽略 Setter、Getter 的方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>applicationContext.xml 配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.beans.Person<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="②-Setter-注入"><a href="#②-Setter-注入" class="headerlink" title="② Setter 注入"></a><strong>② Setter 注入</strong></h6><p>Setter 方法注入的方式是目前 Spring 主流的注入方式，它可以利用 Java Bean 规范所定义的 Setter/Getter 方法来完成注入，可读性和灵活性都很高，它不需要使用声明式构造方法，而是使用 Setter 注入直接设置相关的值，实现示例如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.beans.Person<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="③-接口注入"><a href="#③-接口注入" class="headerlink" title="③ 接口注入"></a><strong>③ 接口注入</strong></h6><p>接口注入方式是比较古老的注入方式，因为它需要被依赖的对象实现不必要的接口，带有侵入性，因此现在已经被完全舍弃了，所以本文也不打算做过多的描述，大家只要知道有这回事就行了。</p><h5 id="3-Spring-AOP"><a href="#3-Spring-AOP" class="headerlink" title="3.Spring AOP"></a><strong>3.Spring AOP</strong></h5><p>AOP（Aspect-OrientedProgramming，面向切面编程）可以说是 OOP（Object-Oriented Programing，面向对象编程）的补充和完善，OOP 引入封装、继承和多态性等概念来建立一种公共对象处理的能力，当我们需要处理公共行为的时候，OOP 就会显得无能为力，而 AOP 的出现正好解决了这个问题。比如统一的日志处理模块、授权验证模块等都可以使用 AOP 很轻松的处理。</p><p>Spring AOP 目前提供了三种配置方式：</p><ul><li>基于 Java API 的方式；</li><li>基于 @AspectJ（Java）注解的方式；</li><li>基于 XML <aop> 标签的方式。</aop></li></ul><h6 id="①-基于-Java-API-的方式"><a href="#①-基于-Java-API-的方式" class="headerlink" title="① 基于 Java API 的方式"></a><strong>① 基于 Java API 的方式</strong></h6><p>此配置方式需要实现相关的接口，例如 MethodBeforeAdvice 和 AfterReturningAdvice，并且在 XML 配置中定义相应的规则即可实现。</p><p>我们先来定义一个实体类，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">findPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"JDK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"findPerson 被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> person<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token comment">// 忽略 Getter、Setter 方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再定义一个 advice 类，用于对拦截方法的调用之前和调用之后进行相关的业务处理，实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">AfterReturningAdvice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span></span><span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">,</span> <span class="token class-name">AfterReturningAdvice</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备执行方法: "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token class-name">Object</span> returnValue<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 方法执行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后需要在 application.xml 文件中配置相应的拦截规则，配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 定义 advisor --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.advice.MyAdvice<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 配置规则，拦截方法名称为 find* --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.aop.support.RegexpMethodPointcutAdvisor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>advice<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myAdvice<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.beans.*.find.*<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 定义 DefaultAdvisorAutoProxyCreator 使所有的 advisor 配置自动生效 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上配置中可以看出，我们需要配置一个拦截方法的规则，然后定义一个 DefaultAdvisorAutoProxyCreator 让所有的 advisor 配置自动生效。</p><p>最后，我们使用测试代码来完成调用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath*:application.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Person</span> person <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      person<span class="token punctuation">.</span><span class="token function">findPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">准备执行方法<span class="token operator">:</span> findPersonfindPerson 被执行findPerson 方法执行结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看出 AOP 的拦截已经成功了。</p><h6 id="②-基于-AspectJ-注解的方式"><a href="#②-基于-AspectJ-注解的方式" class="headerlink" title="② 基于 @AspectJ 注解的方式"></a><strong>② 基于 @AspectJ 注解的方式</strong></h6><p>首先需要在项目中添加 aspectjweaver 的 jar 包，配置如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>aspectj<span class="token operator">/</span>aspectjweaver <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>aspectj<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.9</span><span class="token number">.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此 jar 包来自于 AspectJ，因为 Spring 使用了 AspectJ 提供的一些注解，因此需要添加此 jar 包。之后，我们需要开启 @AspectJ 的注解，开启方式有两种。</p><p>可以在 application.xml 配置如下代码中开启 @AspectJ 的注解：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以使用 @EnableAspectJAutoProxy 注解开启，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之后我们需要声明拦截器的类和拦截方法，以及配置相应的拦截规则，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">After</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Before</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspectJ</span> <span class="token punctuation">{</span>   <span class="token comment">// 配置拦截类 Person</span>   <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* org.springframework.beans.Person.*(..))"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 doBefore 方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 doAfter 方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们只需要在 application.xml 配置中添加注解类，配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.advice.MyAspectJ<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>紧接着，我们添加一个需要拦截的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans</span><span class="token punctuation">;</span><span class="token comment">// 需要拦截的 Bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">findPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"JDK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 findPerson 方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> person<span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token comment">// 获取其他方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，我们开启测试代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath*:application.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Person</span> person <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      person<span class="token punctuation">.</span><span class="token function">findPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">执行 doBefore 方法执行 findPerson 方法执行 doAfter 方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看出 AOP 拦截成功了。</p><h6 id="③-基于-XML-标签的方式"><a href="#③-基于-XML-标签的方式" class="headerlink" title="③ 基于 XML  标签的方式"></a><strong>③ 基于 XML <aop> 标签的方式</aop></strong></h6><p>基于 XML 的方式与基于注解的方式类似，只是无需使用注解，把相关信息配置到 application.xml 中即可，配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 拦截处理类 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.advice.MyPointcut<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 拦截规则配置 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcutConfig<span class="token punctuation">"</span></span>                    <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* org.springframework.beans.Person.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 拦截方法配置 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doBefore<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcutConfig<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doAfter<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcutConfig<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后，添加一个普通的类来进行拦截业务的处理，实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPointcut</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 doBefore 方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 doAfter 方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拦截的方法和测试代码与第二种注解的方式相同，这里就不在赘述。</p><p>最后执行程序，执行结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">执行 doBefore 方法执行 findPerson 方法执行 doAfter 方法可以看出 AOP 拦截成功了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Spring AOP 的原理其实很简单，它其实就是一个动态代理，我们在调用 getBean() 方法的时候返回的其实是代理类的实例，而这个代理类在 Spring 中使用的是 JDK Proxy 或 CgLib 实现的，它的核心代码在 DefaultAopProxyFactory#createAopProxy(…) 中，源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAopProxyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AopProxyFactory</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">AopProxy</span> <span class="token function">createAopProxy</span><span class="token punctuation">(</span><span class="token class-name">AdvisedSupport</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AopConfigException</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> config<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasNoUserSuppliedProxyInterfaces</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"TargetSource cannot determine target class: "</span> <span class="token operator">+</span><span class="token string">"Either an interface or a target is required for proxy creation."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment">// 判断目标类是否为接口</span><span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 是接口使用 jdk 的代理</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment">// 其他情况使用 CgLib 代理</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjenesisCglibAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 忽略其他代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h4><hr><p>本文章讲了 IoC 和 DI 概念，以及 IoC 的优势和 IoC 注入的三种方式：构造方法注入、Setter 注入和接口注入，最后讲了 Spring AOP 的概念与它的三种配置方式：基于 Java API 的方式、基于 Java 注解的方式和基于 XML 标签的方式。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热门框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客yilia主题-更换主题</title>
      <link href="2020/09/06/hexo-bo-ke-yilia-zhu-ti-geng-huan-zhu-ti/"/>
      <url>2020/09/06/hexo-bo-ke-yilia-zhu-ti-geng-huan-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo的yilia-plus主题"><a href="#Hexo的yilia-plus主题" class="headerlink" title="Hexo的yilia-plus主题"></a>Hexo的yilia-plus主题</h3><h4 id="yilia-plus"><a href="#yilia-plus" class="headerlink" title="yilia-plus"></a>yilia-plus</h4><blockquote><p>一个简洁优雅的hexo主题 ➡️ <a href="https://gitee.com/nate-lin/yilia-plus">https://gitee.com/nate-lin/yilia-plus</a></p><a id="more"></a><p>此项目是根据<a href="https://github.com/litten/hexo-theme-yilia">hexo-theme-yilia</a>主题做了一些优化和改动，写这个项目的初衷就是深入学习<code>Hexo</code>。使用<code>yilia</code>主题可以快速迁移到<code>yilia-plus</code></p></blockquote><blockquote><p><strong>欢迎使用和Star支持，如使用过程中碰到问题，可以提出Issue，我会尽力完善</strong></p></blockquote><h4 id="关于yilia-plus主题在原基础上做了以下功能升级"><a href="#关于yilia-plus主题在原基础上做了以下功能升级" class="headerlink" title="关于yilia-plus主题在原基础上做了以下功能升级"></a>关于<a href="https://gitee.com/nate-lin/yilia-plus">yilia-plus</a>主题在原基础上做了以下功能升级</h4><ol><li>手机端头像添加主页跳转链接</li><li>集成不蒜子访问量统计功能</li><li>网易云音乐插件</li><li>页面点击小红心效果</li><li>增加了多个SubNav导航图标展示</li><li>添加GitHub Ribbons(Fork me)</li><li>页脚 Litten自定义(弃用)</li><li>添加版权声明</li><li>添加百度站长平台主动推送</li><li>集成码云评论</li><li>添加网站成立年份</li><li>页面加载进度条</li><li>添加苹果图标</li><li>标签页标题切换功能</li><li>添加字数统计功能</li><li>添加文字输入特效</li><li>友情链接优化展示</li><li>左侧边栏动态图效果、左侧导航栏支持滚动</li><li>添加悬停预览图片效果</li><li>其他样式轻微调优、社交图标优化</li><li>优化配置是否在新窗口打开链接</li><li><a href="https://github.com/JoeyBling/hexo-theme-yilia-plus/wiki/fix-bugs-record%EF%BC%88%E4%BF%AE%E5%A4%8Dbug%E8%AE%B0%E5%BD%95%EF%BC%89">fix bugs</a></li><li><a href="https://github.com/JoeyBling/live2d-widget.js">添加看板娘动态模型插件</a></li><li>添加飘雪特效</li><li>自定义文章版权声明文本</li></ol><ul><li><h3 id="一款简洁优雅的hexo主题：yilia-plus"><a href="#一款简洁优雅的hexo主题：yilia-plus" class="headerlink" title="一款简洁优雅的hexo主题：yilia-plus"></a>一款简洁优雅的hexo主题：<a href="https://gitee.com/nate-lin/yilia-plus">yilia-plus</a></h3></li></ul><blockquote><p>如果有小伙伴有新功能的意见或者改进欢迎给我提意见和建议~</p></blockquote><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>功能还很少，欢迎各位给我提意见和建议~</li><li><strong>本项目源于：<a href="https://github.com/litten/hexo-theme-yilia%E3%80%82%E5%90%91%E4%BD%9C%E8%80%85%E8%A1%A8%E7%A4%BA%E6%B7%B1%E6%B7%B1%E7%9A%84%E6%95%AC%E6%84%8F%E3%80%82">https://github.com/litten/hexo-theme-yilia。向作者表示深深的敬意。</a></strong></li></ul><p>[yilia-plus] 是为 <a href="https://github.com/hexojs/hexo">hexo</a> 2.4+制作的主题。<br>崇尚简约优雅，以及极致的性能。 你可以点击 <a href="https://nate-lin.gitee.io/">我的博客</a> 查看效果。</p><hr><h3 id="关于主题："><a href="#关于主题：" class="headerlink" title="关于主题："></a>关于主题：</h3><ol><li>崇尚简约</li><li>追求移动端体验</li><li>希望把加载速度做到极致（努力中）</li><li>让大家把注意力放到内容上。这是本主题设计初衷</li><li>主题不支持IE6，7，8。以后也不会</li></ol><h3 id="一、外观"><a href="#一、外观" class="headerlink" title="一、外观"></a>一、外观</h3><h4 id="常规"><a href="#常规" class="headerlink" title="常规"></a><strong>常规</strong></h4><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200826115424063.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200826115530390.png"></p><h3 id="二、开发者"><a href="#二、开发者" class="headerlink" title="二、开发者"></a>二、开发者</h3><p>  为了性能和开发工程化考虑，[yilia-plus]需要使用<code>webpack</code>进行构建生成。<br>  如果您对主题有一些定制化的需求，请参考wiki<a href="https://github.com/JoeyBling/hexo-theme-yilia-plus/wiki/yilia-plus%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA%E9%A1%BB%E7%9F%A5">《yilia-plus源码目录结构及构建须知》</a></p><h3 id="三、开始使用"><a href="#三、开始使用" class="headerlink" title="三、开始使用"></a>三、开始使用</h3><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><pre class="line-numbers language-none"><code class="language-none">cd ./themes/git clone https://gitee.com/nate-lin/yilia-plus.gitmv yilia-plus yilia-plus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200826135941293.png"></p><h4 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h4><p>修改hexo根目录下的 <code>_config.yml</code> ➡️ <code>theme: yilia-plus</code></p><h4 id="3、更新"><a href="#3、更新" class="headerlink" title="3、更新"></a>3、更新</h4><pre class="line-numbers language-none"><code class="language-none">cd themes/yilia-plusgit pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h3><p>  主题配置文件在主目录下的<code>_config.yml</code>，请根据自己需要修改使用。</p><blockquote><p>完整配置例子，可以参考<a href="https://gitee.com/nate-lin/yilia-plus">yilia-plus博客备份</a></p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Header-菜单</span><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">主页</span><span class="token punctuation">:</span> /  <span class="token key atrule">归档</span><span class="token punctuation">:</span> /archives  <span class="token key atrule">标签</span><span class="token punctuation">:</span> /tags  <span class="token key atrule">分类</span><span class="token punctuation">:</span> /categories  <span class="token comment"># subNav-子导航</span><span class="token key atrule">subNav</span><span class="token punctuation">:</span>   <span class="token key atrule">gitee</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/nate<span class="token punctuation">-</span>lin <span class="token comment"># 码云</span>  <span class="token key atrule">github</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/nate<span class="token punctuation">-</span>lin  <span class="token comment">#jianshu: "#" #简书</span>  <span class="token comment">#cnblog: "#"</span>  <span class="token comment">#blog: "#"</span>  <span class="token comment">#csdn: "#"</span>  <span class="token comment">#rss: "#"</span>  <span class="token comment">#zhihu: "#"</span>  <span class="token key atrule">qq</span><span class="token punctuation">:</span> <span class="token string">"/img/QQ.jpg"</span>  <span class="token key atrule">weixin</span><span class="token punctuation">:</span> <span class="token string">"/img/WeChat.jpg"</span>  <span class="token comment">#weibo: "#"</span>  <span class="token comment">#douban: "#"</span>  <span class="token comment">#segmentfault: "#"</span>  <span class="token comment">#bilibili: "#"</span>  <span class="token comment">#acfun: "#"</span>  <span class="token key atrule">mail</span><span class="token punctuation">:</span> <span class="token string">"mailto:linchunyan335@163.com"</span>  <span class="token comment">#facebook: "#"</span>  <span class="token comment">#google: "#"</span>  <span class="token comment">#twitter: "#"</span>  <span class="token comment">#linkedin: "#"</span><span class="token comment"># 悬停预览图片效果</span><span class="token key atrule">hover_effect</span><span class="token punctuation">:</span>  <span class="token comment">## `global` 0: Set separately, 1: Enable global 2: Close global</span>  <span class="token comment">## `global` 0: 分开设置, 1: 全局启用, 2: 全局关闭</span>  <span class="token key atrule">global</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token comment"># SubNav-导航</span>  <span class="token key atrule">subNav</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># RSS订阅(关于如何配置启用:https://www.jianshu.com/p/2aaac7a19736)</span><span class="token key atrule">rss</span><span class="token punctuation">:</span> /atom.xml<span class="token comment"># 是否需要修改 root 路径</span><span class="token comment"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</span><span class="token comment"># 请将您的 url 设为 http://yoursite.com/blog 并把 / 设为 /blog/。</span><span class="token comment"># 新版本已弃用，请在博客根目录文件进行配置</span><span class="token comment"># root: /</span><span class="token comment"># Content</span><span class="token comment"># 文章太长，截断按钮文字（&lt;!-- more --&gt;）</span><span class="token key atrule">excerpt_link</span><span class="token punctuation">:</span> more<span class="token comment"># 文章卡片右下角常驻链接，不需要请设置为false</span><span class="token key atrule">show_all_link</span><span class="token punctuation">:</span> <span class="token string">'展开全文'</span><span class="token comment"># 数学公式</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># Open link in a new tab | 是否在新窗口打开链接</span><span class="token key atrule">open_in_new</span><span class="token punctuation">:</span>  <span class="token key atrule">article</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 文章链接</span>  <span class="token key atrule">menu</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment"># 导航菜单</span>  <span class="token key atrule">subNav</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 子菜单</span><span class="token comment"># 打赏</span><span class="token comment"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</span><span class="token key atrule">reward_type</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token comment"># 打赏wording</span><span class="token key atrule">reward_wording</span><span class="token punctuation">:</span> <span class="token string">'谢谢你请我吃糖果'</span><span class="token comment"># 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</span><span class="token key atrule">alipay</span><span class="token punctuation">:</span> /img/alipay.jpg<span class="token comment"># 微信二维码图片地址</span><span class="token key atrule">weixin</span><span class="token punctuation">:</span> /img/weixin.jpg<span class="token comment"># 目录</span><span class="token comment"># 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录</span><span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token comment"># 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为false</span><span class="token key atrule">toc_hide_index</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 目录为空时的提示</span><span class="token key atrule">toc_empty_wording</span><span class="token punctuation">:</span> <span class="token string">'目录，不存在的…'</span><span class="token comment"># 是否有快速回到顶部的按钮</span><span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># Miscellaneous</span><span class="token comment"># 百度统计</span><span class="token key atrule">baidu_analytics</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">google_analytics</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token comment"># 网站图标</span><span class="token key atrule">favicon</span><span class="token punctuation">:</span> /img/avatar.jpg<span class="token comment"># 你的头像url</span><span class="token key atrule">avatar</span><span class="token punctuation">:</span> /img/avatar.jpg<span class="token comment"># 是否开启分享</span><span class="token key atrule">share_jia</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 评论：1、畅言；2、Disqus；3、Gitment；4、Giteement</span><span class="token comment"># 不需要使用某项，直接设置值为false，或注释掉</span><span class="token comment"># 具体请参考wiki：https://github.com/JoeyBling/hexo-theme-yilia-plus/wiki</span><span class="token comment"># 1、畅言</span><span class="token key atrule">changyan_appid</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">changyan_conf</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 2、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia-plus的</span><span class="token key atrule">disqus</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 3、Gitment----基于GitHub的评论系统(关闭请设置gitment_owner为false)(评论方法一)</span><span class="token comment"># 关于如何集成:https://www.jianshu.com/p/ac7658cc912f</span><span class="token comment">#gitment_owner: nate-lin      #你的 GitHub ID</span><span class="token comment"># 是否使用官方js(false可以提升访问速度，本地修改过一部分的js，官方js可能会出现服务器不稳定，不太建议使用)</span><span class="token comment">#gitment_remote: false</span><span class="token comment">#gitment_repo: 'nate-lin-demo'          #存储评论的 repo name(需要在Github创建)</span><span class="token comment">#gitment_oauth:</span><span class="token comment">#  client_id: '9838a282b077c4c58db1'           #client ID</span><span class="token comment">#  client_secret: 'b1d7cfecdcb40c2ec59a9834617c72022f29d4cb'       #client secret</span><span class="token comment"># 4、Giteement----【国内用户建议使用这个，相对比较快】(评论方法二)</span><span class="token comment"># 关于如何集成:https://www.jianshu.com/p/f5c4633524c7</span><span class="token comment"># 基于码云的评论系统(https://gitee.com/zhousiwei/giteement)</span><span class="token key atrule">giteement</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 是否启用码云评论系统</span>  <span class="token comment"># 是否使用官方js(false可以提升访问速度)</span>  <span class="token key atrule">remote</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">redirect_uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//nate<span class="token punctuation">-</span>lin.gitee.io   <span class="token comment"># 应用回调地址(请和配置的第三方应用保持一致)</span>  <span class="token comment"># 不能更改(网上开源项目`https://github.com/Rob--W/cors-anywhere`作者提供的专门用来跨域服务器的配置)</span>  <span class="token key atrule">oauth_uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cors<span class="token punctuation">-</span>anywhere.herokuapp.com/https<span class="token punctuation">:</span>//gitee.com/oauth/token  <span class="token key atrule">giteeID</span><span class="token punctuation">:</span> <span class="token string">'nate-lin'</span>  <span class="token comment"># 你的码云账号英文名</span>  <span class="token comment"># 存储评论的 repo name(需要在码云仓库创建公开仓库)</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> nate<span class="token punctuation">-</span>lin<span class="token punctuation">-</span>demo  <span class="token key atrule">gitment_oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">client_id</span><span class="token punctuation">:</span> <span class="token string">'64c0b881e365f8ebd86a99076e36df032652efe873838e962550e7328a85600b'</span>           <span class="token comment">#client ID</span>    <span class="token key atrule">client_secret</span><span class="token punctuation">:</span> <span class="token string">'3710b8f7c65e571c19e1a24bf46e8f7c0ec8ca6fcc4f8a47a4ab97c7951a9927'</span>       <span class="token comment">#client secret</span><span class="token comment"># 访问量统计功能(不蒜子)</span><span class="token key atrule">busuanzi</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">site_visit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 站点访问量显示</span>  <span class="token key atrule">article_visit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 文章访问量显示</span><span class="token comment"># 网易云音乐插件</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 播放器尺寸类型(1：长尺寸、2：短尺寸)</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token comment">#id: 1334445174  # 网易云分享的音乐ID(更换音乐请更改此配置项)</span>  <span class="token key atrule">autoPlay</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 是否开启自动播放</span>  <span class="token comment"># 提示文本(关闭请设置为false)</span>  <span class="token key atrule">text</span><span class="token punctuation">:</span> <span class="token string">'这似乎是首纯音乐，请尽情的欣赏它吧！'</span><span class="token comment"># 页面点击小红心</span><span class="token key atrule">clickLove</span><span class="token punctuation">:</span>  <span class="token comment"># (关闭请设置为false)</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># GitHub Ribbons(https://github.blog/2008-12-19-github-ribbons/)</span><span class="token key atrule">github</span><span class="token punctuation">:</span>  <span class="token comment"># (关闭请设置为false)(右上角链接)</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/nate<span class="token punctuation">-</span>lin<span class="token comment"># 页脚 Litten(此配置项已弃用)</span><span class="token comment"># 帮助我们让更多人可以更方便使用Hexo，请尽量不要修改此主题配置</span><span class="token key atrule">pageFooter</span><span class="token punctuation">:</span>  <span class="token key atrule">litten</span><span class="token punctuation">:</span> GitHub<span class="token punctuation">:</span>&lt;a href="https<span class="token punctuation">:</span>//github.com/JoeyBling/hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>yilia<span class="token punctuation">-</span>plus" target="_blank"<span class="token punctuation">&gt;</span>hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>yilia<span class="token punctuation">-</span>plus&lt;/a<span class="token punctuation">&gt;</span><span class="token comment"># 开启百度站长平台自动推送(https://ziyuan.baidu.com/linksubmit/index)</span><span class="token key atrule">baidu_push</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 版权声明</span><span class="token comment"># 版权声明type设定：0-关闭版权声明； 1-文章对应的md文件里有copyright: true属性，才有版权声明； 2-所有文章均有版权声明</span><span class="token key atrule">copyright_type</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token comment"># 版权声明自定义文本(关闭请设置为false)</span><span class="token key atrule">copyright_text</span><span class="token punctuation">:</span> <span class="token comment"># 网站成立年份(默认为 2018，若填入年份小于当前年份，则显示为 2018-2019 类似的格式)</span><span class="token key atrule">since</span><span class="token punctuation">:</span> <span class="token number">2020</span><span class="token comment"># Progress Bar | 页面加载进度条</span><span class="token comment"># Demo: http://github.hubspot.com/pace/docs/welcome/</span><span class="token comment"># type: barber-shop|big-counter|bounce|center-atom|center-circle|</span><span class="token comment">#       center-radar|center-simple|corner-indicator|flash|flat-top|</span><span class="token comment">#       loading-bar|mac-osx|minimal</span><span class="token comment"># color: black|blue|green|orange|pink|purple|red|silver|white|yellow|</span><span class="token key atrule">progressBar</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">'minimal'</span>  <span class="token comment"># Keep Quotes | 保留引号避免出错(某些type会导致样式重叠排版错误)</span>  <span class="token key atrule">color</span><span class="token punctuation">:</span> blue<span class="token comment"># Apple Touch icon 苹果图标(关闭请设置为false)</span><span class="token key atrule">apple_touch_icon</span><span class="token punctuation">:</span> <span class="token string">'/apple-touch-icon-180x180.png'</span><span class="token comment"># Tab Title Change | 标签页标题切换</span><span class="token key atrule">tab_title_change</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">left_tab_title</span><span class="token punctuation">:</span> <span class="token string">'(つェ⊂) 我藏好了哦~ '</span>  <span class="token key atrule">return_tab_title</span><span class="token punctuation">:</span> <span class="token string">'(*´∇｀*) 被你发现啦~ '</span><span class="token comment"># https://github.com/willin/hexo-wordcount</span><span class="token comment"># 是否开启字数统计(关闭请设置enable为false)</span><span class="token comment"># 也可以单独在md文件里Front-matter设置`no_word_count: true`属性，来自定义关闭字数统计</span><span class="token key atrule">word_count</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 只在文章详情显示(不在首页显示)</span>  <span class="token key atrule">only_article_visit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 文字输入特效</span><span class="token comment"># https://github.com/disjukr/activate-power-mode</span><span class="token key atrule">activate_power_mode</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 使输入模式丰富多彩</span>  <span class="token key atrule">colorful</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 是否开启摇动</span>  <span class="token key atrule">shake</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 飘雪特效</span><span class="token comment"># https://github.com/MlgmXyysd/snow.js</span><span class="token key atrule">snow</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 看板娘动态模型插件</span><span class="token comment">## https://github.com/JoeyBling/live2d-widget.js</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token comment"># (关闭请设置为false)</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 模型名称(取值请参考：https://github.com/JoeyBling/hexo-theme-yilia-plus/wiki/live2d%E6%A8%A1%E5%9E%8B%E5%8C%85%E5%B1%95%E7%A4%BA)</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span> hibiki  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> right <span class="token comment"># 显示位置：left/right(default: 'right')</span>    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">145</span>  <span class="token comment"># 模型的长度(default: 150)</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">315</span> <span class="token comment"># 模型的高度(default: 300)</span>    <span class="token key atrule">hOffset</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 水平偏移(default: 0)</span>    <span class="token key atrule">vOffset</span><span class="token punctuation">:</span> <span class="token number">-20</span> <span class="token comment"># 垂直偏移(default: -20)</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否在移动设备上显示(default: true)</span>    <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">0.6</span> <span class="token comment"># 移动设备上的缩放(default: 0.5)</span>  <span class="token key atrule">react</span><span class="token punctuation">:</span>    <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span> <span class="token comment"># 模型透明度(default: 0.7)</span><span class="token comment"># 样式定制 - 一般不需要修改，除非有很强的定制欲望…</span><span class="token key atrule">style</span><span class="token punctuation">:</span>  <span class="token comment"># 头像上面的背景颜色</span>  <span class="token comment"># header: '#D3D1DC'</span>  <span class="token key atrule">header</span><span class="token punctuation">:</span> <span class="token string">'#0099CC'</span>  <span class="token comment">#'#4d4d4d'</span>    <span class="token key atrule">gif</span><span class="token punctuation">:</span>    <span class="token comment"># 是否启用左侧边栏动态图效果</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 自定义背景图路径(默认可以不设置，提供默认背景图)</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /img/biubiubiu.gif  <span class="token comment"># 右滑板块背景</span>  <span class="token key atrule">slider</span><span class="token punctuation">:</span> <span class="token string">'linear-gradient(200deg,#0099CC,#e8c37e)'</span>  <span class="token comment">#'linear-gradient(200deg,#a0cfe4,#e8c37e)'</span><span class="token comment"># slider的设置</span><span class="token key atrule">slider</span><span class="token punctuation">:</span>  <span class="token comment"># 是否默认展开tags板块</span>  <span class="token key atrule">showTags</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 智能菜单</span><span class="token comment"># 如不需要，将该对应项置为false</span><span class="token comment"># 比如</span><span class="token comment">#smart_menu:</span><span class="token comment">#  friends: false</span><span class="token key atrule">smart_menu</span><span class="token punctuation">:</span>  <span class="token key atrule">innerArchive</span><span class="token punctuation">:</span> <span class="token string">'所有文章'</span>  <span class="token key atrule">friends</span><span class="token punctuation">:</span> <span class="token string">'友链'</span>  <span class="token key atrule">aboutme</span><span class="token punctuation">:</span> <span class="token string">'关于我'</span><span class="token comment"># 友情链接</span><span class="token key atrule">friends</span><span class="token punctuation">:</span>  <span class="token key atrule">技术笔记</span><span class="token punctuation">:</span>  <span class="token comment">#网站名称</span>    <span class="token comment">#网站地址</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//nate<span class="token punctuation">-</span>lin.gitee.io/categories/%E7%AC%94%E8%AE%B0//    <span class="token comment">#网站图片(可忽略不写)</span>    <span class="token key atrule">img</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog<span class="token punctuation">-</span>lin1.oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>shenzhen.aliyuncs.com/img/avatar.jpg    <span class="token comment">#网站简介(可忽略不写)</span>    <span class="token key atrule">description</span><span class="token punctuation">:</span> 记录工作和学习过程中的笔记：Java、前端开发、Hexo博客、聚合支付、Linux笔记、ElasticSearch、ELK日志分析  <span class="token key atrule">码云</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/nate<span class="token punctuation">-</span>lin  <span class="token key atrule">GitHub</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/nate<span class="token punctuation">-</span>lin  <span class="token comment">#简书:</span>  <span class="token comment">#  url: https://www.jianshu.com/u/02cbf31a043a</span>  <span class="token comment">#CSDN:</span>  <span class="token comment">#  url: https://blog.csdn.net/qq_30930805</span>  <span class="token key atrule">浅悦</span><span class="token punctuation">:</span>     <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//nate<span class="token punctuation">-</span>lin.gitee.io  <span class="token key atrule">千羽</span><span class="token punctuation">:</span>     <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//nateshao.gitee.io  <span class="token key atrule">mayor</span><span class="token punctuation">:</span>     <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//uxiu.info/  <span class="token key atrule">試毅-思伟</span><span class="token punctuation">:</span>     <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//zhousiwei.gitee.io/  <span class="token comment"># 关于我</span><span class="token key atrule">aboutme</span><span class="token punctuation">:</span> 👋👋关于浅悦&lt;br<span class="token punctuation">&gt;</span>🌱浅悦是阁主（林春燕）的个人站。&lt;br<span class="token punctuation">&gt;</span>🔭QQ<span class="token punctuation">:</span>1724342055&lt;br<span class="token punctuation">&gt;</span>📫微信：LCY5643350216&lt;br<span class="token punctuation">&gt;</span>&lt;br<span class="token punctuation">&gt;</span>😉😉对博客的理解&lt;br<span class="token punctuation">&gt;</span>✨喜欢写Blog的人，会经历三个阶段。&lt;br<span class="token punctuation">&gt;</span>🍌第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。&lt;br<span class="token punctuation">&gt;</span>🌋第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。&lt;br<span class="token punctuation">&gt;</span>💬第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。&lt;br<span class="token punctuation">&gt;</span>&lt;br<span class="token punctuation">&gt;</span>😄😄Why Blog&lt;br<span class="token punctuation">&gt;</span>🚥我们每个人的在网络上产生的数据越来越多，这些信息是我们在互联网上存在过的痕迹，值得我们认真对待。但是它们被分散分布在各个网站上。很多时候我们很难将它们聚合在一起，而且各个网站的信息排布方式也没有办法自由控制，所以我们需要一个可以由自己主宰的空间——博客。&lt;br<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="码云封面人物是一档用来展示码云会员风采的栏目-https-gitee-com-gitee-stars"><a href="#码云封面人物是一档用来展示码云会员风采的栏目-https-gitee-com-gitee-stars" class="headerlink" title="码云封面人物是一档用来展示码云会员风采的栏目 https://gitee.com/gitee-stars/"></a>码云封面人物是一档用来展示码云会员风采的栏目 <a href="https://gitee.com/gitee-stars/">https://gitee.com/gitee-stars/</a></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;此项目是根据<a href="https://github.com/litten/hexo-theme-yilia">hexo-theme-yilia</a>主题做了一些优化和改动，写这个项目的初衷就是深入学习<code>Hexo</code>。使用<code>yilia</code>主题可以快速迁移到<code>yilia-plus</code></p><h4 id="立即体验"><a href="#立即体验" class="headerlink" title="立即体验"></a><a href="#%E4%B8%89%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8">立即体验</a></h4><h4 id="项目支持"><a href="#项目支持" class="headerlink" title="项目支持"></a><a href="#%E5%85%B6%E5%AE%83%E9%A1%B9%E7%9B%AE%E6%94%AF%E6%8C%81">项目支持</a></h4><blockquote><p><strong>欢迎使用和Star支持，如使用过程中碰到问题，可以提出Issue，我会尽力完善</strong></p></blockquote><blockquote><p><strong>同时也欢迎相同爱好者加入一起维护此项目</strong></p></blockquote><p>参考于：<a href="https://zhousiwei.gitee.io/2019/07/25/hexo%E4%B8%BB%E9%A2%98%E4%B9%8Bhexo-theme-yilia-plus/">https://zhousiwei.gitee.io/2019/07/25/hexo%E4%B8%BB%E9%A2%98%E4%B9%8Bhexo-theme-yilia-plus/</a></p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客yilia主题-分类管理</title>
      <link href="2020/09/06/hexo-bo-ke-yilia-zhu-ti-fen-lei-guan-li/"/>
      <url>2020/09/06/hexo-bo-ke-yilia-zhu-ti-fen-lei-guan-li/</url>
      
        <content type="html"><![CDATA[<p>本文主要讲述 <code>Hexo-yilia</code> 主题对于文章的分类和标签方面的配置。</p><h2 id="1-插件安装"><a href="#1-插件安装" class="headerlink" title="1.插件安装"></a>1.插件安装</h2><blockquote><p>安装云标签：</p><a id="more"></a></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-tag-cloud@^2.0.* --save <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200910234136187.png"></p><h2 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2.基本配置"></a>2.基本配置</h2><p>在主题配置文件 <code>_config.yml</code> 中，添加：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">主页</span><span class="token punctuation">:</span> /  <span class="token key atrule">标签</span><span class="token punctuation">:</span> /tags  <span class="token key atrule">分类</span><span class="token punctuation">:</span> /categories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-构建"><a href="#3-构建" class="headerlink" title="3. 构建"></a>3. 构建</h2><h3 id="3-1-分类"><a href="#3-1-分类" class="headerlink" title="3.1.分类"></a>3.1.分类</h3><ul><li>打开 <code>DOS</code> 窗口或 <code>git bash</code>，输入以下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">'categories'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>打开 <code>source\categories\index.md</code> 文件，修改如下：</li></ul><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">---title: 分类date: 2020-02-14 22:18:16type: categorieslayout: "categories"toc: falsecomments: false---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-标签"><a href="#3-2-标签" class="headerlink" title="3.2.标签"></a>3.2.标签</h3><ul><li>同样，输入：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">'tags'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>打开 <code>source\tags\index.md</code> 文件，修改如下：</li></ul><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">---title: 标签date: 2020-02-14 22:20:43type: tagslayout: "tags"comments: false---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构建分类和标签的具体位置如下图：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201201221930372.png"></p><h2 id="4-页面配置"><a href="#4-页面配置" class="headerlink" title="4.页面配置"></a>4.页面配置</h2><ul><li>打开 <code>scaffolds/</code> 目录下的 <code>post.md</code> 文件，添加：</li></ul><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">toc: true   tags: {{ tags }}categories:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="方式一：组合配置"><a href="#方式一：组合配置" class="headerlink" title="方式一：组合配置"></a>方式一：组合配置</h3><ul><li><p><strong>方法1：修改文件 <code>article.ejs</code></strong></p><p><strong>功能：<code>分类</code>和<code>标签</code>分别显示</strong></p><p><code>标签</code>效果如下：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201201220855454.png"></p><p><code>分类</code>效果如下：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20201201221103645.png"></p></li></ul><p>在文件 <code>themes\yilia-plus\layout\_partial\article.ejs</code> 中，找到 <code>class="article-entry"</code>，添加：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (page.path === "tags/index.html"){ %&gt;    <span class="token comment">&lt;!-- 这里也可用type去判断，放在tags标签页 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        &lt;%- tagcloud({            min_font: 16,             max_font: 35,             amount: 999,             color: true,             start_color: 'blue',             end_color: 'gray',        }) %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 这里也可以放进css文件中，这样阅读性好些 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">               <span class="token selector">.article-entry ul li:before</span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">.tags</span> <span class="token punctuation">{</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 40em<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 2em auto<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 0em<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.tags a</span> <span class="token punctuation">{</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 65px<span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.tags a:hover</span> <span class="token punctuation">{</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 2px solid green<span class="token punctuation">;</span>            <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #22323a<span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;&lt;% if (page.path === "categories/index.html"){ %&gt;    <span class="token comment">&lt;!-- 这里也可用type去判断，categories分类页 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    &lt;%- list_categories({        depth: 1,    }) %&gt;    <span class="token comment">&lt;!-- 这里也可以放进css文件中，这样阅读性好些 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.category-list li</span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 2em .9em 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 11px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #caca1e<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2em<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.category-list a</span> <span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.category-list-item</span> <span class="token punctuation">{</span>          <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>15 239 17<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token property">border-radius</span><span class="token punctuation">:</span> 15%<span class="token punctuation">;</span>          <span class="token property">opacity</span><span class="token punctuation">:</span>0.5<span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token selector">.category-list-item:hover a</span> <span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> #c16431<span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.category-list-count</span> <span class="token punctuation">{</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> .9em<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                          <span class="token selector">.article-entry ul li:before</span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>方法2：修改文件 <code>article.ejs</code></strong></li></ul><p>在文件 <code>themes\yilia-plus\layout\_partial\article.ejs</code> 中，找到 <code>class="article-entry"</code>，添加：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (page.path === "tags/index.html"){ %&gt;    <span class="token comment">&lt;!-- 这里也可用type去判断，放在tags标签页或者categories分类页都可以 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    &lt;%- list_categories({        depth: 1,    }) %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        &lt;%- tagcloud({            min_font: 16,             max_font: 35,             amount: 999,             color: true,             start_color: 'blue',             end_color: 'gray',        }) %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 这里也可以放进css文件中，这样阅读性好些 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.category-list li</span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 1em .5em 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid green<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2em<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.category-list a</span> <span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.category-list-item</span> <span class="token punctuation">{</span>          <span class="token property">background-color</span><span class="token punctuation">:</span> #55daff<span class="token punctuation">;</span>          <span class="token property">border-radius</span><span class="token punctuation">:</span> 15%<span class="token punctuation">;</span>          <span class="token property">opacity</span><span class="token punctuation">:</span>0.5<span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token selector">.category-list-item:hover a</span> <span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> #c16431<span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.category-list-count</span> <span class="token punctuation">{</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> .9em<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.article-entry ul li:before</span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token selector">.tags</span> <span class="token punctuation">{</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 40em<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 2em auto<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 0em<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.tags a</span> <span class="token punctuation">{</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 65px<span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.tags a:hover</span> <span class="token punctuation">{</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 2px solid green<span class="token punctuation">;</span>            <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #22323a<span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>方法3：新建文件 <code>tags.ejs</code> 或者 <code>categories.ejs</code></strong></li></ul><p>如果不想在 <code>article.ejs</code> 或分类、标签模板页面中显示，可以在 <code>themes\yilia-plus\layout</code> 目录下，新建文件 <code>tags.ejs</code> 或者 <code>categories.ejs</code>。</p><p>在其中添加如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article article-type-post show<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article-header<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #ccc</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article-title<span class="token punctuation">"</span></span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>分类归档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>center</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rgba(34, 177, 48)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        文章 [&lt;%=site.posts.length%&gt;] <span class="token entity named-entity" title=" ">&amp;emsp;</span><span class="token entity named-entity" title=" ">&amp;emsp;</span>        分类 [&lt;%=site.categories.length%&gt;] <span class="token entity named-entity" title=" ">&amp;emsp;</span><span class="token entity named-entity" title=" ">&amp;emsp;</span>        标签 [&lt;%=site.tags.length%&gt;]      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#228B66<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>&lt;%= page.title %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>  &lt;% if (site.categories.length){ %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>lightyellow</span><span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>共计<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>&lt;%= site.categories.length %&gt;<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>个分类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>      &lt;% site.categories.sort('name').each(function(item){ %&gt;        &lt;% if(item.posts.length){ %&gt;          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-list-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%- config.root %&gt;&lt;%- item.path %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-list-link<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= item.name %&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              &lt;%= item.name %&gt;              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-list-count<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>[&lt;%= item.posts.length %&gt;]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        &lt;% } %&gt;      &lt;% }) %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>  &lt;% } %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#228B22<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>标签云 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>center</span><span class="token punctuation">&gt;</span></span>    &lt;% if (site.tags.length) { %&gt;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>lightyellow</span><span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>共计<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>&lt;%= site.tags.length %&gt;<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>个标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tag-cloud<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        &lt;%- tagcloud({          min_font: 15,           max_font: 25,           amount: 999,          start_color: 'blue',           end_color: 'gray',        }) %&gt;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    &lt;% } %&gt;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，和之前一样，加入css代码就行，无论放在新建文件中还是css文件都可以(可用过路径 <code>themes\yilia-plus\layout\_partial\css.ejs</code> 查看)。</p><h3 id="方式二：分开布局"><a href="#方式二：分开布局" class="headerlink" title="方式二：分开布局"></a>方式二：分开布局</h3><ul><li><strong>方法1：修改文件 <code>article.ejs</code></strong></li></ul><p>在文件 <code>themes\yilia-plus\layout\_partial\article.ejs</code> 中，找到 <code>class="article-entry"</code>，添加：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"tags"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tag-cloud"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tag-cloud-title"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token string">"TOTAl : "</span> <span class="token operator">+</span> site<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tag-cloud-tags"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">tagcloud</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      min_font<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>      max_font<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>      amount<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>      color<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      start_color<span class="token operator">:</span> <span class="token string">'#555'</span><span class="token punctuation">,</span>      end_color<span class="token operator">:</span> <span class="token string">'#111'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'categories'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-all-page"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-all-title"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token string">"TOTAL : "</span> <span class="token operator">+</span> site<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>length <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"category-all"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">list_categories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在样式文件 <code>themes\yilia-plus\source\main.b8fa34.css</code> 中，添加：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.category-all-page</span> <span class="token punctuation">{</span>  <span class="token selector">a:link</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">a:hover</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #d8d<span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.category-all-title</span> <span class="token punctuation">{</span> <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token selector">.category-all</span> <span class="token punctuation">{</span>     <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">.category-list</span> <span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token selector">.category-list-item</span> <span class="token punctuation">{</span>     <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>     <span class="token property">padding</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>237<span class="token punctuation">,</span> 237<span class="token punctuation">,</span> 237<span class="token punctuation">,</span> 0.53<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span>0px 0px  0px 1px #ccc<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token selector">.category-list-link</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token selector">.category-list-count</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token selector">;    &amp;:before</span> <span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" ("</span>    <span class="token punctuation">}</span>    <span class="token selector">&amp;:after</span> <span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">") "</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>   <span class="token selector">.category-list-child</span> <span class="token punctuation">{</span> <span class="token property">padding-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span> <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>方法2：新建文件 <code>tags.ejs</code> 与 <code>categories.ejs</code></strong></li></ul><p>如果不想在 <code>article.ejs</code> 或分类、标签模板页面中显示，可以在 <code>themes\yilia-plus\layout</code> 目录下，新建文件 <code>tags.ejs</code> 与 <code>categories.ejs</code>。</p><p>在 <code>tags.ejs</code> 添加如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article article-type-post show<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article-header<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #ccc</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article-title<span class="token punctuation">"</span></span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>  &lt;% if (site.tags.length) { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tag-cloud<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tag-cloud-title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        &lt;%- "TOTAl : " + site.tags.length %&gt;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tag-cloud-tags<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>         &lt;%- tagcloud({          min_font: 12,          max_font: 30,          amount: 200,          color: true,          start_color: '#555',          end_color: '#111'          }) %&gt;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  &lt;% } %&gt;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>categories.ejs</code> 添加如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article article-type-post show<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article-header<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #ccc</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article-title<span class="token punctuation">"</span></span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>分类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>  &lt;% if (site.categories.length){ %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-all-page<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-all-title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    &lt;%- "TOTAL : " + site.categories.length %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-all<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    &lt;%- list_categories() %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  &lt;% } %&gt;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，和之前一样，加入css代码就行(可用过路径 <code>themes\yilia-plus\layout\_partial\css.ejs</code> 查看)。</p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热门框架1-底层源码分析 Spring 的核心功能和执行流程</title>
      <link href="2020/09/06/re-men-kuang-jia-1-di-ceng-yuan-ma-fen-xi-spring-de-he-xin-gong-neng-he-zhi-xing-liu-cheng/"/>
      <url>2020/09/06/re-men-kuang-jia-1-di-ceng-yuan-ma-fen-xi-spring-de-he-xin-gong-neng-he-zhi-xing-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="底层源码分析-Spring-的核心功能和执行流程"><a href="#底层源码分析-Spring-的核心功能和执行流程" class="headerlink" title="底层源码分析 Spring 的核心功能和执行流程"></a>底层源码分析 Spring 的核心功能和执行流程</h3><ul><li><p>Spring Framework 已是公认的 Java 标配开发框架了，甚至还有人说 Java 编程就是面向 Spring 编程的，可见 Spring 在整个 Java 体系中的重要位置。</p></li><li><p>Spring 中包含了众多的功能和相关模块，比如 spring-core、spring-beans、spring-aop、spring-context、spring-expression、spring-test 等，本文章先从面试中必问的问题出发，来帮你更好的 Spring 框架。</p><a id="more"></a></li></ul><h4 id="我们本文章的面试题是，Spring-Bean-的作用域有哪些？它的注册方式有几种？"><a href="#我们本文章的面试题是，Spring-Bean-的作用域有哪些？它的注册方式有几种？" class="headerlink" title="我们本文章的面试题是，Spring Bean 的作用域有哪些？它的注册方式有几种？"></a>我们本文章的面试题是，Spring Bean 的作用域有哪些？它的注册方式有几种？</h4><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a>典型回答</h4><hr><p>在 Spring 容器中管理一个或多个 Bean，这些 Bean 的定义表示为 BeanDefinition 对象，这些对象包含以下重要信息：</p><ul><li>Bean 的实际实现类</li><li>Bean 的作用范围</li><li>Bean 的引用或者依赖项</li></ul><p>Bean 的注册方式有三种：</p><ul><li>XML 配置文件的注册方式</li><li>Java 注解的注册方式</li><li>Java API 的注册方式</li></ul><h5 id="1-XML-配置文件注册方式"><a href="#1-XML-配置文件注册方式" class="headerlink" title="1.XML 配置文件注册方式"></a><strong>1.XML 配置文件注册方式</strong></h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.beans.Person<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-Java-注解注册方式"><a href="#2-Java-注解注册方式" class="headerlink" title="2.Java 注解注册方式"></a><strong>2.Java 注解注册方式</strong></h5><p>可以使用 @Component 注解方式来注册 Bean，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> name   <span class="token comment">// 忽略其他方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用 @Bean 注解方式来注册 Bean，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> <span class="token class-name">Person</span>  <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>       <span class="token comment">// 忽略其他方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 @Configuration 可理解为 XML 配置里的 <beans> 标签，而 @Bean 可理解为用 XML 配置里面的 <bean> 标签。</bean></beans></p><h5 id="3-Java-API-注册方式"><a href="#3-Java-API-注册方式" class="headerlink" title="3.Java API 注册方式"></a><strong>3.Java API 注册方式</strong></h5><p>使用 BeanDefinitionRegistry.registerBeanDefinition() 方法的方式注册 Bean，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomBeanDefinitionRegistry</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span><span class="token class-name">RootBeanDefinition</span> personBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 新增 Bean</span>registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> personBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bean 的作用域一共有 5 个。</p><p>（1）<strong>singleton 作用域：</strong>表示在 Spring 容器中只有一个 Bean 实例，以单例的形式存在，是默认的 Bean 作用域。</p><p>配置方式，缺省即可，XML 的配置方式如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）<strong>prototype 作用域：</strong>原型作用域，每次调用 Bean 时都会创建一个新实例，也就是说每次调用 getBean() 方法时，相当于执行了 new Bean()。</p><p>XML 的配置方式如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）<strong>request 作用域：</strong>每次 Http 请求时都会创建一个新的 Bean，该作用域仅适应于 WebApplicationContext 环境。</p><p>XML 的配置方式如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>request<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Java 注解的配置方式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>SCOPE_REQUEST<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestScope</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>SCOPE_REQUEST<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（4）<strong>session 作用域：</strong>同一个 Http Session 共享一个 Bean 对象，不同的 Session 拥有不同的 Bean 对象，仅适用于 WebApplicationContext 环境。</p><p>XML 的配置方式如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>session<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Java 注解的配置方式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>SCOPE_SESSION<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestScope</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>SCOPE_SESSION<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（5）<strong>application 作用域：</strong>全局的 Web 作用域，类似于 Servlet 中的 Application。</p><p>XML 的配置方式如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Java 注解的配置方式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>SCOPE_APPLICATION<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或是：</p><pre class="line-numbers language-jav" data-language="jav"><code class="language-jav">@RequestScope(WebApplicationContext.SCOPE_APPLICATION)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a><strong>考点分析</strong></h4><hr><p>在 Spring 中最核心的概念是 AOP（面向切面编程）、IoC（控制反转）、DI（依赖注入）等（此内容将会在下一课时中讲到），而最实用的功能则是 Bean，他们是概念和具体实现的关系。和 Bean 相关的面试题，还有以下几个：</p><ul><li>什么是同名 Bean？它是如何产生的？应该如何避免？</li><li>聊一聊 Bean 的生命周期。</li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a><strong>知识扩展</strong></h4><hr><h5 id="1-同名-Bean-问题"><a href="#1-同名-Bean-问题" class="headerlink" title="1.同名 Bean 问题"></a><strong>1.同名 Bean 问题</strong></h5><p>每个 Bean 拥有一个或多个标识符，在基于 XML 的配置中，我们可以使用 id 或者 name 来作为 Bean 的标识符。通常 Bean 的标识符由字母组成，允许使用特殊字符。</p><p>同一个 Spring 配置文件中 Bean 的 id 和 name 是不能够重复的，否则 Spring 容器启动时会报错。但如果 Spring 加载了多个配置文件的话，可能会出现同名 Bean 的问题。同名 Bean 指的是多个 Bean 有相同的 name 或者 id。</p><p>Spring 对待同名 Bean 的处理规则是使用最后面的 Bean 覆盖前面的 Bean，所以我们在定义 Bean 时，尽量使用长命名非重复的方式来定义，避免产生同名 Bean 的问题。</p><p>Bean 的 id 或 name 属性并非必须指定，如果留空的话，容器会为 Bean 自动生成一个唯一的名称，这样也不会出现同名 Bean 的问题。</p><h5 id="2-Bean-生命周期"><a href="#2-Bean-生命周期" class="headerlink" title="2.Bean 生命周期"></a><strong>2.Bean 生命周期</strong></h5><p>对于 Spring Bean 来说，并不是启动阶段就会触发 Bean 的实例化，只有当客户端通过显式或者隐式的方式调用 BeanFactory 的 getBean() 方法时，它才会触发该类的实例化方法。当然对于 BeanFactory 来说，也不是所有的 getBean() 方法都会实例化 Bean 对象，例如作用域为 singleton 时，只会在第一次，实例化该 Bean 对象，之后会直接返回该对象。但如果使用的是 ApplicationContext 容器，则会在该容器启动的时候，立即调用注册到该容器所有 Bean 的实例化方法。</p><p>getBean() 既然是 Bean 对象的入口，我们就先从这个方法说起，getBean() 方法是属于 BeanFactory 接口的，它的真正实现是 AbstractAutowireCapableBeanFactory 的 createBean() 方法，而 createBean() 是通过 doCreateBean() 来实现的，具体源码实现如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">BeanCreationException</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">RootBeanDefinition</span> mbdToUse <span class="token operator">=</span> mbd<span class="token punctuation">;</span>    <span class="token comment">// 确定并加载 Bean 的 class</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resolvedClass <span class="token operator">=</span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mbdToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>        mbdToUse<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>resolvedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 验证以及准备需要覆盖的方法</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        mbdToUse<span class="token punctuation">.</span><span class="token function">prepareMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                beanName<span class="token punctuation">,</span> <span class="token string">"Validation of method overrides failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 给BeanPostProcessors 一个机会来返回代理对象来代替真正的 Bean 实例，在这里实现创建代理对象功能</span>        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                <span class="token string">"BeanPostProcessor before instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建 Bean</span>        <span class="token class-name">Object</span> beanInstance <span class="token operator">=</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Finished creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> <span class="token operator">|</span> <span class="token class-name">ImplicitlyAppearedSingletonException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Unexpected exception during bean creation"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>doCreateBean 源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">BeanCreationException</span> <span class="token punctuation">{</span>    <span class="token comment">// 实例化 bean，BeanWrapper 对象提供了设置和获取属性值的功能</span>    <span class="token class-name">BeanWrapper</span> instanceWrapper <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 如果 RootBeanDefinition 是单例，则移除未完成的 FactoryBean 实例的缓存</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        instanceWrapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanInstanceCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建 bean 实例</span>        instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取 BeanWrapper 中封装的 Object 对象，其实就是 bean 对象的实例</span>    <span class="token keyword">final</span> <span class="token class-name">Object</span> bean <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取 BeanWrapper 中封装 bean 的 Class</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanType <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">!=</span> <span class="token class-name">NullBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mbd<span class="token punctuation">.</span>resolvedTargetType <span class="token operator">=</span> beanType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 应用 MergedBeanDefinitionPostProcessor 后处理器，合并 bean 的定义信息</span>    <span class="token comment">// Autowire 等注解信息就是在这一步完成预解析，并且将注解需要的信息放入缓存</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>postProcessingLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span>postProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">applyMergedBeanDefinitionPostProcessors</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                        <span class="token string">"Post-processing of merged bean definition failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mbd<span class="token punctuation">.</span>postProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span>            <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Eagerly caching bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                    <span class="token string">"' to allow for resolving potential circular references"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 为了避免循环依赖，在 bean 初始化完成前，就将创建 bean 实例的 ObjectFactory 放入工厂缓存（singletonFactories）</span>        <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 对 bean 属性进行填充</span>    <span class="token class-name">Object</span> exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用初始化方法，如 init-method 注入 Aware 对象</span>        exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">BeanCreationException</span> <span class="token operator">&amp;&amp;</span> beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span><span class="token punctuation">)</span> ex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span><span class="token punctuation">)</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                    mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Initialization of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果存在循环依赖，也就是说该 bean 已经被其他 bean 递归加载过，放入了提早公布的 bean 缓存中</span>        <span class="token class-name">Object</span> earlySingletonReference <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonReference <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果 exposedObject 没有在 initializeBean 初始化方法中被增强</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>exposedObject <span class="token operator">==</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>                exposedObject <span class="token operator">=</span> earlySingletonReference<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowRawInjectionDespiteWrapping <span class="token operator">&amp;&amp;</span> <span class="token function">hasDependentBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 依赖检测</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dependentBeans <span class="token operator">=</span> <span class="token function">getDependentBeans</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> actualDependentBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>dependentBeans<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> dependentBean <span class="token operator">:</span> dependentBeans<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">removeSingletonIfCreatedForTypeCheckOnly</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        actualDependentBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment">// 如果 actualDependentBeans 不为空，则表示依赖的 bean 并没有被创建完，即存在循环依赖</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>actualDependentBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                            <span class="token string">"Bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' has been injected into other beans ["</span> <span class="token operator">+</span>                                    <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">collectionToCommaDelimitedString</span><span class="token punctuation">(</span>actualDependentBeans<span class="token punctuation">)</span> <span class="token operator">+</span>                                    <span class="token string">"] in its raw version as part of a circular reference, but has eventually been "</span> <span class="token operator">+</span>                                    <span class="token string">"wrapped. This means that said other beans do not use the final version of the "</span> <span class="token operator">+</span>                                    <span class="token string">"bean. This is often the result of over-eager type matching - consider using "</span> <span class="token operator">+</span>                                    <span class="token string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 注册 DisposableBean 以便在销毁时调用</span>        <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Invalid destruction signature"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上述源码中可以看出，在 doCreateBean() 方法中，首先对 Bean 进行了实例化工作，它是通过调用 createBeanInstance() 方法来实现的，该方法返回一个 BeanWrapper 对象。BeanWrapper 对象是 Spring 中一个基础的 Bean 结构接口，说它是基础接口是因为它连基本的属性都没有。</p><p>BeanWrapper 接口有一个默认实现类 BeanWrapperImpl，其主要作用是对 Bean 进行填充，比如填充和注入 Bean 的属性等。</p><p>当 Spring 完成 Bean 对象实例化并且设置完相关属性和依赖后，则会调用 Bean 的初始化方法 initializeBean()，初始化第一个阶段是检查当前 Bean 对象是否实现了 BeanNameAware、BeanClassLoaderAware、BeanFactoryAware 等接口，源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeAwareMethods</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">Aware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanNameAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanNameAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ClassLoader</span> bcl <span class="token operator">=</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bcl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanClassLoader</span><span class="token punctuation">(</span>bcl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanFactoryAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">AbstractAutowireCapableBeanFactory</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，BeanNameAware 是把 Bean 对象定义的 beanName 设置到当前对象实例中；BeanClassLoaderAware 是将当前 Bean 对象相应的 ClassLoader 注入到当前对象实例中；BeanFactoryAware 是 BeanFactory 容器会将自身注入到当前对象实例中，这样当前对象就会拥有一个 BeanFactory 容器的引用。</p><p>初始化第二个阶段则是 BeanPostProcessor 增强处理，它主要是对 Spring 容器提供的 Bean 实例对象进行有效的扩展，允许 Spring 在初始化 Bean 阶段对其进行定制化修改，比如处理标记接口或者为其提供代理实现。</p><p>在初始化的前置处理完成之后就会检查和执行 InitializingBean 和 init-method 方法。</p><p>InitializingBean 是一个接口，它有一个 afterPropertiesSet() 方法，在 Bean 初始化时会判断当前 Bean 是否实现了 InitializingBean，如果实现了则调用 afterPropertiesSet() 方法，进行初始化工作；然后再检查是否也指定了 init-method，如果指定了则通过反射机制调用指定的 init-method 方法，它的实现源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">invokeInitMethods</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>    <span class="token comment">// 判断当前 Bean 是否实现了 InitializingBean，如果是的话需要调用 afterPropertiesSet()</span>    <span class="token keyword">boolean</span> isInitializingBean <span class="token operator">=</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isInitializingBean <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isExternallyManagedInitMethod</span><span class="token punctuation">(</span><span class="token string">"afterPropertiesSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Invoking afterPropertiesSet() on bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 安全模式</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PrivilegedExceptionAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">InitializingBean</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 属性初始化</span>                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PrivilegedActionException</span> pae<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> pae<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">InitializingBean</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 属性初始化</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 判断是否指定了 init-method()</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">NullBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> initMethodName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getInitMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span><span class="token punctuation">(</span>isInitializingBean <span class="token operator">&amp;&amp;</span> <span class="token string">"afterPropertiesSet"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isExternallyManagedInitMethod</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 利用反射机制执行指定方法</span>            <span class="token function">invokeCustomInitMethod</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化完成之后就可以正常的使用 Bean 对象了，在 Spring 容器关闭时会执行销毁方法，但是 Spring 容器不会自动去调用销毁方法，而是需要我们主动的调用。</p><p>如果是 BeanFactory 容器，那么我们需要主动调用 destroySingletons() 方法，通知 BeanFactory 容器去执行相应的销毁方法；如果是 ApplicationContext 容器，那么我们需要主动调用 registerShutdownHook() 方法，告知 ApplicationContext 容器执行相应的销毁方法。</p><blockquote><p>注：本文章源码基于 Spring 5.2.2.RELEASE。</p></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h4><hr><p>本文章讲了 Bean 的三种注册方式：XML、Java 注解和 JavaAPI，以及 Bean 的五个作用域：singleton、prototype、request、session 和 application；还讲了读取多个配置文件可能会出现同名 Bean 的问题，以及通过源码讲了 Bean 执行的生命周期，它的生命周期如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/89/0C/Cgq2xl6WvHqAdmt4AABGAn2eSiI631.png"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热门框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将本地仓库部署到远程仓库</title>
      <link href="2020/09/01/jiang-ben-di-cang-ku-bu-shu-dao-yuan-cheng-cang-ku/"/>
      <url>2020/09/01/jiang-ben-di-cang-ku-bu-shu-dao-yuan-cheng-cang-ku/</url>
      
        <content type="html"><![CDATA[<h3 id="如何将本地仓库部署到远程仓库"><a href="#如何将本地仓库部署到远程仓库" class="headerlink" title="如何将本地仓库部署到远程仓库"></a>如何将本地仓库部署到远程仓库</h3><h4 id="1-初始化仓库"><a href="#1-初始化仓库" class="headerlink" title="1.初始化仓库"></a><strong>1.初始化仓库</strong></h4><ul><li>此命令初始化一个新本地仓库，它在工作目录下生成一个名为.git的隐藏文件夹。</li></ul><blockquote><p>git init</p></blockquote><a id="more"></a><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920221520847.png"></p><h4 id="2-添加文件到暂存区"><a href="#2-添加文件到暂存区" class="headerlink" title="2.添加文件到暂存区"></a><strong>2.添加文件到暂存区</strong></h4><ul><li>作用就是将本地修改过的文件且已经追踪的文件添加到本地的暂存区</li></ul><blockquote><p>git add .</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920221533435.png"></p><h4 id="3-将暂存区里的改动给提交到本地的版本库"><a href="#3-将暂存区里的改动给提交到本地的版本库" class="headerlink" title="3.将暂存区里的改动给提交到本地的版本库"></a><strong>3.将暂存区里的改动给提交到本地的版本库</strong></h4><ul><li>将暂存区的代码提交到本地仓库，最后将本地仓库的代码推送到远程服务器端</li></ul><blockquote><p>git commit -m “修改”</p></blockquote><p>注意：双引号里面是提交内容的备注，便于以后查看。</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920224610859.png"></p><h4 id="4-本地仓库和远程仓库建立连接"><a href="#4-本地仓库和远程仓库建立连接" class="headerlink" title="4.本地仓库和远程仓库建立连接"></a><strong>4.本地仓库和远程仓库建立连接</strong></h4><blockquote><p>git remote add origin url</p></blockquote><p>注意：url表示是你的仓库所关联的地址，如果报以下错误，则删除添加的远程仓库地址。</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920221604961.png"></p><h4 id="5-删除添加的远程地址"><a href="#5-删除添加的远程地址" class="headerlink" title="5.删除添加的远程地址"></a><strong>5.删除添加的远程地址</strong></h4><blockquote><p>git remote rm origin</p></blockquote><p>注意：解除关联后再执行刚刚执行的命令。</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920222102892.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920221604961.png"></p><h4 id="6-拉取代码到本地"><a href="#6-拉取代码到本地" class="headerlink" title="6.拉取代码到本地"></a><strong>6.拉取代码到本地</strong></h4><blockquote><p>git pull origin master</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920222125670.png"></p><p>注意：如出现以下错误</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920222504738.png"></p><p>或者以下错误</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920222538920.png"></p><h4 id="7-解决本地上传远程的冲突"><a href="#7-解决本地上传远程的冲突" class="headerlink" title="7.解决本地上传远程的冲突"></a><strong>7.解决本地上传远程的冲突</strong></h4><blockquote><p>git push -f origin master</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920222631243.png"></p><h4 id="8-本地强制上传到远程，把远程的覆盖"><a href="#8-本地强制上传到远程，把远程的覆盖" class="headerlink" title="8.本地强制上传到远程，把远程的覆盖"></a><strong>8.本地强制上传到远程，把远程的覆盖</strong></h4><blockquote><p>git pull –rebase origin master</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920222714889.png"></p><h4 id="9-本地推送到远程"><a href="#9-本地推送到远程" class="headerlink" title="9.本地推送到远程"></a><strong>9.本地推送到远程</strong></h4><blockquote><p>git push origin master</p></blockquote><ul><li>git push的一般形式为 git push &lt;远程主机名&gt; &lt;本地分支名&gt; &lt;远程分支名&gt; ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名。第一个master是本地分支名，第二个master是远程分支名。<ul><li>git push origin master<br> 如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</li><li>git push origin ：refs/for/master<br> 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin –delete master</li><li>git push origin<br> 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支</li><li>git push<br> 如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名</li></ul></li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200920230757000.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-登录和注册后台实用源码</title>
      <link href="2020/08/29/java-deng-lu-he-zhu-ce-hou-tai-shi-yong-yuan-ma/"/>
      <url>2020/08/29/java-deng-lu-he-zhu-ce-hou-tai-shi-yong-yuan-ma/</url>
      
        <content type="html"><![CDATA[<h3 id="创建工程详情"><a href="#创建工程详情" class="headerlink" title="创建工程详情"></a>创建工程详情</h3><hr><h4 id="创建一个名字为“lgtest”的工程"><a href="#创建一个名字为“lgtest”的工程" class="headerlink" title="创建一个名字为“lgtest”的工程"></a>创建一个名字为“lgtest”的工程</h4><a id="more"></a><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200829140835383.png"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200829140903005.png"></p><h4 id="工程目录详情"><a href="#工程目录详情" class="headerlink" title="工程目录详情"></a>工程目录详情</h4><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200829140942236.png"></p><h1 id="1-连接数据库"><a href="#1-连接数据库" class="headerlink" title="1. 连接数据库"></a>1. 连接数据库</h1><h2 id="1-1创建用户类（User-java）"><a href="#1-1创建用户类（User-java）" class="headerlink" title="1.1创建用户类（User.java）"></a>1.1创建用户类（User.java）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> 用户<span class="token class-name">Model</span>类 <span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span><span class="token comment">//用户名</span><span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token comment">//密码</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TODO Auto-generated constructor stub</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> userName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2连接数据库（DbUtil-java）"><a href="#1-2连接数据库（DbUtil-java）" class="headerlink" title="1.2连接数据库（DbUtil.java）"></a>1.2连接数据库（DbUtil.java）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbUtil</span> <span class="token punctuation">{</span>    <span class="token comment">//注意：根据自身数据库进行设置</span>    <span class="token comment">//数据库端口号：3306； 数据库表名：db_Infosystem  </span><span class="token keyword">private</span> <span class="token class-name">String</span> dbUrl<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/db_Infosystem"</span><span class="token punctuation">;</span>    <span class="token comment">// 数据库用户名：root</span><span class="token keyword">private</span> <span class="token class-name">String</span> dbUserName<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token comment">//数据库密码：123456</span><span class="token keyword">private</span> <span class="token class-name">String</span> dbPassword<span class="token operator">=</span><span class="token string">"123456"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> jdbcName<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span><span class="token comment">/** * 获取数据库连接 * @return * @throws Exception */</span><span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>jdbcName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> con<span class="token operator">=</span><span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>dbUrl<span class="token punctuation">,</span>dbUserName<span class="token punctuation">,</span>dbPassword<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> con<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 关闭数据库连接 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">closeCon</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> con<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>con<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">DbUtil</span> dbUtil<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DbUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>dbUtil<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据库连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated catch block</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3处理字符串类（StringUtil-java）"><a href="#1-3处理字符串类（StringUtil-java）" class="headerlink" title="1.3处理字符串类（StringUtil.java）"></a>1.3处理字符串类（StringUtil.java）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringUtil</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">||</span> str<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>str<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4登录和注册校验（UserDao-java）"><a href="#1-4登录和注册校验（UserDao-java）" class="headerlink" title="1.4登录和注册校验（UserDao.java）"></a>1.4登录和注册校验（UserDao.java）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span><span class="token comment">/** * 登录验证 *  */</span><span class="token comment">//登录</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> con<span class="token punctuation">,</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token class-name">User</span> resultUser<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select * from t_user where userName=? and password=?"</span><span class="token punctuation">;</span><span class="token class-name">PreparedStatement</span> pstmt<span class="token operator">=</span>con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ResultSet</span> rs<span class="token operator">=</span>pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>resultUser<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resultUser<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resultUser<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> resultUser<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//注册</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> con<span class="token punctuation">,</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token class-name">String</span> selcet <span class="token operator">=</span> <span class="token string">"select count(*) as totalCount from t_user"</span><span class="token punctuation">;</span><span class="token class-name">ResultSet</span> query <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>selcet<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> rowCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   rowCount<span class="token operator">=</span>query <span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"totalCount"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"insert into t_user(id,userName,password) values("</span><span class="token operator">+</span>rowCount<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span><span class="token class-name">PreparedStatement</span> pstmt<span class="token operator">=</span>con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> execute <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>execute<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-注册页面"><a href="#2-注册页面" class="headerlink" title="2. 注册页面"></a>2. 注册页面</h1><h2 id="2-1注册页面（register-jsp）"><a href="#2-1注册页面（register-jsp）" class="headerlink" title="2.1注册页面（register.jsp）"></a>2.1注册页面（register.jsp）</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;%@ page language="java" contentType="text/html; charset=utf-8"    pageEncoding="utf-8"%&gt;<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="token string">"http://www.w3.org/TR/html4/loose.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token string">'${sessionScope.pwdFail}'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token operator">==</span><span class="token string">'yes'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"两次密码输入不一样，请重新输入"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>       <span class="token keyword">var</span> hasUser <span class="token operator">=</span> <span class="token string">'${sessionScope.hasUser}'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasUser<span class="token operator">==</span><span class="token string">'yes'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"该用户已存在"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">padding-top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/Register<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>740<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/register.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>45%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${userName }<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span>  <span class="token attr-name">required</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>45%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>13%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>密  码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${password }<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>45%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>13%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>确认密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${repassword }<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>repassword<span class="token punctuation">"</span></span>  <span class="token attr-name">required</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>repassword<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>45%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>13%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>立即注册<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>45%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>${error }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2注册校验（success-jsp）"><a href="#2-2注册校验（success-jsp）" class="headerlink" title="2.2注册校验（success.jsp）"></a>2.2注册校验（success.jsp）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">UserDao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">DbUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtil</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span><span class="token class-name">DbUtil</span> dbUtil<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DbUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UserDao</span> userDao<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注销session或者移除session中的数据</span>        session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"loginjsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3注册校验Servlet（OutServlet-java）"><a href="#2-3注册校验Servlet（OutServlet-java）" class="headerlink" title="2.3注册校验Servlet（OutServlet.java）"></a>2.3注册校验Servlet（OutServlet.java）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">UserDao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">DbUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtil</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegisterServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span><span class="token class-name">DbUtil</span> dbUtil<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DbUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UserDao</span> userDao<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> userName<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> password<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> repassword<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"repassword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>repassword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//将注册的信息保存到数据库</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Connection</span> con <span class="token operator">=</span> dbUtil<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> login <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//检查用户是否存在</span><span class="token keyword">if</span> <span class="token punctuation">(</span>login<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>userDao<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//把用户消息放进session中</span>            <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//           response.sendRedirect("success.jsp"); //success</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//request.getRequestDispatcher("success.jsp").forward(request,response);</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"hasUser"</span><span class="token punctuation">,</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"register.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated catch block</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"pwdFail"</span><span class="token punctuation">,</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"register.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4Servlet–实现用户的注册功能（RegisterServlet-java）"><a href="#2-4Servlet–实现用户的注册功能（RegisterServlet-java）" class="headerlink" title="2.4Servlet–实现用户的注册功能（RegisterServlet.java）"></a>2.4Servlet–实现用户的注册功能（RegisterServlet.java）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">UserDao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">DbUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtil</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegisterServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span><span class="token class-name">DbUtil</span> dbUtil<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DbUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UserDao</span> userDao<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> userName<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> password<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> repassword<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"repassword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>repassword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//将注册的信息保存到数据库</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Connection</span> con <span class="token operator">=</span> dbUtil<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> login <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//检查用户是否存在</span><span class="token keyword">if</span> <span class="token punctuation">(</span>login<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>userDao<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//把用户消息放进session中</span>            <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//           response.sendRedirect("success.jsp"); //success</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//request.getRequestDispatcher("success.jsp").forward(request,response);</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"hasUser"</span><span class="token punctuation">,</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"register.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated catch block</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"pwdFail"</span><span class="token punctuation">,</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"register.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-登录页面"><a href="#3-登录页面" class="headerlink" title="3. 登录页面"></a>3. 登录页面</h1><h2 id="3-1登录页面（login-jsp）"><a href="#3-1登录页面（login-jsp）" class="headerlink" title="3.1登录页面（login.jsp）"></a>3.1登录页面（login.jsp）</h2> <pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;%@ page language="java" contentType="text/html; charset=utf-8"    pageEncoding="utf-8"%&gt;<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="token string">"http://www.w3.org/TR/html4/loose.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">resetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">padding-top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mid_main<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>740<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/login.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>45%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${userName }<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>45%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>密  码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${password }<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>45%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>resetValue()<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/register.jsp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>45%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>${error }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2登录Servlet（LoginServlet-java）"><a href="#3-2登录Servlet（LoginServlet-java）" class="headerlink" title="3.2登录Servlet（LoginServlet.java）"></a>3.2登录Servlet（LoginServlet.java）</h2> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">UserDao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">DbUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>system<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtil</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span><span class="token class-name">DbUtil</span> dbUtil<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DbUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UserDao</span> userDao<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> userName<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> password<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"用户名或密码为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"index.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">User</span> user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> con<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>con<span class="token operator">=</span>dbUtil<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> currentUser<span class="token operator">=</span>userDao<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>currentUser<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"用户名或密码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 服务器跳转</span>request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">// 获取Session</span><span class="token class-name">HttpSession</span> session<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"currentUser"</span><span class="token punctuation">,</span> currentUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 客户端跳转</span>              <span class="token comment">//登录成功跳转进去main.jsp页面</span>response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"main.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated catch block</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>dbUtil<span class="token punctuation">.</span><span class="token function">closeCon</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated catch block</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3主页面（main-jsp）"><a href="#3-3主页面（main-jsp）" class="headerlink" title="3.3主页面（main.jsp）"></a>3.3主页面（main.jsp）</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;%@ page language="java" contentType="text/html; charset=utf-8"    pageEncoding="utf-8"%&gt;<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="token string">"http://www.w3.org/TR/html4/loose.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>欢迎进入主页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-配置web-xml文件（web-xml）"><a href="#4-配置web-xml文件（web-xml）" class="headerlink" title="4. 配置web.xml文件（web.xml）"></a>4. 配置web.xml文件（web.xml）</h1><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">&gt;</span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">&gt;</span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">&gt;</span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">&gt;</span></span>default.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">&gt;</span></span>default.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">&gt;</span></span>default.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>loginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.system.web.LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>RegisterServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.system.web.RegisterServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>OutServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.system.web.OutServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>loginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>OutServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/Out<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>RegisterServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/Register<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-实现效果图"><a href="#5-实现效果图" class="headerlink" title="5.实现效果图"></a>5.实现效果图</h1><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="登录页面效果图"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="注册页面效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客集成码云评论系统</title>
      <link href="2020/08/25/hexo-bo-ke-ji-cheng-ma-yun-ping-lun-xi-tong/"/>
      <url>2020/08/25/hexo-bo-ke-ji-cheng-ma-yun-ping-lun-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo博客集成码云评论系统"><a href="#Hexo博客集成码云评论系统" class="headerlink" title="Hexo博客集成码云评论系统"></a>Hexo博客集成码云评论系统</h2><h5 id="Tips-前导必备"><a href="#Tips-前导必备" class="headerlink" title="Tips:前导必备"></a>Tips:前导必备</h5><a id="more"></a><ul><li><p><a href="https://nate-lin.gitee.io/">博主博客地址</a></p></li><li><p>博主使用的是<a href="https://gitee.com/nate-lin/yilia-plus">**[yilia-plus]**</a>主题</p></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote><p>giteement评论配置详解：                          </p></blockquote><ol><li>应用回调地址默认配置博客地址（博客主页地址）</li><li>giteeID为Gitee用户的ID（一般为用户主页的地址后缀，e.g. <a href="https://gitee.com/nate-lin">[https://gitee.com/nate-lin]</a>(:就是nate-lin），并非用户昵称</li><li>评论仓库必须为配置用户ID下创建的仓库，必须存在且为公开状态</li></ol><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><hr><blockquote><p>giteement系统是基于[gitment]的源码开发和扩展的<br>[giteement]还在继续维护优化中…欢迎小伙伴们加入一起维护</p></blockquote><h6 id="目前实现以下功能："><a href="#目前实现以下功能：" class="headerlink" title="目前实现以下功能："></a>目前实现以下功能：</h6><ol><li>基于[码云]的issues来进行评论的,所以需要有码云账号。</li><li>实现了类似码云issues的回复功能，评论开头用@符号选择你要回复的人，回复完毕，如果你要回复的人登录码云，会有消息提示。</li></ol><blockquote><p>效果展示 ➡️<a href="https://nate-lin.gitee.io/"> [https://nate-lin.gitee.io/]</a></p></blockquote><hr><h3 id="1、配置第三方应用"><a href="#1、配置第三方应用" class="headerlink" title="1、配置第三方应用"></a>1、配置第三方应用</h3><hr><p>  使用码云的issues作为评论系统，就要使用码云来登录评论，所以需要在码云上配置第三方应用。</p><blockquote><p>注册一个新的第三方应用 ➡️ <a href="https://links.jianshu.com/go?to=https://gitee.com/oauth/applications/new">https://gitee.com/oauth/applications/new</a></p></blockquote><ul><li><p>应用名称(根据实际来填写)</p></li><li><p>应用描述(根据实际来填写)</p></li><li><p>应用主页(应用程序主页的完整URL) </p></li><li><p>应用回调地址(一般是博客的域名) </p></li><li><p><strong>权限请选择<code>issues</code>、<code>notes</code></strong></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200825234932333.png"></p></li></ul><h3 id="2、配置-yilia-plus-主题"><a href="#2、配置-yilia-plus-主题" class="headerlink" title="2、配置[yilia-plus]主题"></a>2、配置<a href="https://gitee.com/nate-lin/yilia-plus">[yilia-plus]</a>主题</h3><hr><h6 id="注册完成后得到Client-ID和Client-Secret"><a href="#注册完成后得到Client-ID和Client-Secret" class="headerlink" title="注册完成后得到Client ID和Client Secret"></a>注册完成后得到Client ID和Client Secret</h6><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200825230512192.png"></p><h5 id="修改-yilia-plus-主题的配置文件-config-yml"><a href="#修改-yilia-plus-主题的配置文件-config-yml" class="headerlink" title="修改[yilia-plus]主题的配置文件_config.yml"></a>修改<a href="https://gitee.com/nate-lin/yilia-plus">[yilia-plus]</a>主题的配置文件<code>_config.yml</code></h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">giteement</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 是否启用码云评论系统</span>  <span class="token comment"># 是否使用官方js(false可以提升访问速度)</span>  <span class="token key atrule">remote</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">redirect_uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//nate<span class="token punctuation">-</span>lin.gitee.io/nate<span class="token punctuation">-</span>lin<span class="token punctuation">-</span>demo   <span class="token comment"># 应用回调地址(请和配置的第三方应用保持一致)</span>  <span class="token comment"># 不能更改(网上开源项目https://github.com/Rob--W/cors-anywhere作者提供的专门用来跨域服务器的配置)</span>  <span class="token key atrule">oauth_uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cors<span class="token punctuation">-</span>anywhere.herokuapp.com/https<span class="token punctuation">:</span>//gitee.com/oauth/token  <span class="token key atrule">giteeID</span><span class="token punctuation">:</span> nate<span class="token punctuation">-</span>lin  <span class="token comment"># 你的码云账号英文名</span>  <span class="token comment"># 存储评论的 repo</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> nate<span class="token punctuation">-</span>lin<span class="token punctuation">-</span>demo  <span class="token key atrule">gitment_oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">client_id</span><span class="token punctuation">:</span> <span class="token string">'*********'</span>           <span class="token comment">#client ID</span>    <span class="token key atrule">client_secret</span><span class="token punctuation">:</span> <span class="token string">'*********'</span>       <span class="token comment">#client secret</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、重新编译运行即可查看效果"><a href="#3、重新编译运行即可查看效果" class="headerlink" title="3、重新编译运行即可查看效果"></a>3、重新编译运行即可查看效果</h3><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s -g       <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>针对不同文章的date属性生成id，只要保证每篇文章有date属性并且不重复即可</p></blockquote><blockquote><p><strong>hexo-theme-yilia-plus配置Demo ➡️ <a href="https://gitee.com/nate-lin/yilia-plus">[https://gitee.com/nate-lin/yilia-plus]</a></strong></p></blockquote><h3 id="3、评论区域报错"><a href="#3、评论区域报错" class="headerlink" title="3、评论区域报错"></a>3、评论区域报错</h3><hr><p><strong>错误1</strong></p><ul><li>Error:404 Project Not Found</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200825231758521.png"></p><p><strong>原因分析</strong></p><ul><li>表明没有创建gitee仓库（nate-lin-demo）。</li><li>创建成功即可。</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200825232026263.png"></p><p><strong>错误2</strong></p><ul><li><p>点击登录按钮进行授权报<strong>404 Not Found</strong>错误</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200825232338116.png"></p></li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200825232541354.png"></p><p><strong>原因分析</strong></p><ul><li>表明如下几个值与gitee上刚刚新创的应用回调地址(一般是博客的域名) 、应用名称(根据实际来填写)、应用描述(根据实际来填写)、应用主页(应用程序主页的完整URL) 的值有不一样的，仔细检查即可。特别是client_id、client_secret,务必粘贴正确。</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200825232948945.png"></p><h3 id="4、待解决问题"><a href="#4、待解决问题" class="headerlink" title="4、待解决问题"></a>4、待解决问题</h3><hr><ol><li>giteement的UI是直接使用gitment的UI，不是很好看，后期准备优化。</li><li>新增文章的时候需要登录自己的gitee账号，点击评论初始化按钮。</li></ol><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/2743275-e96101fc56ce6182.png" alt="img"></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200825233736296.png" alt="image-20200825233736296"></p><p>初始化完成后显示如下</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200825233859278.png"></p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200825234023448.png"></p><h3 id="其他主题例子"><a href="#其他主题例子" class="headerlink" title="其他主题例子"></a>其他主题例子</h3><hr><h4 id="1、主题landscape中使用"><a href="#1、主题landscape中使用" class="headerlink" title="1、主题landscape中使用"></a>1、主题<a href="https://links.jianshu.com/go?to=https://github.com/hexojs/hexo-theme-landscape">landscape</a>中使用</h4><h6 id="修改themes-landscape-layout-index-ejs文件"><a href="#修改themes-landscape-layout-index-ejs文件" class="headerlink" title="修改themes/landscape/layout/index.ejs文件"></a>修改<code>themes/landscape/layout/index.ejs</code>文件</h6><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/2743275-6896ffbdbf941c3a.png" alt="img"></p><h6 id="修改themes-landscape-layout-partial-article-ejs文件"><a href="#修改themes-landscape-layout-partial-article-ejs文件" class="headerlink" title="修改themes/landscape/layout/_partial/article.ejs文件"></a>修改<code>themes/landscape/layout/_partial/article.ejs</code>文件</h6><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/2743275-b5bc10f5b793da13.png" alt="img"></p><h6 id="增加themes-landscape-layout-partial-comment-ejs"><a href="#增加themes-landscape-layout-partial-comment-ejs" class="headerlink" title="增加themes/landscape/layout/_partial/comment.ejs"></a>增加themes/landscape/layout/_partial/comment.ejs</h6><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>index <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>comments <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>giteement <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>giteement<span class="token punctuation">.</span>enable<span class="token punctuation">)</span><span class="token punctuation">{</span> </span><span class="token delimiter punctuation">%&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>giteement-ctn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>giteement <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>giteement<span class="token punctuation">.</span>remote<span class="token punctuation">)</span><span class="token punctuation">{</span> </span><span class="token delimiter punctuation">%&gt;</span></span>    <span class="token comment">&lt;!-- &lt;link rel="stylesheet" href="https://giteement.oss-cn-beijing.aliyuncs.com/wd-discuss.css"&gt; --&gt;</span>    <span class="token comment">&lt;!-- &lt;script src="https://giteement.oss-cn-beijing.aliyuncs.com/discuss_hexo.js"&gt;&lt;/script&gt; --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://giteement.oss-cn-beijing.aliyuncs.com/default.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://giteement.oss-cn-beijing.aliyuncs.com/giteement.browser.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> </span><span class="token delimiter punctuation">%&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript">config<span class="token punctuation">.</span>root</span><span class="token delimiter punctuation">%&gt;</span></span>assets/default.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript">config<span class="token punctuation">.</span>root</span><span class="token delimiter punctuation">%&gt;</span></span>assets/giteement.browser.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">}</span> </span><span class="token delimiter punctuation">%&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> giteement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Giteement</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript">page<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYYMMDDHHmmss'</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">%&gt;</span></span>'</span><span class="token punctuation">,</span>    owner<span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript">theme<span class="token punctuation">.</span>giteement<span class="token punctuation">.</span>giteeID</span><span class="token delimiter punctuation">%&gt;</span></span>'</span><span class="token punctuation">,</span>    repo<span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript">theme<span class="token punctuation">.</span>giteement<span class="token punctuation">.</span>repo</span><span class="token delimiter punctuation">%&gt;</span></span>'</span><span class="token punctuation">,</span>    backcall_uri<span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript">theme<span class="token punctuation">.</span>giteement<span class="token punctuation">.</span>redirect_uri</span><span class="token delimiter punctuation">%&gt;</span></span>'</span><span class="token punctuation">,</span>    oauth_uri<span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript">theme<span class="token punctuation">.</span>giteement<span class="token punctuation">.</span>oauth_uri</span><span class="token delimiter punctuation">%&gt;</span></span>'</span><span class="token punctuation">,</span>    oauth<span class="token operator">:</span> <span class="token punctuation">{</span>      client_id<span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript">theme<span class="token punctuation">.</span>giteement<span class="token punctuation">.</span>gitment_oauth<span class="token punctuation">.</span>client_id</span><span class="token delimiter punctuation">%&gt;</span></span>'</span><span class="token punctuation">,</span>      client_secret<span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript">theme<span class="token punctuation">.</span>giteement<span class="token punctuation">.</span>gitment_oauth<span class="token punctuation">.</span>client_secret</span><span class="token delimiter punctuation">%&gt;</span></span>'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  giteement<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'giteement-ctn'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">}</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、主题next中使用"><a href="#2、主题next中使用" class="headerlink" title="2、主题next中使用"></a>2、主题<a href="https://links.jianshu.com/go?to=https://github.com/theme-next/hexo-theme-next">next</a>中使用</h4><h6 id="修改themes-next-layout-index-swig文件"><a href="#修改themes-next-layout-index-swig文件" class="headerlink" title="修改themes/next/layout/index.swig文件"></a>修改<code>themes/next/layout/index.swig</code>文件</h6><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/2743275-8d0e237f78f50a61.png" alt="img"></p><h6 id="修改themes-next-layout-partials-comments-swig文件"><a href="#修改themes-next-layout-partials-comments-swig文件" class="headerlink" title="修改themes/next/layout/_partials/comments.swig文件"></a>修改<code>themes/next/layout/_partials/comments.swig</code>文件</h6><blockquote><p>把<code>theme.giteement.ClientID</code>和<code>theme.giteement.ClientSecret</code>改为<code>theme.giteement.gitment_oauth.client_id</code>和<code>theme.giteement.gitment_oauth.client_secret</code></p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/2743275-01b6301e3e5947c0.png" alt="img"></p><blockquote><p>本文参考于<a href="https://www.jianshu.com/p/f5c4633524c7">https://www.jianshu.com/p/f5c4633524c7</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础10-如何手写一个消息队列和延迟消息队列</title>
      <link href="2020/08/12/java-ji-chu-10-ru-he-shou-xie-yi-ge-xiao-xi-dui-lie-he-yan-chi-xiao-xi-dui-lie/"/>
      <url>2020/08/12/java-ji-chu-10-ru-he-shou-xie-yi-ge-xiao-xi-dui-lie-he-yan-chi-xiao-xi-dui-lie/</url>
      
        <content type="html"><![CDATA[<h3 id="如何手写一个消息队列和延迟消息队列？"><a href="#如何手写一个消息队列和延迟消息队列？" class="headerlink" title="如何手写一个消息队列和延迟消息队列？"></a>如何手写一个消息队列和延迟消息队列？</h3><blockquote><p>第一次听到“消息队列”这个词时，不知你是不是和我反应一样，感觉很高阶很厉害的样子，其实当我们了解了消息队列之后，发现它与普通的技术类似，当我们熟悉之后，也能很快地上手并使用。</p></blockquote><a id="more"></a><p><strong>本文章的面试题是，消息队列的使用场景有哪些？如何手动实现一个消息队列和延迟消息队列？</strong></p><hr><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a><strong>典型回答</strong></h4><h5 id="消息队列的使用场景有很多，最常见的使用场景有以下几个。"><a href="#消息队列的使用场景有很多，最常见的使用场景有以下几个。" class="headerlink" title="消息队列的使用场景有很多，最常见的使用场景有以下几个。"></a>消息队列的使用场景有很多，最常见的使用场景有以下几个。</h5><h6 id="1-商品秒杀"><a href="#1-商品秒杀" class="headerlink" title="1.商品秒杀"></a>1.商品秒杀</h6><hr><ul><li>比如，我们在做秒杀活动时，会发生短时间内出现爆发式的用户请求，如果不采取相关的措施，会导致服务器忙不过来，响应超时的问题，轻则会导致服务假死，重则会让服务器直接宕机，给用户带来的体验也非常不好。如果这个时候加上了消息队列，服务器接收到用户的所有请求后，先把这些请求全部写入到消息队列中再排队处理，这样就不会导致同时处理多个请求的情况；如果消息队列长度超过可以承载的最大数量，那么我们可以抛弃当前用户的请求，通知前台用户“页面出错啦，请重新刷新”等提示，这样就会有更好的交互体验。</li></ul><h6 id="2-系统解耦"><a href="#2-系统解耦" class="headerlink" title="2.系统解耦"></a>2.系统解耦</h6><hr><ul><li><p>使用了消息队列之后，我们可以把系统的业务功能模块化，实现系统的解耦。例如，在没有使用消息队列之前，当前台用户完善了个人信息之后，首先我们需要更新用户的资料，再添加一条用户信息修改日志。但突然有一天产品经理提了一个需求，在前台用户信息更新之后，需要给此用户的增加一定的积分奖励，然后没过几天产品经理又提了一个需求，在前台用户信息更新之后，不但要增加积分奖励，还要增加用户的经验值，但没过几天产品经理的需求又变了，他要求完善资料无需增加用户的积分了，这样反反复复、来来回回的折腾，我想研发的同学一定受不了，但这是互联网公司的常态，那我们有没有一劳永逸的办法呢？</p></li><li><p>没错，这个时候我们想到了使用消息队列来实现系统的解耦，每个功能的实现独立开，只需要一个订阅或者取消订阅的开关就可以了，当需要增加功能时，只需要打开订阅“用户信息完善”的队列就行，如果过两天不用了，再把订阅的开关关掉就行了，这样我们就不用来来回回的改业务代码了，也就轻松的实现了系统模块间的解耦。</p></li></ul><h6 id="3-日志记录"><a href="#3-日志记录" class="headerlink" title="3.日志记录"></a>3.日志记录</h6><hr><ul><li><p>我们大部分的日志记录行为其实是和前台用户操作的主业务没有直接关系的，只是我们的运营人和经营人员需要拿到这部分用户操作的日志信息，来进行用户行为分析或行为监控。在我们没有使用消息队列之前，笼统的做法是当有用户请求时，先处理用户的请求再记录日志，这两个操作是放在一起的，而前台用户也需要等待日志添加完成之后才能拿到后台的响应信息，这样其实浪费了前台用户的部分时间。此时我们可以使用消息队列，当响应完用户请求之后，只需要把这个操作信息放入消息队列之后，就可以直接返回结果给前台用户了，无序等待日志处理和日志添加完成，从而缩短了前台用户的等待时间。</p></li><li><p>我们可以通过 JDK 提供的 Queue 来实现自定义消息队列，使用 DelayQueue 实现延迟消息队列。</p></li></ul><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a><strong>考点分析</strong></h4><hr><ul><li><p>对于消息队列的考察更侧重于消息队列的核心思想，因为只有理解了什么是消息队列？以及什么情况下要用消息队列？才能解决我们日常工作中遇到的问题，而消息队列的具体实现，只需要掌握一个消息中间件的使用即可，因为消息队列中间件的核心实现思路是一致的，不但如此，消息队列中间件的使用也大致类似，只要掌握了一个就能触类旁通的用好其他消息中间件。</p></li><li><p>和本文章相关的面试题，还有以下这两个：</p><ul><li>介绍一个你熟悉的消息中间件？</li><li>如何手动实现消息队列？</li></ul></li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a><strong>知识扩展</strong></h4><hr><h5 id="1-常用消息中间件-RabbitMQ"><a href="#1-常用消息中间件-RabbitMQ" class="headerlink" title="1.常用消息中间件 RabbitMQ"></a><strong>1.常用消息中间件 RabbitMQ</strong></h5><hr><blockquote><p>目前市面上比较常用的 MQ（Message Queue，消息队列）中间件有 RabbitMQ、Kafka、RocketMQ，如果是轻量级的消息队列可以使用 Redis 提供的消息队列，本课时我们先来介绍一下 RabbitMQ，其他消息中间件将会在第 15 课时中单独介绍。</p></blockquote><blockquote><p>RabbitMQ 是一个老牌开源的消息中间件，它实现了标准的 AMQP（Advanced Message Queuing Protocol，高级消息队列协议）消息中间件，使用 Erlang 语言开发，支持集群部署，和多种客户端语言混合调用，它支持的主流开发语言有以下这些：</p></blockquote><ul><li><p>Java and Spring</p></li><li><p>.NET</p></li><li><p>Ruby</p></li><li><p>Python</p></li><li><p>PHP</p></li><li><p>JavaScript and Node</p></li><li><p>Objective-C and Swift</p></li><li><p>Rust</p></li><li><p>Scala</p></li><li><p>Go</p></li></ul><p>更多支持语言，<a href="https://www.rabbitmq.com/devtools.html">请点击这里访问官网</a>查看。</p><blockquote><p>RabbitMQ 中有 3 个重要的概念：生产者、消费者和代理。</p></blockquote><ul><li>生产者：消息的创建者，负责创建和推送数据到消息服务器。</li><li>消费者：消息的接收方，用于处理数据和确认消息。</li><li>代理：也就是 RabbitMQ 服务本身，它用于扮演“快递”的角色，因为它本身并不生产消息，只是扮演了“快递”的角色，把消息进行暂存和传递。</li></ul><p>它们的运行流程，如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/Ciqah16QOkmAX3_TAABZ5pEPvmQ772.png"></p><blockquote><p>RabbitMQ 具备以下几个优点：</p></blockquote><ul><li><strong>支持持久化</strong>，RabbitMQ 支持磁盘持久化功能，保证了消息不会丢失；</li><li><strong>高并发</strong>，RabbitMQ 使用了 Erlang 开发语言，Erlang 是为电话交换机开发的语言，天生自带高并发光环和高可用特性；</li><li><strong>支持分布式集群</strong>，正是因为 Erlang 语言实现的，因此 RabbitMQ 集群部署也非常简单，只需要启动每个节点并使用 –link 把节点加入到集群中即可，并且 RabbitMQ 支持自动选主和自动容灾；</li><li><strong>支持多种语言</strong>，比如 Java、.NET、PHP、Python、JavaScript、Ruby、Go 等；</li><li><strong>支持消息确认</strong>，支持消息消费确认（ack）保证了每条消息可以被正常消费；</li><li><strong>它支持很多插件</strong>，比如网页控制台消息管理插件、消息延迟插件等，RabbitMQ 的插件很多并且使用都很方便。</li></ul><blockquote><p>RabbitMQ 的消息类型，分为以下四种：</p></blockquote><ul><li><strong>direct</strong>（默认类型）模式，此模式为一对一的发送方式，也就是一条消息只会发送给一个消费者；</li><li>**headers **模式，允许你匹配消息的 header 而非路由键（RoutingKey），除此之外 headers 和 direct 的使用完全一致，但因为 headers 匹配的性能很差，几乎不会被用到；</li><li><strong>fanout</strong> 模式，为多播的方式，会把一个消息分发给所有的订阅者；</li><li><strong>topic</strong> 模式，为主题订阅模式，允许使用通配符（#、*）匹配一个或者多个消息，我可以使用“cn.mq.#”匹配到多个前缀是“cn.mq.xxx”的消息，比如可以匹配到“cn.mq.rabbit”、“cn.mq.kafka”等消息。</li></ul><h5 id="2-自定义消息队列"><a href="#2-自定义消息队列" class="headerlink" title="2.自定义消息队列"></a><strong>2.自定义消息队列</strong></h5><hr><p>我们可使用 Queue 来实现消息队列，Queue 大体可分为以下三类：</p><ul><li><strong>双端队列（Deque）</strong>是 Queue 的子类也是 Queue 的补充类，头部和尾部都支持元素插入和获取；</li><li><strong>阻塞队列</strong>指的是在元素操作时（添加或删除），如果没有成功，会阻塞等待执行，比如当添加元素时，如果队列元素已满，队列则会阻塞等待直到有空位时再插入；</li><li><strong>非阻塞队列</strong>，和阻塞队列相反，它会直接返回操作的结果，而非阻塞等待操作，双端队列也属于非阻塞队列。</li></ul><p>自定义消息队列的实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomQueue</span> <span class="token punctuation">{</span>    <span class="token comment">// 定义消息队列</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用生产者</span>    <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用消费者</span><span class="token punctuation">}</span><span class="token comment">// 生产者</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 添加消息</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"first message."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"second message."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"third message."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 消费者</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 消费消息</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">first message<span class="token punctuation">.</span>second message<span class="token punctuation">.</span>third message<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看出消息是以先进先出顺序进行消费的。</p><p>实现自定义延迟队列需要实现 Delayed 接口，重写 getDelay() 方法，延迟队列完整实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">DateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">DelayQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Delayed</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 自定义延迟队列   */</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomDelayQueue</span> <span class="token punctuation">{</span>   <span class="token comment">// 延迟消息队列</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DelayQueue</span> delayQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>       <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用生产者</span>       <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用消费者</span>   <span class="token punctuation">}</span>   <span class="token comment">// 生产者</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 添加消息</span>       delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyDelay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"消息1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyDelay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token string">"消息2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment">// 消费者</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始执行时间："</span> <span class="token operator">+</span>               <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getDateTimeInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>delayQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>delayQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束执行时间："</span> <span class="token operator">+</span>               <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getDateTimeInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment">/**    * 自定义延迟队列      */</span>      <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyDelay</span> <span class="token keyword">implements</span> <span class="token class-name">Delayed</span> <span class="token punctuation">{</span>      <span class="token comment">// 延迟截止时间（单位：毫秒）</span>      <span class="token keyword">long</span> delayTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 借助 lombok 实现</span>      <span class="token annotation punctuation">@Getter</span>      <span class="token annotation punctuation">@Setter</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>      <span class="token comment">/**       * 初始化       * @param delayTime 设置延迟执行时间       * @param msg       执行的消息         */</span>         <span class="token keyword">public</span> <span class="token class-name">MyDelay</span><span class="token punctuation">(</span><span class="token keyword">long</span> delayTime<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>delayTime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delayTime <span class="token operator">+</span> delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token comment">// 获取剩余时间</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>delayTime <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// 队列里元素的排序依据</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Delayed</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span> <span class="token operator">&gt;</span> o<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span> <span class="token operator">&lt;</span> o<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">开始执行时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span>消息<span class="token number">1</span>消息<span class="token number">2</span>结束执行时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">31</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，消息 1 和消息 2 都实现了延迟执行的功能。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章讲了消息队列的使用场景：商品秒杀、系统解耦和日志记录，我们还介绍了 RabbitMQ 以及它的消息类型和它的特点等内容，同时还使用 Queue 的子类 LinkedList 实现了自定义消息队列，使用 DelayQueue 实现了自定义延迟消息队列。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础9-如何实现本地缓存和分布式缓存</title>
      <link href="2020/08/07/java-ji-chu-9-ru-he-shi-xian-ben-di-huan-cun-he-fen-bu-shi-huan-cun/"/>
      <url>2020/08/07/java-ji-chu-9-ru-he-shi-xian-ben-di-huan-cun-he-fen-bu-shi-huan-cun/</url>
      
        <content type="html"><![CDATA[<h3 id="如何实现本地缓存和分布式缓存？"><a href="#如何实现本地缓存和分布式缓存？" class="headerlink" title="如何实现本地缓存和分布式缓存？"></a>如何实现本地缓存和分布式缓存？</h3><blockquote><p>缓存（Cache）是指将程序或系统中常用的数据对象存储在像内存这样特定的介质中，以避免在每次程序调用时，重新创建或组织数据所带来的性能损耗，从而提高了系统的整体运行速度。</p></blockquote><a id="more"></a><blockquote><p>以目前的系统架构来说，用户的请求一般会先经过缓存系统，如果缓存中没有相关的数据，就会在其他系统中查询到相应的数据并保存在缓存中，最后返回给调用方。</p></blockquote><p><strong>缓存既然如此重要，那本课时我们就来重点看一下，应该如何实现本地缓存和分布式缓存？</strong></p><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a><strong>典型回答</strong></h4><hr><ul><li><p>本地缓存是指程序级别的缓存组件，它的特点是本地缓存和应用程序会运行在同一个进程中，所以本地缓存的操作会非常快，因为在同一个进程内也意味着不会有网络上的延迟和开销。</p></li><li><p>本地缓存适用于单节点非集群的应用场景，它的优点是快，缺点是多程序无法共享缓存，比如分布式用户 Session 会话信息保存，由于每次用户访问的服务器可能是不同的，如果不能共享缓存，那么就意味着每次的请求操作都有可能被系统阻止，因为会话信息只保存在某一个服务器上，当请求没有被转发到这台存储了用户信息的服务器时，就会被认为是非登录的违规操作。</p></li><li><p>除此之外，无法共享缓存可能会造成系统资源的浪费，这是因为每个系统都单独维护了一份属于自己的缓存，而同一份缓存有可能被多个系统单独进行存储，从而浪费了系统资源。</p><!-- more --></li><li><p><strong>分布式缓存是指将应用系统和缓存组件进行分离的缓存机制</strong>，这样多个应用系统就可以共享一套缓存数据了，它的特点是共享缓存服务和可集群部署，为缓存系统提供了高可用的运行环境，以及缓存共享的程序运行机制。</p></li><li><p>本地缓存可以使用 EhCache 和 Google 的 Guava 来实现，而分布式缓存可以使用 Redis 或 Memcached 来实现。</p></li><li><p>由于 Redis 本身就是独立的缓存系统，因此可以作为第三方来提供共享的数据缓存，而 Redis 的分布式支持主从、哨兵和集群的模式，所以它就可以支持分布式的缓存，而 Memcached 的情况也是类似的。</p></li></ul><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a><strong>考点分析</strong></h4><hr><blockquote><p>本文章的面试题显然不只是为了问你如何实现本地缓存和分布式缓存这么简单，主要考察的是你对缓存系统的理解，以及对缓存本质原理的洞察，和缓存相关的面试题还有这些：</p></blockquote><ul><li><p>更加深入的谈谈 EhCache 和 Guava。</p></li><li><p>如何自己手动实现一个缓存系统？</p></li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a><strong>知识扩展</strong></h4><hr><h5 id="1-EhCache-和-Guava-的使用及特点分析"><a href="#1-EhCache-和-Guava-的使用及特点分析" class="headerlink" title="1.EhCache 和 Guava 的使用及特点分析"></a><strong>1.EhCache 和 Guava 的使用及特点分析</strong></h5><hr><ul><li><p>EhCache 是目前比较流行的开源缓存框架，是用纯 Java 语言实现的简单、快速的 Cache 组件。EhCache 支持内存缓存和磁盘缓存，支持 LRU（Least Recently Used，最近很少使用）、LFU（Least Frequently Used，最近不常被使用）和 FIFO（First In First Out，先进先出）等多种淘汰算法，并且支持分布式的缓存系统。</p></li><li><p>EhCache 最初是独立的本地缓存框架组件，在后期的发展中（从 1.2 版）开始支持分布式缓存，分布式缓存主要支持 RMI、JGroups、EhCache Server 等方式。</p></li></ul><p><strong>LRU 和 LFU 的区别</strong></p><hr><ul><li>LRU 算法有一个缺点，比如说很久没有使用的一个键值，如果最近被访问了一次，那么即使它是使用次数最少的缓存，它也不会被淘汰；而 LFU 算法解决了偶尔被访问一次之后，数据就不会被淘汰的问题，它是根据总访问次数来淘汰数据的，其核心思想是“如果数据过去被访问多次，那么将来它被访问次数也会比较多”。因此 LFU 可以理解为比 LRU 更加合理的淘汰算法。</li></ul><p><strong>EhCache 基础使用</strong></p><hr><p>首先，需要在项目中添加 EhCache 框架，如果为 Maven 项目，则需要在 pom.xml 中添加如下配置：</p><pre class="line-numbers language-jav" data-language="jav"><code class="language-jav">&lt;!-- https://mvnrepository.com/artifact/org.ehcache/ehcache --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.ehcache&lt;/groupId&gt;    &lt;artifactId&gt;ehcache&lt;/artifactId&gt;    &lt;version&gt;3.8.1&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无配置参数的 EhCache 3.x 使用代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>ehcache<span class="token punctuation">.</span></span><span class="token class-name">Cache</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>ehcache<span class="token punctuation">.</span></span><span class="token class-name">CacheManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>ehcache<span class="token punctuation">.</span>config<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">CacheConfigurationBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>ehcache<span class="token punctuation">.</span>config<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">CacheManagerBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>ehcache<span class="token punctuation">.</span>config<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">ResourcePoolsBuilder</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EhCacheExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建缓存管理器</span>        <span class="token class-name">CacheManager</span> cacheManager <span class="token operator">=</span> <span class="token class-name">CacheManagerBuilder</span><span class="token punctuation">.</span><span class="token function">newCacheManagerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化 EhCache</span>        cacheManager<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建缓存（存储器）</span>        <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> myCache <span class="token operator">=</span> cacheManager<span class="token punctuation">.</span><span class="token function">createCache</span><span class="token punctuation">(</span><span class="token string">"MYCACHE"</span><span class="token punctuation">,</span>                <span class="token class-name">CacheConfigurationBuilder</span><span class="token punctuation">.</span><span class="token function">newCacheConfigurationBuilder</span><span class="token punctuation">(</span>                        <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                        <span class="token class-name">ResourcePoolsBuilder</span><span class="token punctuation">.</span><span class="token function">heap</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置缓存的最大容量</span>        <span class="token comment">// 设置缓存</span>        myCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"Hello,Java."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 读取缓存</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> myCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出缓存</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭缓存</span>        cacheManager<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li><p>CacheManager：是缓存管理器，可以通过单例或者多例的方式创建，也是 Ehcache 的入口类；</p></li><li><p>Cache：每个 CacheManager 可以管理多个 Cache，每个 Cache 可以采用 hash 的方式存储多个元素。</p></li></ul><p>它们的关系如下图所示：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/Ciqah16NsS2AUntaAAA6FUv7b_I176.png"></p><p>更多使用方法，<a href="http://www.ehcache.org/documentation/3.8/getting-started.html">请参考官方文档</a>。</p><blockquote><p>EhCache 的特点是，它使用起来比较简单，并且本身的 jar 包不是不大，简单的配置之后就可以正常使用了。EhCache 的使用比较灵活，它支持多种缓存策略的配置，它同时支持内存和磁盘缓存两种方式，在 EhCache 1.2 之后也开始支持分布式缓存了。</p></blockquote><blockquote><p>Guava Cache 是 Google 开源的 Guava 里的一个子功能，它是一个内存型的本地缓存实现方案，提供了线程安全的缓存操作机制。</p></blockquote><blockquote><p>Guava Cache 的架构设计灵感来源于 ConcurrentHashMap，它使用了多个 segments 方式的细粒度锁，在保证线程安全的同时，支持了高并发的使用场景。Guava Cache 类似于 Map 集合的方式对键值对进行操作，只不过多了过期淘汰等处理逻辑。</p></blockquote><p>在使用 Guava Cache 之前，我们需要先在 pom.xml 中添加 Guava 框架，配置如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>guava<span class="token operator">/</span>guava <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>guava<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>guava<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">28.2</span><span class="token operator">-</span>jre<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Guava Cache 的创建有两种方式，一种是 LoadingCache，另一种是 Callable，代码示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuavaExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建方式一：LoadingCache</span>        <span class="token class-name">LoadingCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> loadCache <span class="token operator">=</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 并发级别设置为 5，是指可以同时写缓存的线程数</span>                <span class="token punctuation">.</span><span class="token function">concurrencyLevel</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token comment">// 设置 8 秒钟过期</span>                <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                <span class="token comment">//设置缓存容器的初始容量为 10</span>                <span class="token punctuation">.</span><span class="token function">initialCapacity</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token comment">// 设置缓存最大容量为 100，超过之后就会按照 LRU 算法移除缓存项</span>                <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>                <span class="token comment">// 设置要统计缓存的命中率</span>                <span class="token punctuation">.</span><span class="token function">recordStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 设置缓存的移除通知</span>                <span class="token punctuation">.</span><span class="token function">removalListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RemovalListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRemoval</span><span class="token punctuation">(</span><span class="token class-name">RemovalNotification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> notification<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>notification<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" was removed, cause is "</span> <span class="token operator">+</span> notification<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token comment">// 指定 CacheLoader，缓存不存在时，可自动加载缓存</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">CacheLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                                <span class="token comment">// 自动加载缓存的业务</span>                                <span class="token keyword">return</span> <span class="token string">"cache-value:"</span> <span class="token operator">+</span> key<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置缓存</span>        loadCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c1"</span><span class="token punctuation">,</span> <span class="token string">"Hello, c1."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询缓存</span>        <span class="token class-name">String</span> val <span class="token operator">=</span> loadCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"c1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询不存在的缓存</span>        <span class="token class-name">String</span> noval <span class="token operator">=</span> loadCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"noval"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noval<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建方式二：Callable</span>    <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 设置缓存最大长度</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置缓存</span>    cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"Hello, k1."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 查询缓存</span>    <span class="token class-name">String</span> value <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 缓存不存在时，执行</span>            <span class="token keyword">return</span> <span class="token string">"nil"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出缓存值</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 查询缓存</span>    <span class="token class-name">String</span> nokey <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"nokey"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 缓存不存在时，执行</span>            <span class="token keyword">return</span> <span class="token string">"nil"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出缓存值</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nokey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Hello</span><span class="token punctuation">,</span> c1<span class="token punctuation">.</span>cache<span class="token operator">-</span>value<span class="token operator">:</span>noval<span class="token class-name">Hello</span><span class="token punctuation">,</span> k1<span class="token punctuation">.</span>nil<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出 Guava Cache 使用了编程式的 build 生成器进行创建和管理，让使用者可以更加灵活地操纵代码，并且 Guava Cache 提供了灵活多样的个性化配置，以适应各种使用场景。</p><h5 id="2-手动实现一个缓存系统"><a href="#2-手动实现一个缓存系统" class="headerlink" title="2.手动实现一个缓存系统"></a><strong>2.手动实现一个缓存系统</strong></h5><hr><blockquote><p>上面我们讲了通过 EhCache 和 Guava 实现缓存的方式，接下来我们来看看自己如何自定义一个缓存系统，当然这里说的是自己手动实现一个本地缓存。</p></blockquote><blockquote><p>要自定义一个缓存，首先要考虑的是数据类型，我们可以使用 Map 集合中的 HashMap、Hashtable 或 ConcurrentHashMap 来实现，非并发情况下我们可以使用 HashMap，并发情况下可以使用 Hashtable 或 ConcurrentHashMap，由于 ConcurrentHashMap 的性能比 Hashtable 的高，因此在高并发环境下我们可以倾向于选择 ConcurrentHashMap，不过它们对元素的操作都是类似的。</p></blockquote><blockquote><p>选定了数据类型之后，我们还需要考虑缓存过期和缓存淘汰等问题，在这里我们可以借鉴 Redis 对待过期键的处理策略。</p></blockquote><p>目前比较常见的过期策略有以下三种：</p><ul><li><p>定时删除</p></li><li><p>惰性删除</p></li><li><p>定期删除</p></li></ul><p><strong>定时删除</strong>是指在设置键值的过期时间时，创建一个定时事件，当到达过期时间后，事件处理器会执行删除过期键的操作。它的优点是可以及时的释放内存空间，缺点是需要开启多个延迟执行事件来处理清除任务，这样就会造成大量任务事件堆积，占用了很多系统资源。</p><p><strong>惰性删除</strong>不会主动删除过期键，而是在每次请求时才会判断此值是否过期，如果过期则删除键值，否则就返回 null。它的优点是只会占用少量的系统资源，缺点是清除不够及时，会造成一定的空间浪费。</p><p><strong>定期删除</strong>是指每隔一段时间检查一次数据库，随机删除一些过期键值。</p><p>Redis 使用的是定期删除和惰性删除这两种策略，我们本文章也会参照这两种策略。</p><blockquote><p>先来说一下自定义缓存的实现思路，首先需要定义一个存放缓存值的实体类，这个类里包含了缓存的相关信息，比如缓存的 key 和 value，缓存的存入时间、最后使用时间和命中次数（预留字段，用于支持 LFU 缓存淘汰），再使用 ConcurrentHashMap 保存缓存的 key 和 value 对象（缓存值的实体类），然后再新增一个缓存操作的工具类，用于添加和删除缓存，最后再缓存启动时，开启一个无限循环的线程用于检测并删除过期的缓存，实现代码如下。</p></blockquote><p>首先，定义一个缓存值实体类，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span><span class="token punctuation">;</span><span class="token comment">/** * 缓存实体类   */</span>   <span class="token annotation punctuation">@Getter</span>   <span class="token annotation punctuation">@Setter</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCache</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyCache</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>   <span class="token comment">// 缓存键</span>   <span class="token keyword">private</span> <span class="token class-name">Object</span> key<span class="token punctuation">;</span>   <span class="token comment">// 缓存值</span>   <span class="token keyword">private</span> <span class="token class-name">Object</span> value<span class="token punctuation">;</span>   <span class="token comment">// 最后访问时间</span>   <span class="token keyword">private</span> <span class="token keyword">long</span> lastTime<span class="token punctuation">;</span>   <span class="token comment">// 创建时间</span>   <span class="token keyword">private</span> <span class="token keyword">long</span> writeTime<span class="token punctuation">;</span>   <span class="token comment">// 存活时间</span>   <span class="token keyword">private</span> <span class="token keyword">long</span> expireTime<span class="token punctuation">;</span>   <span class="token comment">// 命中次数</span>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> hitCount<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">CacheValue</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> hitCount<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>hitCount<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后定义一个全局缓存对象，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentMap</span><span class="token punctuation">;</span><span class="token comment">/** * Cache 全局类   */</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheGlobal</span> <span class="token punctuation">{</span>   <span class="token comment">// 全局缓存对象</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MyCache</span><span class="token punctuation">&gt;</span></span> concurrentMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义过期缓存检测类的代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 过期缓存检测线程   */</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpireThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment">// 每十秒检测一次</span>               <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 缓存检测和清除的方法</span>               <span class="token function">expireCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment">/**    * 缓存检测和清除的方法      */</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">expireCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"检测缓存是否过期缓存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> <span class="token class-name">CacheGlobal</span><span class="token punctuation">.</span>concurrentMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">MyCache</span> cache <span class="token operator">=</span> <span class="token class-name">CacheGlobal</span><span class="token punctuation">.</span>concurrentMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 当前时间 - 写入时间</span>          <span class="token keyword">long</span> timoutTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> cache<span class="token punctuation">.</span><span class="token function">getWriteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> timoutTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 没过期</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment">// 清除过期缓存</span>          <span class="token class-name">CacheGlobal</span><span class="token punctuation">.</span>concurrentMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，我们要新增一个缓存操作的工具类，用于查询和存入缓存，实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 缓存操作工具类   */</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheUtils</span> <span class="token punctuation">{</span>   <span class="token comment">/**    * 添加缓存    * @param key    * @param value    * @param expire      */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> expire<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 非空判断，借助 commons-lang3</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token comment">// 当缓存存在时，更新缓存</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CacheGlobal</span><span class="token punctuation">.</span>concurrentMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">MyCache</span> cache <span class="token operator">=</span> <span class="token class-name">CacheGlobal</span><span class="token punctuation">.</span>concurrentMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>          cache<span class="token punctuation">.</span><span class="token function">setHitCount</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">getHitCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          cache<span class="token punctuation">.</span><span class="token function">setWriteTime</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          cache<span class="token punctuation">.</span><span class="token function">setLastTime</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          cache<span class="token punctuation">.</span><span class="token function">setExpireTime</span><span class="token punctuation">(</span>expire<span class="token punctuation">)</span><span class="token punctuation">;</span>          cache<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// 创建缓存</span>      <span class="token class-name">MyCache</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cache<span class="token punctuation">.</span><span class="token function">setKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      cache<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      cache<span class="token punctuation">.</span><span class="token function">setWriteTime</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cache<span class="token punctuation">.</span><span class="token function">setLastTime</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cache<span class="token punctuation">.</span><span class="token function">setHitCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cache<span class="token punctuation">.</span><span class="token function">setExpireTime</span><span class="token punctuation">(</span>expire<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">CacheGlobal</span><span class="token punctuation">.</span>concurrentMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token comment">/**    * 获取缓存    * @param key    * @return      */</span>      <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 非空判断</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token comment">// 字典中不存在</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CacheGlobal</span><span class="token punctuation">.</span>concurrentMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CacheGlobal</span><span class="token punctuation">.</span>concurrentMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token class-name">MyCache</span> cache <span class="token operator">=</span> <span class="token class-name">CacheGlobal</span><span class="token punctuation">.</span>concurrentMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token comment">// 惰性删除，判断缓存是否过期</span>      <span class="token keyword">long</span> timoutTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> cache<span class="token punctuation">.</span><span class="token function">getWriteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 缓存过期</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> timoutTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 清除过期缓存</span>          <span class="token class-name">CacheGlobal</span><span class="token punctuation">.</span>concurrentMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      cache<span class="token punctuation">.</span><span class="token function">setHitCount</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">getHitCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cache<span class="token punctuation">.</span><span class="token function">setLastTime</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后是调用缓存的测试代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCacheTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CacheUtils</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 存入缓存</span>        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"老王"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询缓存</span>        <span class="token class-name">String</span> val <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询不存在的缓存</span>        <span class="token class-name">String</span> noval <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"noval"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">老王<span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到目前为止，自定义缓存系统就已经实现完了。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr><p>本文章讲解了本地缓存和分布式缓存这两个概念和实现的具体方式，其中本地缓存可以通过自己手动编码或借助 Guava Cache 来实现，而分布式缓存可以使用 Redis 或 EhCache 来实现。此外，本课时重点演示了手动实现缓存代码的方式和实现思路，并使用定期删除和惰性删除策略来实现缓存的清除，希望看完本文章后能对你有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础8-动态代理是如何实现的</title>
      <link href="2020/08/01/java-ji-chu-8-dong-tai-dai-li-shi-ru-he-shi-xian-de/"/>
      <url>2020/08/01/java-ji-chu-8-dong-tai-dai-li-shi-ru-he-shi-xian-de/</url>
      
        <content type="html"><![CDATA[<h3 id="动态代理是如何实现的？JDK-Proxy-和-CGLib-有什么区别？"><a href="#动态代理是如何实现的？JDK-Proxy-和-CGLib-有什么区别？" class="headerlink" title="动态代理是如何实现的？JDK Proxy 和 CGLib 有什么区别？"></a>动态代理是如何实现的？JDK Proxy 和 CGLib 有什么区别？</h3><blockquote><p>90% 的程序员直接或者间接的使用过动态代理，无论是日志框架或 Spring 框架，它们都包含了动态代理的实现代码。动态代理是程序在运行期间动态构建代理对象和动态调用代理方法的一种机制。</p></blockquote><a id="more"></a><p><strong>本文章的面试题是，如何实现动态代理？JDK Proxy 和 CGLib 有什么区别？</strong></p><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a><strong>典型回答</strong></h4><hr><ul><li><p>动态代理的常用实现方式是反射。<strong>反射机制</strong>是指程序在运行期间可以访问、检测和修改其本身状态或行为的一种能力，使用反射我们可以调用任意一个类对象，以及类对象中包含的属性及方法。</p></li><li><p>但动态代理不止有反射一种实现方式，例如，动态代理可以通过 CGLib 来实现，而 CGLib 是基于 ASM（一个 Java 字节码操作框架）而非反射实现的。简单来说，动态代理是一种行为方式，而反射或 ASM 只是它的一种实现手段而已。</p></li></ul><h5 id="JDK-Proxy-和-CGLib-的区别主要体现在以下几个方面："><a href="#JDK-Proxy-和-CGLib-的区别主要体现在以下几个方面：" class="headerlink" title="JDK Proxy 和 CGLib 的区别主要体现在以下几个方面："></a><strong>JDK Proxy 和 CGLib 的区别主要体现在以下几个方面：</strong></h5><ul><li><p>JDK Proxy 是 Java 语言自带的功能，无需通过加载第三方类实现；</p></li><li><p>Java 对 JDK Proxy 提供了稳定的支持，并且会持续的升级和更新 JDK Proxy，例如 Java 8 版本中的 JDK Proxy 性能相比于之前版本提升了很多；</p></li><li><p>JDK Proxy 是通过拦截器加反射的方式实现的；</p></li><li><p>JDK Proxy 只能代理继承接口的类；</p></li><li><p>JDK Proxy 实现和调用起来比较简单；</p></li><li><p>CGLib 是第三方提供的工具，基于 ASM 实现的，性能比较高；</p></li><li><p>CGLib 无需通过接口来实现，它是通过实现子类的方式来完成调用的</p></li></ul><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a><strong>考点分析</strong></h4><hr><blockquote><p>本文章考察的是你对反射、动态代理及 CGLib 的了解，很多人经常会把反射和动态代理划为等号，但从严格意义上来说，这种想法是不正确的，真正能搞懂它们之间的关系，也体现了你扎实 Java 的基本功。和这个问题相关的知识点，还有以下几个：</p></blockquote><ul><li>你对 JDK Proxy 和 CGLib 的掌握程度。</li><li>Lombok 是通过反射实现的吗？</li><li>动态代理和静态代理有什么区别？</li><li>动态代理的使用场景有哪些？</li><li>Spring 中的动态代理是通过什么方式实现的？</li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a><strong>知识扩展</strong></h4><hr><h5 id="1-JDK-Proxy-和-CGLib-的使用及代码分析"><a href="#1-JDK-Proxy-和-CGLib-的使用及代码分析" class="headerlink" title="1.JDK Proxy 和 CGLib 的使用及代码分析"></a><strong>1.JDK Proxy 和 CGLib 的使用及代码分析</strong></h5><hr><p><strong>JDK Proxy 动态代理实现</strong></p><ul><li>JDK Proxy 动态代理的实现无需引用第三方类，只需要实现 InvocationHandler 接口，重写 invoke() 方法即可，整个实现代码如下所示：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token comment">/** * JDK Proxy 相关示例   */</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyExample</span> <span class="token punctuation">{</span>   <span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>       <span class="token keyword">void</span> <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The bus is running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Taxi</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The taxi is running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment">/**    * JDK Proxy      */</span>      <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span> <span class="token comment">// 代理对象</span>      <span class="token comment">// 获取到代理对象</span>      <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>          <span class="token comment">// 取得代理对象</span>          <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">/**       * 执行代理方法       * @param proxy  代理对象       * @param method 代理方法       * @param args   方法的参数       * @return       * @throws InvocationTargetException       * @throws IllegalAccessException         */</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>             <span class="token keyword">throws</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动态代理之前的业务处理."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行调用方法（此方法执行前后，可以进行相关业务处理）</span>         <span class="token keyword">return</span> result<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 执行 JDK Proxy</span>       <span class="token class-name">JDKProxy</span> jdkProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDKProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Car</span> carInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">)</span> jdkProxy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Taxi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       carInstance<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">动态代理之前的业务处理<span class="token punctuation">.</span><span class="token class-name">The</span> taxi is running<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看出 JDK Proxy 实现动态代理的核心是实现 Invocation 接口，我们查看 Invocation 的源码，会发现里面其实只有一个 invoke() 方法，源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>          <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为在动态代理中有一个重要的角色也就是代理器，它用于统一管理被代理的对象，显然 InvocationHandler 就是这个代理器，而 invoke() 方法则是触发代理的执行方法，我们通过实现 Invocation 接口来拥有动态代理的能力。</p><p><strong>CGLib 的实现</strong></p><p>在使用 CGLib 之前，我们要先在项目中引入 CGLib 框架，在 pom.xml 中添加如下配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>cglib<span class="token operator">/</span>cglib <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>cglib<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>cglib<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.3</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CGLib 实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>interview</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">Enhancer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodProxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CGLibExample</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The car is running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * CGLib 代理类 */</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CGLibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span> <span class="token comment">// 代理对象</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置父类为实例类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 回调方法</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建代理对象</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span>                            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法调用前业务处理."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行方法调用</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 执行 CGLib 的方法调用</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建 CGLib 代理类</span>    <span class="token class-name">CGLibProxy</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CGLibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化代理对象</span>    <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">)</span> proxy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行方法</span>    car<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">方法调用前业务处理<span class="token punctuation">.</span><span class="token class-name">The</span> car is running<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看出 CGLib 和 JDK Proxy 的实现代码比较类似，都是通过实现代理器的接口，再调用某一个方法完成动态代理的，唯一不同的是，CGLib 在初始化被代理类时，是通过 Enhancer 对象把代理对象设置为被代理类的子类来实现动态代理的。因此被代理类不能被关键字 final 修饰，如果被 final 修饰，再使用 Enhancer 设置父类时会报错，动态代理的构建会失败。</p><h5 id="2-Lombok-原理分析"><a href="#2-Lombok-原理分析" class="headerlink" title="2.Lombok 原理分析"></a><strong>2.Lombok 原理分析</strong></h5><hr><p>在开始讲 Lombok 的原理之前，我们先来简单地介绍一下 Lombok，它属于 Java 的一个热门工具类，使用它可以有效的解决代码工程中那些繁琐又重复的代码，如 Setter、Getter、toString、equals 和 hashCode 等等，向这种方法都可以使用 Lombok 注解来完成。</p><p>例如，我们使用比较多的 Setter 和 Getter 方法，在没有使用 Lombok 之前，代码是这样的：</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class Person {    private Integer id;    private String name;    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用 Lombok 之后，代码是这样的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出 Lombok 让代码简单和优雅了很多。</p><blockquote><p>小贴士：如果在项目中使用了 Lombok 的 Getter 和 Setter 注解，那么想要在编码阶段成功调用对象的 set 或 get 方法，我们需要在 IDE 中安装 Lombok 插件才行，比如 Idea 的插件如下图所示：</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/Ciqah16HCB6AcjsPAAIhVz8yo1o620.png"></p><p>接下来讲讲 Lombok 的原理。</p><blockquote><p>Lombok 的实现和反射没有任何关系，前面我们说了反射是程序在运行期的一种自省（introspect）能力，而 Lombok 的实现是在编译期就完成了，为什么这么说呢？</p></blockquote><ul><li>回到我们刚才 Setter/Getter 的方法，当我们打开 Person 的编译类就会发现，使用了 Lombok 的 @Data 注解后的源码竟然是这样的：</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/Cgq2xl6HCB6AXaC5AAHG477g0yQ093.png"></p><p>可以看出 Lombok 是在编译期就为我们生成了对应的字节码。</p><blockquote><p>其实 Lombok 是基于 Java 1.6 实现的 JSR 269: Pluggable Annotation Processing API 来实现的，也就是通过编译期自定义注解处理器来实现的，它的执行步骤如下：</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/Cgq2xl6HCB-AAsAKAACfTHorgDA111.png"></p><ul><li>从流程图中可以看出，在编译期阶段，当 Java 源码被抽象成语法树（AST）之后，Lombok 会根据自己的注解处理器动态修改 AST，增加新的代码（节点），在这一切执行之后就生成了最终的字节码（.class）文件，这就是 Lombok 的执行原理。</li></ul><h5 id="3-动态代理知识点扩充"><a href="#3-动态代理知识点扩充" class="headerlink" title="3.动态代理知识点扩充"></a><strong>3.动态代理知识点扩充</strong></h5><hr><ul><li><p>当面试官问动态代理的时候，经常会问到它和静态代理的区别？静态代理其实就是事先写好代理类，可以手工编写也可以使用工具生成，但它的缺点是每个业务类都要对应一个代理类，特别不灵活也不方便，于是就有了动态代理。</p></li><li><p>动态代理的常见使用场景有 RPC 框架的封装、AOP（面向切面编程）的实现、JDBC 的连接等。</p></li><li><p>Spring 框架中同时使用了两种动态代理 JDK Proxy 和 CGLib，当 Bean 实现了接口时，Spring 就会使用 JDK Proxy，在没有实现接口时就会使用 CGLib，我们也可以在配置中指定强制使用 CGLib，只需要在 Spring 配置中添加 &lt;aop:aspectj-autoproxy proxy-target-class=”true”/&gt; 即可。</p></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h4><hr><p>本文章介绍了 JDK Proxy 和 CGLib 的区别，JDK Proxy 是 Java 语言内置的动态代理，必须要通过实现接口的方式来代理相关的类，而 CGLib 是第三方提供的基于 ASM 的高效动态代理类，它通过实现被代理类的子类来实现动态代理的功能，因此被代理的类不能使用 final 修饰。</p><p>除了 JDK Proxy 和 CGLib 之外，我们还讲了 Java 中常用的工具类 Lombok 的实现原理，它其实和反射是没有任何关系的；最后讲了动态代理的使用场景以及 Spring 中动态代理的实现方式，希望本文可以帮助到你。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA的database插件无法链接mysql</title>
      <link href="2020/07/30/idea-de-database-cha-jian-wu-fa-lian-jie-mysql/"/>
      <url>2020/07/30/idea-de-database-cha-jian-wu-fa-lian-jie-mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="IDEA的database插件无法链接mysql的解决办法（08001错误）"><a href="#IDEA的database插件无法链接mysql的解决办法（08001错误）" class="headerlink" title="[IDEA的database插件无法链接mysql的解决办法（08001错误）]"></a>[IDEA的database插件无法链接mysql的解决办法（08001错误）]</h3><p> <strong>1、问题</strong></p><hr><a id="more"></a><p>首先先说问题，用navicat链接数据库正常，mysql控制台操作正常，但是用IDEA的数据库插件链接一直报 08001 错误，具体见下图：</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200811223326845.png"></p><p><strong>2、错误提示：</strong></p><hr><blockquote><p>Connection to eshop@localhost failed.<br>[08001] Could not create connection to database server. Attempted reconnect 3 times. Giving up.</p></blockquote><hr><ul><li>输入对应的个人信息<ul><li>User:root</li><li>Password:数据密码</li><li>Database:mybatis(自己需连接的数据库名字)</li></ul></li></ul><!-- more --><p><strong>3、错误原因</strong></p><hr><ul><li><p>未设置时区，将时区设置为GMT（格林尼标准时间）即可。</p></li><li><p>在URL后添加： ?serverTimezone=GMT，如图所示</p><ul><li>出现下图现象表明连接成功！</li></ul></li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200811223832505.png"></p><p><strong>4、点击Apply</strong>  </p><hr><ul><li>点击<strong>Apply</strong>、<strong>OK</strong>后即可返回查看此页面，表明连接成功！</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200811224929458.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础7-深克隆和浅克隆的区别</title>
      <link href="2020/07/30/java-ji-chu-7-shen-ke-long-he-qian-ke-long-de-qu-bie/"/>
      <url>2020/07/30/java-ji-chu-7-shen-ke-long-he-qian-ke-long-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h3 id="深克隆和浅克隆有什么区别？它的实现方式有哪些？"><a href="#深克隆和浅克隆有什么区别？它的实现方式有哪些？" class="headerlink" title="深克隆和浅克隆有什么区别？它的实现方式有哪些？"></a>深克隆和浅克隆有什么区别？它的实现方式有哪些？</h3><blockquote><p>使用克隆可以为我们快速地构建出一个已有对象的副本，它属于 Java 基础的一部分，也是面试中常被问到的知识点之一。</p></blockquote><a id="more"></a><p><strong>我们本文章的面试题是，什么是浅克隆和深克隆？如何实现克隆？</strong></p><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a><strong>典型回答</strong></h4><hr><blockquote><p><strong>浅克隆</strong>（Shadow Clone）是把原型对象中成员变量为值类型的属性都复制给克隆对象，把原型对象中成员变量为引用类型的引用地址也复制给克隆对象，也就是原型对象中如果有成员变量为引用对象，则此引用对象的地址是共享给原型对象和克隆对象的。</p></blockquote><blockquote><p>简单来说就是浅克隆只会复制原型对象，但不会复制它所引用的对象，如下图所示：</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/1.png"></p><blockquote><p><strong>深克隆</strong>（Deep Clone）是将原型对象中的所有类型，无论是值类型还是引用类型，都复制一份给克隆对象，也就是说深克隆会把原型对象和原型对象所引用的对象，都复制一份给克隆对象，如下图所示：</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/2.png"></p><p>在 Java 语言中要实现克隆则需要实现 Cloneable 接口，并重写 Object 类中的 clone() 方法，实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloneExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建被赋值对象</span>        <span class="token class-name">People</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 克隆 p1 对象</span>        <span class="token class-name">People</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">)</span> p1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打印名称</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2:"</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>        <span class="token comment">// 属性</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token comment">/**         * 重写 clone 方法         * @throws CloneNotSupportedException         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序执行的结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">p2<span class="token operator">:</span><span class="token class-name">Java</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a><strong>考点分析</strong></h4><hr><p>克隆相关的面试题不算太难，但因为使用频率不高，因此很容易被人忽略，面试官通常会在一面或者二面的时候问到此知识点，和它相关的面试题还有以下这些：</p><ul><li><p>在 java.lang.Object 中对 clone() 方法的约定有哪些？</p></li><li><p>Arrays.copyOf() 是深克隆还是浅克隆？</p></li><li><p>深克隆的实现方式有几种？</p></li><li><p>Java 中的克隆为什么要设计成，既要实现空接口 Cloneable，还要重写 Object 的 clone() 方法？</p></li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a><strong>知识扩展</strong></h4><hr><p>clone() 源码分析<br>要想真正的了解克隆，首先要从它的源码入手，代码如下：</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">/** * Creates and returns a copy of this object.  The precise meaning * of "copy" may depend on the class of the object. The general * intent is that, for any object {@code x}, the expression: * &lt;blockquote&gt; * &lt;pre&gt; * x.clone() != x&lt;/pre&gt;&lt;/blockquote&gt; * will be true, and that the expression: * &lt;blockquote&gt; * &lt;pre&gt; * x.clone().getClass() == x.getClass()&lt;/pre&gt;&lt;/blockquote&gt; * will be {@code true}, but these are not absolute requirements. * While it is typically the case that: * &lt;blockquote&gt; * &lt;pre&gt; * x.clone().equals(x)&lt;/pre&gt;&lt;/blockquote&gt; * will be {@code true}, this is not an absolute requirement. * &lt;p&gt; * By convention, the returned object should be obtained by calling * {@code super.clone}.  If a class and all of its superclasses (except * {@code Object}) obey this convention, it will be the case that * {@code x.clone().getClass() == x.getClass()}. * &lt;p&gt; * By convention, the object returned by this method should be independent * of this object (which is being cloned).  To achieve this independence, * it may be necessary to modify one or more fields of the object returned * by {@code super.clone} before returning it.  Typically, this means * copying any mutable objects that comprise the internal "deep structure" * of the object being cloned and replacing the references to these * objects with references to the copies.  If a class contains only * primitive fields or references to immutable objects, then it is usually * the case that no fields in the object returned by {@code super.clone} * need to be modified. * &lt;p&gt; * ......   */   protected native Object clone() throws CloneNotSupportedException;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上源码的注释信息中我们可以看出，Object 对 clone() 方法的约定有三条：</p><ul><li><p>对于所有对象来说，x.clone() !=x 应当返回 true，因为克隆对象与原对象不是同一个对象；</p></li><li><p>对于所有对象来说，x.clone().getClass() == x.getClass() 应当返回 true，因为克隆对象与原对象的类型是一样的；</p></li><li><p>对于所有对象来说，x.clone().equals(x) 应当返回 true，因为使用 equals 比较时，它们的值都是相同的。</p></li></ul><p>除了注释信息外，我们看 clone() 的实现方法，发现 clone() 是使用 native 修饰的本地方法，因此执行的性能会很高，并且它返回的类型为 Object，因此在调用克隆之后要把对象强转为目标类型才行。</p><p><strong>Arrays.copyOf()</strong><br>如果是数组类型，我们可以直接使用 Arrays.copyOf() 来实现克隆，实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">People</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">People</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改原型对象的第一个元素的值</span>o1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Jdk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o1:"</span> <span class="token operator">+</span> o1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o2:"</span> <span class="token operator">+</span> o2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">o1<span class="token operator">:</span><span class="token class-name">Jdk</span>o2<span class="token operator">:</span><span class="token class-name">Jdk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从结果可以看出，我们在修改克隆对象的第一个元素之后，原型对象的第一个元素也跟着被修改了，这说明 Arrays.copyOf() 其实是一个浅克隆。</p><p>因为数组比较特殊数组本身就是引用类型，因此在使用 Arrays.copyOf() 其实只是把引用地址复制了一份给克隆对象，如果修改了它的引用对象，那么指向它的（引用地址）所有对象都会发生改变，因此看到的结果是，修改了克隆对象的第一个元素，原型对象也跟着被修改了。</p><p><strong>深克隆实现方式汇总</strong></p><hr><p>深克隆的实现方式有很多种，大体可以分为以下几类：</p><ul><li><p>所有对象都实现克隆方法；</p></li><li><p>通过构造方法实现深克隆；</p></li><li><p>使用 JDK 自带的字节流实现深克隆；</p></li><li><p>使用第三方工具实现深克隆，比如 Apache Commons Lang；</p></li><li><p>使用 JSON 工具类实现深克隆，比如 Gson、FastJSON 等。</p></li></ul><p>接下来我们分别来实现以上这些方式，在开始之前先定义一个公共的用户类，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 用户类   */</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span> <span class="token comment">// 包含 Address 引用对象</span>   <span class="token comment">// 忽略构造方法、set、get 方法</span>   <span class="token punctuation">}</span>   <span class="token comment">/** * 地址类   */</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>   <span class="token comment">// 忽略构造方法、set、get 方法</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出在 People 对象中包含了一个引用对象 Address。</p><h5 id="1-所有对象都实现克隆"><a href="#1-所有对象都实现克隆" class="headerlink" title="1.所有对象都实现克隆"></a><strong>1.所有对象都实现克隆</strong></h5><hr><p>这种方式我们需要修改 People 和 Address 类，让它们都实现 Cloneable 的接口，让所有的引用对象都实现克隆，从而实现 People 类的深克隆，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloneExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>          <span class="token comment">// 创建被赋值对象</span>          <span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">People</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 克隆 p1 对象</span>          <span class="token class-name">People</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 修改原型对象</span>          p1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">"西安"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 输出 p1 和 p2 地址信息</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1:"</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                  <span class="token string">" p2:"</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用户类     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>        <span class="token comment">/**         * 重写 clone 方法         * @throws CloneNotSupportedException         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token class-name">People</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>            <span class="token class-name">People</span> people <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            people<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引用类型克隆赋值</span>            <span class="token keyword">return</span> people<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 忽略构造方法、set、get 方法</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 地址类     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>        <span class="token comment">/**         * 重写 clone 方法         * @throws CloneNotSupportedException         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token class-name">Address</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 忽略构造方法、set、get 方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">p1<span class="token operator">:</span>西安 p2<span class="token operator">:</span>北京<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从结果可以看出，当我们修改了原型对象的引用属性之后，并没有影响克隆对象，这说明此对象已经实现了深克隆。</p><h5 id="2-通过构造方法实现深克隆"><a href="#2-通过构造方法实现深克隆" class="headerlink" title="2.通过构造方法实现深克隆"></a><strong>2.通过构造方法实现深克隆</strong></h5><hr><p>《Effective Java》 中推荐使用构造器（Copy Constructor）来实现深克隆，如果构造器的参数为基本数据类型或字符串类型则直接赋值，如果是对象类型，则需要重新 new 一个对象，实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建对象</span>        <span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">People</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 调用构造函数克隆对象</span>    <span class="token class-name">People</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 修改原型对象</span>    p1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">"西安"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出 p1 和 p2 地址信息</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1:"</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">" p2:"</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 用户类 */</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token comment">// 忽略构造方法、set、get 方法</span><span class="token punctuation">}</span><span class="token comment">/** * 地址类 */</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token comment">// 忽略构造方法、set、get 方法</span><span class="token punctuation">}</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">p1<span class="token operator">:</span>西安 p2<span class="token operator">:</span>北京<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从结果可以看出，当我们修改了原型对象的引用属性之后，并没有影响克隆对象，这说明此对象已经实现了深克隆。</p><h5 id="3-通过字节流实现深克隆"><a href="#3-通过字节流实现深克隆" class="headerlink" title="3.通过字节流实现深克隆"></a><strong>3.通过字节流实现深克隆</strong></h5><hr><p>通过 JDK 自带的字节流实现深克隆的方式，是先将要原型对象写入到内存中的字节流，然后再从这个字节流中读出刚刚存储的信息，来作为一个新的对象返回，那么这个新对象和原型对象就不存在任何地址上的共享，这样就实现了深克隆，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThirdExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建对象</span>        <span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">People</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 通过字节流实现克隆</span>    <span class="token class-name">People</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">)</span> <span class="token class-name">StreamClone</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 修改原型对象</span>    p1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">"西安"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出 p1 和 p2 地址信息</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1:"</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">" p2:"</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 通过字节流实现克隆 */</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StreamClone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token class-name">People</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">T</span> cloneObj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 写入字节流</span>            <span class="token class-name">ByteArrayOutputStream</span> bo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bo<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 分配内存,写入原始对象,生成新对象</span>            <span class="token class-name">ByteArrayInputStream</span> bi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bo<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取上面的输出字节流</span>            <span class="token class-name">ObjectInputStream</span> oi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bi<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 返回生成的新对象</span>            cloneObj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> oi<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oi<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 用户类 */</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token comment">// 忽略构造方法、set、get 方法</span><span class="token punctuation">}</span><span class="token comment">/** * 地址类 */</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token comment">// 忽略构造方法、set、get 方法</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">p1<span class="token operator">:</span>西安 p2<span class="token operator">:</span>北京<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此方式需要注意的是，由于是通过字节流序列化实现的深克隆，因此每个对象必须能被序列化，必须实现 Serializable 接口，标识自己可以被序列化，否则会抛出异常 (java.io.NotSerializableException)。</p><h5 id="4-通过第三方工具实现深克隆"><a href="#4-通过第三方工具实现深克隆" class="headerlink" title="4.通过第三方工具实现深克隆"></a><strong>4.通过第三方工具实现深克隆</strong></h5><hr><p>本文章使用 Apache Commons Lang 来实现深克隆，实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">SerializationUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token comment">/** * 深克隆实现方式四：通过 apache.commons.lang 实现   */</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FourthExample</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>       <span class="token comment">// 创建对象</span>       <span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">People</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用 apache.commons.lang 克隆对象</span><span class="token class-name">People</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">)</span> <span class="token class-name">SerializationUtils</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改原型对象</span>p1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">"西安"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出 p1 和 p2 地址信息</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1:"</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">" p2:"</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">/** * 用户类   */</span>   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>   <span class="token comment">// 忽略构造方法、set、get 方法</span>   <span class="token punctuation">}</span><span class="token comment">/** * 地址类   */</span>   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>   <span class="token comment">// 忽略构造方法、set、get 方法</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">p1<span class="token operator">:</span>西安 p2<span class="token operator">:</span>北京<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看出此方法和第三种实现方式类似，都需要实现 Serializable 接口，都是通过字节流的方式实现的，只不过这种实现方式是第三方提供了现成的方法，让我们可以直接调用。</p><h5 id="5-通过-JSON-工具类实现深克隆"><a href="#5-通过-JSON-工具类实现深克隆" class="headerlink" title="5.通过 JSON 工具类实现深克隆"></a><strong>5.通过 JSON 工具类实现深克隆</strong></h5><hr><p>本文章我们使用 Google 提供的 JSON 转化工具 Gson 来实现，其他 JSON 转化工具类也是类似的，实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span></span><span class="token class-name">Gson</span><span class="token punctuation">;</span><span class="token comment">/** * 深克隆实现方式五：通过 JSON 工具实现   */</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FifthExample</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>       <span class="token comment">// 创建对象</span>       <span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">People</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 调用 Gson 克隆对象</span>       <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">People</span> p2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">People</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 修改原型对象</span>       p1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">"西安"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 输出 p1 和 p2 地址信息</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1:"</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">" p2:"</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token comment">/** * 用户类   */</span>   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>   <span class="token comment">// 忽略构造方法、set、get 方法</span>   <span class="token punctuation">}</span><span class="token comment">/** * 地址类   */</span>   <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>   <span class="token comment">// 忽略构造方法、set、get 方法</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">p1<span class="token operator">:</span>西安 p2<span class="token operator">:</span>北京<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 JSON 工具类会先把对象转化成字符串，再从字符串转化成新的对象，因为新对象是从字符串转化而来的，因此不会和原型对象有任何的关联，这样就实现了深克隆，其他类似的 JSON 工具类实现方式也是一样的。</p><h5 id="克隆设计理念猜想"><a href="#克隆设计理念猜想" class="headerlink" title="克隆设计理念猜想"></a><strong>克隆设计理念猜想</strong></h5><hr><p>对于克隆为什么要这样设计，官方没有直接给出答案，我们只能凭借一些经验和源码文档来试着回答一下这个问题。Java 中实现克隆需要两个主要的步骤，一是 实现 Cloneable 空接口，二是重写 Object 的 clone() 方法再调用父类的克隆方法 (super.clone())，那为什么要这么做？</p><p>从源码中可以看出 Cloneable 接口诞生的比较早，JDK 1.0 就已经存在了，因此从那个时候就已经有克隆方法了，那我们怎么来标识一个类级别对象拥有克隆方法呢？克隆虽然重要，但我们不能给每个类都默认加上克隆，这显然是不合适的，那我们能使用的手段就只有这几个了：</p><ul><li><p>在类上新增标识，此标识用于声明某个类拥有克隆的功能，像 final 关键字一样；</p></li><li><p>使用 Java 中的注解；</p></li><li><p>实现某个接口；</p></li><li><p>继承某个类。</p></li></ul><p>先说第一个，为了一个重要但不常用的克隆功能， 单独新增一个类标识，这显然不合适；再说第二个，因为克隆功能出现的比较早，那时候还没有注解功能，因此也不能使用；第三点基本满足我们的需求，第四点和第一点比较类似，为了一个克隆功能需要牺牲一个基类，并且 Java 只能单继承，因此这个方案也不合适。采用排除法，无疑使用实现接口的方式是那时最合理的方案了，而且在 Java 语言中一个类可以实现多个接口。</p><p>那为什么要在 Object 中添加一个 clone() 方法呢？</p><p>因为 clone() 方法语义的特殊性，因此最好能有 JVM 的直接支持，既然要 JVM 直接支持，就要找一个 API 来把这个方法暴露出来才行，最直接的做法就是把它放入到一个所有类的基类 Object 中，这样所有类就可以很方便地调用到了。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h4><hr><p>本文章讲了浅克隆和深克隆的概念，以及 Object 对 clone() 方法的约定；还演示了数组的 copyOf() 方法其实为浅克隆，以及深克隆的 5 种实现方式；最后我们讲了 Java 语言中克隆的设计思路猜想，希望这些内容能切实的帮助到你。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础6-谈谈你对锁的理解和如何手动模拟一个死锁</title>
      <link href="2020/07/29/java-ji-chu-6-tan-tan-ni-dui-suo-de-li-jie-he-ru-he-shou-dong-mo-ni-yi-ge-si-suo/"/>
      <url>2020/07/29/java-ji-chu-6-tan-tan-ni-dui-suo-de-li-jie-he-ru-he-shou-dong-mo-ni-yi-ge-si-suo/</url>
      
        <content type="html"><![CDATA[<h3 id="谈谈你对锁的理解？如何手动模拟一个死锁？"><a href="#谈谈你对锁的理解？如何手动模拟一个死锁？" class="headerlink" title="谈谈你对锁的理解？如何手动模拟一个死锁？"></a>谈谈你对锁的理解？如何手动模拟一个死锁？</h3><blockquote><p>在并发编程中有两个重要的概念：线程和锁，多线程是一把双刃剑，它在提高程序性能的同时，也带来了编码的复杂性，对开发者的要求也提高了一个档次。而锁的出现就是为了保障多线程在同时操作一组资源时的数据一致性，当我们给资源加上锁之后，只有拥有此锁的线程才能操作此资源，而其他线程只能排队等待使用此锁。当然，在所有的面试中也都少不了关于“锁”方面的相关问题。</p></blockquote><a id="more"></a><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a><strong>典型回答</strong></h4><hr><p>死锁是指两个线程同时占用两个资源，又在彼此等待对方释放锁资源，如下图所示：</p><p><img src="https://s1.ax1x.com/2020/08/01/aGyNCD.png"></p><p>死锁的代码演示如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">deadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 死锁</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 死锁     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> lock1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> lock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 线程一拥有 lock1 试图获取 lock2</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取 lock1 成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 试图获取锁 lock2</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 线程二拥有 lock2 试图获取 lock1</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取 lock2 成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 试图获取锁 lock1</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序执行结果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">获取 lock1 成功获取 lock2 成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>可以看出当我们使用线程一拥有锁 lock1 的同时试图获取 lock2，而线程二在拥有 lock2 的同时试图获取 lock1，这样就会造成彼此都在等待对方释放资源，于是就形成了<strong>死锁</strong>。</p></blockquote><blockquote><p>锁是指在并发编程中，当有多个线程同时操作一个资源时，为了保证数据操作的正确性，我们需要让多线程排队一个一个的操作此资源，而这个过程就是给资源加锁和释放锁的过程，就好像去公共厕所一样，必须一个一个排队使用，并且在使用时需要锁门和开门一样。</p></blockquote><hr><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a><strong>考点分析</strong></h4><hr><blockquote><p>锁的概念不止出现在 Java 语言中，比如<strong>乐观锁和悲观锁</strong>其实很早就存在于数据库中了。锁的概念其实不难理解，但要真正的了解锁的原理和实现过程，才能打动面试官。</p></blockquote><p>和锁相关的面试问题，还有以下几个：</p><ul><li>什么是乐观锁和悲观锁？它们的应用都有哪些？乐观锁有什么问题？</li><li>什么是可重入锁？用代码如何实现？它的实现原理是什么？</li><li>什么是共享锁和独占锁？</li></ul><hr><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a><strong>知识扩展</strong></h4><h5 id="1、悲观锁和乐观锁"><a href="#1、悲观锁和乐观锁" class="headerlink" title="1、悲观锁和乐观锁"></a><strong>1、悲观锁和乐观锁</strong></h5><hr><blockquote><p>悲观锁指的是数据对外界的修改采取保守策略，它认为线程很容易会把数据修改掉，因此在整个数据被修改的过程中都会采取锁定状态，直到一个线程使用完，其他线程才可以继续使用。</p></blockquote><p>我们来看一下悲观锁的实现流程，以 synchronized 为例，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">LockExample</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用反编译工具查到的结果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Compiled</span> from <span class="token string">"LockExample.java"</span><span class="token keyword">public</span> <span class="token keyword">class</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>ext<span class="token punctuation">.</span><span class="token class-name">LockExample</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>interview<span class="token punctuation">.</span>ext<span class="token punctuation">.</span><span class="token class-name">LockExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> aload_0       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object."&lt;init&gt;":()V</span>       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// class com/lagou/interview/ext/LockExample</span>       <span class="token number">2</span><span class="token operator">:</span> dup       <span class="token number">3</span><span class="token operator">:</span> astore_1       <span class="token number">4</span><span class="token operator">:</span> monitorenter <span class="token comment">// 加锁</span>       <span class="token number">5</span><span class="token operator">:</span> getstatic     #<span class="token number">3</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>       <span class="token number">8</span><span class="token operator">:</span> ldc           #<span class="token number">4</span>                  <span class="token comment">// String lock</span>      <span class="token number">10</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>      <span class="token number">13</span><span class="token operator">:</span> aload_1      <span class="token number">14</span><span class="token operator">:</span> monitorexit <span class="token comment">// 释放锁</span>      <span class="token number">15</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">23</span>      <span class="token number">18</span><span class="token operator">:</span> astore_2      <span class="token number">19</span><span class="token operator">:</span> aload_1      <span class="token number">20</span><span class="token operator">:</span> monitorexit      <span class="token number">21</span><span class="token operator">:</span> aload_2      <span class="token number">22</span><span class="token operator">:</span> athrow      <span class="token number">23</span><span class="token operator">:</span> <span class="token keyword">return</span>    <span class="token class-name">Exception</span> table<span class="token operator">:</span>       from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type           <span class="token number">5</span>    <span class="token number">15</span>    <span class="token number">18</span>   any          <span class="token number">18</span>    <span class="token number">21</span>    <span class="token number">18</span>   any<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以看出被 synchronized 修饰的代码块，在执行之前先使用 monitorenter 指令加锁，然后在执行结束之后再使用 monitorexit 指令释放锁资源，在整个执行期间此代码都是锁定的状态，这就是<strong>典型悲观锁的实现流程</strong>。</li><li>乐观锁和悲观锁的概念恰好相反，乐观锁认为一般情况下数据在修改时不会出现冲突，所以在数据访问之前不会加锁，只是在数据提交更改时，才会对数据进行检测。</li><li>Java 中的乐观锁大部分都是通过 CAS（Compare And Swap，比较并交换）操作实现的，CAS 是一个多线程同步的原子指令，CAS 操作包含三个重要的信息，即内存位置、预期原值和新值。如果内存位置的值和预期的原值相等的话，那么就可以把该位置的值更新为新值，否则不做任何修改。</li><li>CAS 可能会造成 ABA 的问题，ABA 问题指的是，线程拿到了最初的预期原值 A，然而在将要进行 CAS 的时候，被其他线程抢占了执行权，把此值从 A 变成了 B，然后其他线程又把此值从 B 变成了 A，然而此时的 A 值已经并非原来的 A 值了，但最初的线程并不知道这个情况，在它进行 CAS 的时候，只对比了预期原值为 A 就进行了修改，这就造成了 ABA 的问题。</li><li>以警匪剧为例，假如某人把装了 100W 现金的箱子放在了家里，几分钟之后要拿它去赎人，然而在趁他不注意的时候，进来了一个小偷，用空箱子换走了装满钱的箱子，当某人进来之后看到箱子还是一模一样的，他会以为这就是原来的箱子，就拿着它去赎人了，这种情况肯定有问题，因为箱子已经是空的了，这就是 ABA 的问题。</li><li>ABA 的常见处理方式是添加版本号，每次修改之后更新版本号，拿上面的例子来说，假如每次移动箱子之后，箱子的位置就会发生变化，而这个变化的位置就相当于“版本号”，当某人进来之后发现箱子的位置发生了变化就知道有人动了手脚，就会放弃原有的计划，这样就解决了 ABA 的问题。</li></ul><blockquote><p>JDK 在 1.5 时提供了 AtomicStampedReference 类也可以解决 ABA 的问题，此类维护了一个“版本号” Stamp，每次在比较时不止比较当前值还比较版本号，这样就解决了 ABA 的问题。</p></blockquote><p>相关源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">T</span> reference<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> stamp<span class="token punctuation">;</span> <span class="token comment">// “版本号”</span>        <span class="token keyword">private</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token class-name">T</span> reference<span class="token punctuation">,</span> <span class="token keyword">int</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reference <span class="token operator">=</span> reference<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>stamp <span class="token operator">=</span> stamp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">T</span> reference<span class="token punctuation">,</span> <span class="token keyword">int</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>reference<span class="token punctuation">,</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 比较并设置</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">V</span>   expectedReference<span class="token punctuation">,</span>                                 <span class="token class-name">V</span>   newReference<span class="token punctuation">,</span>                                 <span class="token keyword">int</span> expectedStamp<span class="token punctuation">,</span> <span class="token comment">// 原版本号</span>                                 <span class="token keyword">int</span> newStamp<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 新版本号</span>        <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> current <span class="token operator">=</span> pair<span class="token punctuation">;</span>        <span class="token keyword">return</span>            expectedReference <span class="token operator">==</span> current<span class="token punctuation">.</span>reference <span class="token operator">&amp;&amp;</span>            expectedStamp <span class="token operator">==</span> current<span class="token punctuation">.</span>stamp <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>newReference <span class="token operator">==</span> current<span class="token punctuation">.</span>reference <span class="token operator">&amp;&amp;</span>              newStamp <span class="token operator">==</span> current<span class="token punctuation">.</span>stamp<span class="token punctuation">)</span> <span class="token operator">||</span>             <span class="token function">casPair</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>newReference<span class="token punctuation">,</span> newStamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//.......省略其他源码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看出它在修改时会进行原值比较和版本号比较，当比较成功之后会修改值并修改版本号。</p></blockquote><ul><li><ul><li>小贴士：乐观锁有一个优点，它在提交的时候才进行锁定的，因此不会造成死锁。</li></ul></li></ul><h5 id="2、可重入锁"><a href="#2、可重入锁" class="headerlink" title="2、可重入锁"></a><strong>2、可重入锁</strong></h5><hr><blockquote><p>可重入锁也叫<strong>递归锁</strong>，指的是同一个线程，如果外面的函数拥有此锁之后，内层的函数也可以继续获取该锁。在 Java 语言中 ReentrantLock 和 synchronized 都是可重入锁。</p></blockquote><p>下面我们用 synchronized 来演示一下什么是可重入锁，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reentrantA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可重入锁</span>    <span class="token punctuation">}</span>    <span class="token comment">/**   * 可重入锁 A 方法     /         private synchronized static void reentrantA() {     System.out.println(Thread.currentThread().getName() + "：执行 reentrantA");     reentrantB();         }         /**        * 可重入锁 B 方法          /              private synchronized static void reentrantB() {          System.out.println(Thread.currentThread().getName() + "：执行 reentrantB");              }          }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码的执行结果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">main：执行 reentrantAmain：执行 reentrantB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>从结果可以看出 reentrantA 方法和 reentrantB 方法的执行线程都是“main” ，我们调用了 reentrantA 方法，它的方法中嵌套了 reentrantB，如果 synchronized 是不可重入的话，那么线程会被一直堵塞。</p></blockquote><blockquote><p>可重入锁的实现原理，是在锁内部存储了一个线程标识，用于判断当前的锁属于哪个线程，并且锁的内部维护了一个计数器，当锁空闲时此计数器的值为 0，当被线程占用和重入时分别加 1，当锁被释放时计数器减 1，直到减到 0 时表示此锁为空闲状态。</p></blockquote><h5 id="3、共享锁和独占锁"><a href="#3、共享锁和独占锁" class="headerlink" title="3、共享锁和独占锁"></a><strong>3、共享锁和独占锁</strong></h5><hr><ul><li><p>只能被单线程持有的锁叫<strong>独占锁</strong>，可以被多线程持有的锁叫<strong>共享锁</strong>。</p></li><li><p>独占锁指的是在任何时候最多只能有一个线程持有该锁，比如 synchronized 就是独占锁，而 ReadWriteLock 读写锁允许同一时间内有多个线程进行读操作，它就属于共享锁。</p></li><li><p>独占锁可以理解为悲观锁，当每次访问资源时都要加上互斥锁，而共享锁可以理解为乐观锁，它放宽了加锁的条件，允许多线程同时访问该资源。</p></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h4><hr><p>本文章讲了悲观锁和乐观锁，其中悲观锁的典型应用为 synchronized，它的特性为独占式互斥锁；而乐观锁相比于悲观锁而言，拥有更好的性能，但乐观锁可能会导致 ABA 的问题，常见的解决方案是添加版本号来防止 ABA 问题的发生。同时，还讲了可重入锁，在 Java 中,synchronized 和 ReentrantLock 都是可重入锁。最后，讲了独占锁和共享锁，其中独占锁可以理解为悲观锁，而共享锁可以理解为乐观锁。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础5-synchronized 和 ReentrantLock 的实现原理</title>
      <link href="2020/07/24/java-ji-chu-5-synchronized-he-reentrantlock-de-shi-xian-yuan-li/"/>
      <url>2020/07/24/java-ji-chu-5-synchronized-he-reentrantlock-de-shi-xian-yuan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="synchronized-和-ReentrantLock-的实现原理是什么？它们有什么区别？"><a href="#synchronized-和-ReentrantLock-的实现原理是什么？它们有什么区别？" class="headerlink" title="synchronized 和 ReentrantLock 的实现原理是什么？它们有什么区别？"></a>synchronized 和 ReentrantLock 的实现原理是什么？它们有什么区别？</h3><blockquote><p>在 JDK 1.5 之前共享对象的协调机制只有 synchronized 和 volatile，在 JDK 1.5 中增加了新的机制 ReentrantLock，该机制的诞生并不是为了替代 synchronized，而是在 synchronized 不适用的情况下，提供一种可以选择的高级功能。</p></blockquote><a id="more"></a><p><strong>本文章的面试题是，synchronized 和 ReentrantLock 是如何实现的？它们有什么区别？</strong></p><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a><strong>典型回答</strong></h4><hr><ul><li><p>synchronized 属于独占式悲观锁，是通过 JVM 隐式实现的，synchronized 只允许同一时刻只有一个线程操作资源。</p></li><li><p>在 Java 中每个对象都隐式包含一个 monitor（监视器）对象，加锁的过程其实就是竞争 monitor 的过程，当线程进入字节码 monitorenter 指令之后，线程将持有 monitor 对象，执行 monitorexit 时释放 monitor 对象，当其他线程没有拿到 monitor 对象时，则需要阻塞等待获取该对象。</p></li><li><p>ReentrantLock 是 Lock 的默认实现方式之一，它是基于 AQS（Abstract Queued Synchronizer，队列同步器）实现的，它默认是通过非公平锁实现的，在它的内部有一个 state 的状态字段用于表示锁是否被占用，如果是 0 则表示锁未被占用，此时线程就可以把 state 改为 1，并成功获得锁，而其他未获得锁的线程只能去排队等待获取锁资源。</p></li><li><p>synchronized 和 ReentrantLock 都提供了锁的功能，具备互斥性和不可见性。在 JDK 1.5 中 synchronized 的性能远远低于  ReentrantLock，但在 JDK 1.6 之后  synchronized 的性能略低于  ReentrantLock，它的区别如下：</p><ul><li>synchronized 是 JVM 隐式实现的，而 ReentrantLock 是 Java 语言提供的 API；</li><li>ReentrantLock 可设置为公平锁，而 synchronized 却不行；</li><li>ReentrantLock 只能修饰代码块，而 synchronized 可以用于修饰方法、修饰代码块等；</li><li>ReentrantLock 需要手动加锁和释放锁，如果忘记释放锁，则会造成资源被永久占用，而 synchronized 无需手动释放锁；</li><li>ReentrantLock 可以知道是否成功获得了锁，而 synchronized  却不行。</li></ul></li></ul><hr><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a><strong>考点分析</strong></h4><hr><blockquote><p>synchronized 和 ReentrantLock 是比线程池还要高频的面试问题，因为它包含了更多的知识点，且涉及到的知识点更加深入，对面试者的要求也更高，前面我们简要地介绍了 synchronized 和 ReentrantLock 的概念及执行原理，但很多大厂会更加深入的追问更多关于它们的实现细节，比如：</p></blockquote><ul><li>ReentrantLock 的具体实现细节是什么？</li><li>JDK 1.6 时锁做了哪些优化？</li></ul><hr><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a><strong>知识扩展</strong></h4><hr><h5 id="ReentrantLock-源码分析"><a href="#ReentrantLock-源码分析" class="headerlink" title="ReentrantLock 源码分析"></a><strong>ReentrantLock 源码分析</strong></h5><blockquote><p>本课时从源码出发来解密 ReentrantLock 的具体实现细节，首先来看 ReentrantLock 的两个构造函数：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 非公平锁</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无参的构造函数创建了一个非公平锁，用户也可以根据第二个构造函数，设置一个 boolean 类型的值，来决定是否使用公平锁来实现线程的调度。</p><h5 id="公平锁-VS-非公平锁"><a href="#公平锁-VS-非公平锁" class="headerlink" title="公平锁 VS 非公平锁"></a><strong>公平锁 VS 非公平锁</strong></h5><hr><p>公平锁的含义是线程需要按照请求的顺序来获得锁；而非公平锁则允许“插队”的情况存在，所谓的“插队”指的是，线程在发送请求的同时该锁的状态恰好变成了可用，那么此线程就可以跳过队列中所有排队的线程直接拥有该锁。</p><p>而公平锁由于有挂起和恢复所以存在一定的开销，因此性能不如非公平锁，所以 ReentrantLock 和 synchronized 默认都是非公平锁的实现方式。</p><blockquote><p>ReentrantLock 是通过 lock() 来获取锁，并通过 unlock() 释放锁</p></blockquote><p>使用代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">// 加锁</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//......业务处理</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token comment">// 释放锁</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ReentrantLock 中的 lock() 是通过 sync.lock() 实现的，但 Sync 类中的 lock() 是一个抽象方法，需要子类 NonfairSync 或 FairSync 去实现</p></blockquote><p>NonfairSync 中的 lock() 源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// 将当前线程设置为此锁的持有者</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FairSync 中的 lock() 源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看出非公平锁比公平锁只是多了一行 compareAndSetState 方法，该方法是尝试将 state 值由 0 置换为 1，如果设置成功的话，则说明当前没有其他线程持有该锁，不用再去排队了，可直接占用该锁，否则，则需要通过 acquire 方法去排队。</p></blockquote><p>acquire 源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>         <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>tryAcquire 方法尝试获取锁，如果获取锁失败，则把它加入到阻塞队列中</p></blockquote><p>来看 tryAcquire 的源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 公平锁比非公平锁多了一行代码 !hasQueuedPredecessors() </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//尝试获取锁</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取成功，标记被抢占</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set state=state+1</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>对于此方法来说，公平锁比非公平锁只多一行代码 !hasQueuedPredecessors()，它用来查看队列中是否有比它等待时间更久的线程，如果没有，就尝试一下是否能获取到锁，如果获取成功，则标记为已经被占用。</p></blockquote><blockquote><p>如果获取锁失败，则调用 addWaiter 方法把线程包装成 Node 对象，同时放入到队列中，但 addWaiter 方法并不会尝试获取锁，acquireQueued 方法才会尝试获取锁，如果获取失败，则此节点会被挂起</p></blockquote><p>源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 队列中的线程尝试获取锁，失败则会被挂起  */</span>   <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 获取锁是否成功的状态标识</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>       <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 线程是否被中断</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">// 获取前一个节点（前驱节点）</span>           <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 当前节点为头节点的下一个节点时，有权尝试获取锁</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取成功，将当前节点设置为 head 节点</span>               p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 原 head 节点出队，等待被 GC</span>               failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 获取成功</span>               <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token comment">// 判断获取锁失败后是否可以挂起</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>               <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment">// 线程若被中断，返回 true</span>               interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>           <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>该方法会使用 for(;;) 无限循环的方式来尝试获取锁，若获取失败，则调用 shouldParkAfterFailedAcquire 方法，尝试挂起当前线程</p></blockquote><p>源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 判断线程是否可以被挂起  */</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> pred<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 获得前驱节点的状态</span>   <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>   <span class="token comment">// 前驱节点的状态为 SIGNAL，当前线程可以被挂起（阻塞）</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>       <span class="token comment">// 若前驱节点状态为 CANCELLED，那就一直往前找，直到找到一个正常等待的状态为止</span>           node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 并将当前节点排在它后边</span>       pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token comment">// 把前驱节点的状态修改为 SIGNAL</span>       <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>线程入列被挂起的前提条件是，前驱节点的状态为 SIGNAL，SIGNAL 状态的含义是后继节点处于等待状态，当前节点释放锁后将会唤醒后继节点。所以在上面这段代码中，会先判断前驱节点的状态，如果为 SIGNAL，则当前线程可以被挂起并返回 true；如果前驱节点的状态 &gt;0，则表示前驱节点取消了，这时候需要一直往前找，直到找到最近一个正常等待的前驱节点，然后把它作为自己的前驱节点；如果前驱节点正常（未取消），则修改前驱节点状态为 SIGNAL。</p></blockquote><blockquote><p>到这里整个加锁的流程就已经走完了，最后的情况是，没有拿到锁的线程会在队列中被挂起，直到拥有锁的线程释放锁之后，才会去唤醒其他的线程去获取锁资源，整个运行流程如下图所示：</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/29/aZKLOs.png"></p><blockquote><p>unlock 相比于 lock 来说就简单很多了</p></blockquote><p>源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 尝试释放锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 释放成功</span>        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>锁的释放流程为，先调用 tryRelease 方法尝试释放锁，如果释放成功，则查看头结点的状态是否为 SIGNAL，如果是，则唤醒头结点的下个节点关联的线程；如果释放锁失败，则返回 false。</p></blockquote><p>tryRelease 源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 尝试释放当前线程占有的锁 */</span>   <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span> <span class="token comment">// 释放锁后的状态，0 表示释放锁成功</span>   <span class="token comment">// 如果拥有锁的线程不是当前线程的话抛出异常</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 锁被成功释放</span>       free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空独占线程</span>   <span class="token punctuation">}</span>   <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新 state 值，0 表示为释放锁成功</span>   <span class="token keyword">return</span> free<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在 tryRelease 方法中，会先判断当前的线程是不是占用锁的线程，如果不是的话，则会抛出异常；如果是的话，则先计算锁的状态值 getState() - releases 是否为 0，如果为 0，则表示可以正常的释放锁，然后清空独占的线程，最后会更新锁的状态并返回执行结果。</p></blockquote><h4 id="JDK-1-6-锁优化"><a href="#JDK-1-6-锁优化" class="headerlink" title="JDK 1.6 锁优化"></a><strong>JDK 1.6 锁优化</strong></h4><h5 id="自适应自旋锁"><a href="#自适应自旋锁" class="headerlink" title="自适应自旋锁"></a><strong>自适应自旋锁</strong></h5><blockquote><p>JDK 1.5 在升级为 JDK 1.6 时，HotSpot 虚拟机团队在锁的优化上下了很大功夫，比如实现了自适应式自旋锁、锁升级等。</p></blockquote><blockquote><p>JDK 1.6 引入了自适应式自旋锁意味着自旋的时间不再是固定的时间了，比如在同一个锁对象上，如果通过自旋等待成功获取了锁，那么虚拟机就会认为，它下一次很有可能也会成功 (通过自旋获取到锁)，因此允许自旋等待的时间会相对的比较长，而当某个锁通过自旋很少成功获得过锁，那么以后在获取该锁时，可能会直接忽略掉自旋的过程，以避免浪费 CPU 的资源，这就是自适应自旋锁的功能。</p></blockquote><h5 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a><strong>锁升级</strong></h5><blockquote><p>锁升级其实就是从偏向锁到轻量级锁再到重量级锁升级的过程，这是 JDK 1.6 提供的优化功能，也称之为锁膨胀。</p></blockquote><h5 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a><strong>偏向锁</strong></h5><blockquote><p>偏向锁是指在无竞争的情况下设置的一种锁状态。偏向锁的意思是它会偏向于第一个获取它的线程，当锁对象第一次被获取到之后，会在此对象头中设置标示为“01”，表示偏向锁的模式，并且在对象头中记录此线程的 ID，这种情况下，如果是持有偏向锁的线程每次在进入的话，不再进行任何同步操作，如 Locking、Unlocking 等，直到另一个线程尝试获取此锁的时候，偏向锁模式才会结束，偏向锁可以提高带有同步但无竞争的程序性能。但如果在多数锁总会被不同的线程访问时，偏向锁模式就比较多余了，此时可以通过 -XX:-UseBiasedLocking 来禁用偏向锁以提高性能。</p></blockquote><h5 id="轻量锁"><a href="#轻量锁" class="headerlink" title="轻量锁"></a><strong>轻量锁</strong></h5><blockquote><p>轻量锁是相对于重量锁而言的，在 JDK 1.6 之前，synchronized 是通过操作系统的互斥量（mutex lock）来实现的，这种实现方式需要在用户态和核心态之间做转换，有很大的性能消耗，这种传统实现锁的方式被称之为<strong>重量锁</strong>。</p></blockquote><blockquote><p>而轻量锁是通过比较并交换（CAS，Compare and Swap）来实现的，它对比的是线程和对象的 Mark Word（对象头中的一个区域），如果更新成功则表示当前线程成功拥有此锁；如果失败，虚拟机会先检查对象的 Mark Word 是否指向当前线程的栈帧，如果是，则说明当前线程已经拥有此锁，否则，则说明此锁已经被其他线程占用了。当两个以上的线程争抢此锁时，轻量级锁就膨胀为重量级锁，这就是锁升级的过程，也是 JDK 1.6 锁优化的内容。</p></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h4><hr><p>本文章首先讲了 synchronized 和 ReentrantLock 的实现过程，然后讲了 synchronized 和 ReentrantLock 的区别，最后通过源码的方式讲了 ReentrantLock 加锁和解锁的执行流程。接着又讲了 JDK 1.6 中的锁优化，包括自适应式自旋锁的实现过程，以及 synchronized 的三种锁状态和锁升级的执行流程。</p><p>synchronized 刚开始为偏向锁，随着锁竞争越来越激烈，会升级为轻量级锁和重量级锁。如果大多数锁被不同的线程所争抢就不建议使用偏向锁了。**</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础4-详解 ThreadPoolExecutor 的参数含义及源码执行流程</title>
      <link href="2020/07/21/java-ji-chu-4-xiang-jie-threadpoolexecutor-de-can-shu-han-yi-ji-yuan-ma-zhi-xing-liu-cheng/"/>
      <url>2020/07/21/java-ji-chu-4-xiang-jie-threadpoolexecutor-de-can-shu-han-yi-ji-yuan-ma-zhi-xing-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是线程池"><a href="#一、什么是线程池" class="headerlink" title="一、什么是线程池"></a>一、什么是线程池</h3><blockquote><p>线程池是为了避免线程频繁的创建和销毁带来的性能消耗，而建立的一种池化技术，它是把已创建的线程放入“池”中，当有任务来临时就可以重用已有的线程，无需等待创建的过程，这样就可以有效提高程序的响应速度。但如果要说线程池的话一定离不开 ThreadPoolExecutor ，在阿里巴巴的《Java 开发手册》中是这样规定线程池的：*</p></blockquote><blockquote><p>线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的读者更加明确线程池的运行规则，规避资源耗尽的风险。</p></blockquote><a id="more"></a><p>说明：Executors 返回的线程池对象的弊端如下：</p><ul><li>FixedThreadPool 和 SingleThreadPool：允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</li><li>CachedThreadPool 和 ScheduledThreadPool：允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</li></ul><blockquote><p>其实当我们去看 Executors 的源码会发现，Executors.newFixedThreadPool()、Executors.newSingleThreadExecutor() 和 Executors.newCachedThreadPool() 等方法的底层都是通过 ThreadPoolExecutor 实现的，所以本课时我们就重点来了解一下 ThreadPoolExecutor 的相关知识，比如它有哪些核心的参数？它是如何工作的？</p></blockquote><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a><strong>典型回答</strong></h4><blockquote><p>ThreadPoolExecutor 的核心参数指的是它在构建时需要传递的参数，其构造方法如下所示：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>                          <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>                          <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>        <span class="token comment">// maximumPoolSize 必须大于 0，且必须大于 corePoolSize</span>        maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>        maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>        keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> threadFactory <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>acc <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span>            <span class="token keyword">null</span> <span class="token operator">:</span>            <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第 1 个参数：corePoolSize 表示线程池的常驻核心线程数。如果设置为 0，则表示在没有任何任务时，销毁线程池；如果大于 0，即使没有任务时也会保证线程池的线程数量等于此值。但需要注意，此值如果设置的比较小，则会频繁的创建和销毁线程（创建和销毁的原因会在本课时的下半部分讲到）；如果设置的比较大，则会浪费系统资源，所以开发者需要根据自己的实际业务来调整此值。</p></blockquote><blockquote><p>第 2 个参数：maximumPoolSize 表示线程池在任务最多时，最大可以创建的线程数。官方规定此值必须大于 0，也必须大于等于 corePoolSize，此值只有在任务比较多，且不能存放在任务队列时，才会用到。</p></blockquote><blockquote><p>第 3 个参数：keepAliveTime 表示线程的存活时间，当线程池空闲时并且超过了此时间，多余的线程就会销毁，直到线程池中的线程数量销毁的等于 corePoolSize 为止，如果 maximumPoolSize 等于 corePoolSize，那么线程池在空闲的时候也不会销毁任何线程。</p></blockquote><blockquote><p>第 4 个参数：unit 表示存活时间的单位，它是配合 keepAliveTime 参数共同使用的。</p></blockquote><blockquote><p>第 5 个参数：workQueue 表示线程池执行的任务队列，当线程池的所有线程都在处理任务时，如果来了新任务就会缓存到此任务队列中排队等待执行。</p></blockquote><blockquote><p>第 6 个参数：threadFactory 表示线程的创建工厂，此参数一般用的比较少，我们通常在创建线程池时不指定此参数，它会使用默认的线程创建工厂的方法来创建线程</p></blockquote><p>源代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Executors.defaultThreadFactory() 为默认的线程创建工厂</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>         <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ThreadFactory</span> <span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 默认的线程创建工厂，需要实现 ThreadFactory 接口</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> poolNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadGroup</span> group<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> threadNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> namePrefix<span class="token punctuation">;</span>     <span class="token class-name">DefaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SecurityManager</span> s <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        group <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>                              <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        namePrefix <span class="token operator">=</span> <span class="token string">"pool-"</span> <span class="token operator">+</span>                      poolNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                     <span class="token string">"-thread-"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 创建线程</span>    <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> r<span class="token punctuation">,</span>                              namePrefix <span class="token operator">+</span> threadNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                              <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个非守护线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span>            t<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 线程优先级设置为默认值</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们也可以自定义一个线程工厂，通过实现 ThreadFactory 接口来完成，这样就可以自定义线程的名称或线程执行的优先级了。</p></blockquote><blockquote><p>第 7 个参数：RejectedExecutionHandler 表示指定线程池的拒绝策略，当线程池的任务已经在缓存队列 workQueue 中存储满了之后，并且不能创建新的线程来执行此任务时，就会用到此拒绝策略，它属于一种限流保护的机制。</p></blockquote><h5 id="线程池的工作流程要从它的执行方法-execute-说起"><a href="#线程池的工作流程要从它的执行方法-execute-说起" class="headerlink" title="线程池的工作流程要从它的执行方法 execute() 说起"></a><strong>线程池的工作流程要从它的执行方法 execute() 说起</strong></h5><p>源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 当前工作的线程数小于核心线程数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建新的线程执行此任务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 检查线程池是否处于运行状态，如果是则把任务添加到队列</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 再出检查线程池是否处于运行状态，防止在第一次校验通过后线程池关闭</span>        <span class="token comment">// 如果是非运行状态，则将刚加入队列的任务移除</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果线程池的线程数为 0 时（当 corePoolSize 设置为 0 时会发生）</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新建线程执行任务</span>    <span class="token punctuation">}</span>    <span class="token comment">// 核心线程都在忙且队列都已爆满，尝试新启动一个线程执行失败</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment">// 执行拒绝策略</span>        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 addWorker(Runnable firstTask, boolean core) 方法的参数说明如下：</p><ul><li><p><strong>firstTask</strong>，线程应首先运行的任务，如果没有则可以设置为 null；</p></li><li><p><strong>core</strong>，判断是否可以创建线程的阀值（最大值），如果等于 true 则表示使用 corePoolSize 作为阀值，false 则表示使用 maximumPoolSize 作为阀值。</p></li></ul><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a><strong>考点分析</strong></h4><hr><p>本文章的这道面试题考察的是你对于线程池和 ThreadPoolExecutor 的掌握程度，也属于 Java 的基础知识，几乎所有的面试都会被问到，其中线程池任务执行的主要流程，可以参考以下流程图：</p><p><img src="https://s1.ax1x.com/2020/07/21/UTmssJ.png"></p><p>与 ThreadPoolExecutor 相关的面试题还有以下几个：</p><ul><li><p>ThreadPoolExecutor 的执行方法有几种？它们有什么区别？</p></li><li><p>什么是线程的拒绝策略？</p></li><li><p>拒绝策略的分类有哪些？</p></li><li><p>如何自定义拒绝策略？</p></li><li><p>ThreadPoolExecutor 能不能实现扩展？如何实现扩展？</p></li></ul><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a><strong>知识扩展</strong></h4><hr><h5 id="execute-VS-submit"><a href="#execute-VS-submit" class="headerlink" title="execute() VS submit()"></a><strong>execute() VS submit()</strong></h5><blockquote><p>execute() 和 submit() 都是用来执行线程池任务的，它们最主要的区别是，submit() 方法可以接收线程池执行的返回值，而 execute() 不能接收返回值。</p></blockquote><p>来看两个方法的具体使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10L</span><span class="token punctuation">,</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// execute 使用</span>executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, execute."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// submit 使用</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, submit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序执行结果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Hello</span><span class="token punctuation">,</span> submit<span class="token punctuation">.</span><span class="token class-name">Hello</span><span class="token punctuation">,</span> execute<span class="token punctuation">.</span><span class="token class-name">Success</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从以上结果可以看出 submit() 方法可以配合 Futrue 来接收线程执行的返回值。它们的另一个区别是 execute() 方法属于 Executor 接口的方法，而 submit() 方法则是属于 ExecutorService 接口的方法，它们的继承关系如下图所示：</p><p><img src="https://s1.ax1x.com/2020/07/21/UTmrM4.png"></p><h5 id="线程池的拒绝策略"><a href="#线程池的拒绝策略" class="headerlink" title="线程池的拒绝策略"></a><strong>线程池的拒绝策略</strong></h5><blockquote><p>当线程池中的任务队列已经被存满，再有任务添加时会先判断当前线程池中的线程数是否大于等于线程池的最大值，如果是，则会触发线程池的拒绝策略。</p></blockquote><p>Java 自带的拒绝策略有 4 种：</p><ul><li><p><strong>AbortPolicy</strong>，终止策略，线程池会抛出异常并终止执行，它是默认的拒绝策略；</p></li><li><p><strong>CallerRunsPolicy</strong>，把任务交给当前线程来执行；</p></li><li><p><strong>DiscardPolicy</strong>，忽略此任务（最新的任务）；</p></li><li><p><strong>DiscardOldestPolicy</strong>，忽略最早的任务（最先加入队列的任务）。</p></li></ul><p>例如，我们来演示一个 AbortPolicy 的拒绝策略，代码如下：</p><pre class="brush:java">ThreadPoolExecutor&nbsp;executor&nbsp;=&nbsp;new&nbsp;ThreadPoolExecutor(1,&nbsp;3,&nbsp;10,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TimeUnit.SECONDS,&nbsp;new&nbsp;LinkedBlockingQueue&lt;&gt;(2),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;ThreadPoolExecutor.AbortPolicy());&nbsp;//&nbsp;添加&nbsp;AbortPolicy&nbsp;拒绝策略for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;6;&nbsp;i++)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;executor.execute(()&nbsp;-&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Thread.currentThread().getName());&nbsp;&nbsp;&nbsp;&nbsp;});}</pre><p>以上程序的执行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>pre <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"brush:java"</span><span class="token operator">&gt;</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span><span class="token class-name">RejectedExecutionException</span><span class="token operator">:</span> <span class="token class-name">Task</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>interview<span class="token punctuation">.</span><span class="token class-name">ThreadPoolExample</span>$$<span class="token class-name">Lambda</span>$<span class="token number">1</span><span class="token operator">/</span><span class="token number">1096979270</span><span class="token annotation punctuation">@448139f0</span> rejected from java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span><span class="token class-name">ThreadPoolExecutor</span><span class="token annotation punctuation">@7cca494b</span><span class="token punctuation">[</span><span class="token class-name">Running</span><span class="token punctuation">,</span> pool size <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> active threads <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> queued tasks <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> completed tasks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span><span class="token class-name">ThreadPoolExecutor</span>$<span class="token class-name">AbortPolicy</span><span class="token punctuation">.</span><span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2063</span><span class="token punctuation">)</span> at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">830</span><span class="token punctuation">)</span> at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1379</span><span class="token punctuation">)</span> at com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>interview<span class="token punctuation">.</span><span class="token class-name">ThreadPoolExample</span><span class="token punctuation">.</span><span class="token function">rejected</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExample</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">)</span> at com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>interview<span class="token punctuation">.</span><span class="token class-name">ThreadPoolExample</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExample</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看出当第 6 个任务来的时候，线程池则执行了 AbortPolicy &nbsp;拒绝策略，抛出了异常。因为队列最多存储 2 个任务，最大可以创建 3 个线程来执行任务（2+3=5），所以当第 6 个任务来的时候，此线程池就“忙”不过来了。</p></blockquote><h5 id="自定义拒绝策略"><a href="#自定义拒绝策略" class="headerlink" title="自定义拒绝策略"></a><strong>自定义拒绝策略</strong></h5><blockquote><p>自定义拒绝策略只需要新建一个 RejectedExecutionHandler 对象，然后重写它的 rejectedExecution() 方法即可，如下代码所示：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">RejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 添加自定义拒绝策略</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 业务处理方法</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行自定义拒绝策略"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码执行的结果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">执行自定义拒绝策略pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出线程池执行了自定义的拒绝策略，我们可以在 rejectedExecution 中添加自己业务处理的代码。</p><h5 id="ThreadPoolExecutor-扩展"><a href="#ThreadPoolExecutor-扩展" class="headerlink" title="ThreadPoolExecutor 扩展"></a><strong>ThreadPoolExecutor 扩展</strong></h5><blockquote><p>ThreadPoolExecutor 的扩展主要是通过重写它的 beforeExecute() 和 afterExecute() 方法实现的，我们可以在扩展方法中添加日志或者实现数据统计，比如统计线程的执行时间，如下代码所示：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExtend</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">// 线程池扩展调用</span>        <span class="token class-name">MyThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token comment">/**     * 线程池扩展     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadPoolExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token punctuation">{</span>        <span class="token comment">// 保存线程执行开始时间</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> localTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">MyThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span> <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                            <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment">/**         * 开始执行之前         * @param t 线程         * @param r 任务         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">beforeExecute</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Long</span> sTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开始时间 (单位：纳秒)</span>            localTime<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s | before | time=%s"</span><span class="token punctuation">,</span>                    t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">beforeExecute</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * 执行完成之后         * @param r 任务         * @param t 抛出的异常         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterExecute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Long</span> eTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结束时间 (单位：纳秒)</span>            <span class="token class-name">Long</span> totalTime <span class="token operator">=</span> eTime <span class="token operator">-</span> localTime<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行总时间</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s | after | time=%s | 耗时：%s 毫秒"</span><span class="token punctuation">,</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eTime<span class="token punctuation">,</span> <span class="token punctuation">(</span>totalTime <span class="token operator">/</span> <span class="token number">1000000.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterExecute</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序的执行结果如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">|</span> before <span class="token operator">|</span> time<span class="token operator">=</span><span class="token number">4570298843700</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> <span class="token operator">|</span> before <span class="token operator">|</span> time<span class="token operator">=</span><span class="token number">4570298840000</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">|</span> after <span class="token operator">|</span> time<span class="token operator">=</span><span class="token number">4570327059500</span> <span class="token operator">|</span> 耗时：<span class="token number">28.2158</span> 毫秒pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> <span class="token operator">|</span> after <span class="token operator">|</span> time<span class="token operator">=</span><span class="token number">4570327138100</span> <span class="token operator">|</span> 耗时：<span class="token number">28.2981</span> 毫秒pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">|</span> before <span class="token operator">|</span> time<span class="token operator">=</span><span class="token number">4570328467800</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">|</span> after <span class="token operator">|</span> time<span class="token operator">=</span><span class="token number">4570328636800</span> <span class="token operator">|</span> 耗时：<span class="token number">0.169</span> 毫秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h4><hr><p>最后总结一下：线程池的使用必须要通过 ThreadPoolExecutor 的方式来创建，这样才可以更加明确线程池的运行规则，规避资源耗尽的风险。同时，也介绍了 ThreadPoolExecutor 的七大核心参数，包括核心线程数和最大线程数之间的区别，当线程池的任务队列没有可用空间且线程池的线程数量已经达到了最大线程数时，则会执行拒绝策略，Java 自动的拒绝策略有 4 种，用户也可以通过重写 rejectedExecution() 来自定义拒绝策略，我们还可以通过重写 beforeExecute() 和 afterExecute() 来实现 ThreadPoolExecutor 的扩展功能。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础3-线程的状态有哪些</title>
      <link href="2020/07/20/java-ji-chu-3-xian-cheng-de-zhuang-tai-you-na-xie/"/>
      <url>2020/07/20/java-ji-chu-3-xian-cheng-de-zhuang-tai-you-na-xie/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是线程"><a href="#一、什么是线程" class="headerlink" title="一、什么是线程"></a>一、什么是线程</h3><ul><li><p>线程（Thread）是并发编程的基础，也是程序执行的最小单元，它依托进程而存在。一个进程中可以包含多个线程，多线程可以共享一块内存空间和一组系统资源，因此线程之间的切换更加节省资源、更加轻量化，也因此被称为轻量级的进程。</p><a id="more"></a></li><li><p>当然，线程也是面试中常被问到的一个知识点，是程序员必备的基础技能，使用它可以有效地提高程序的整体运行速度。</p></li></ul><hr><p><strong>本文章的面试问题是，线程的状态有哪些？它是如何工作的？</strong></p><hr><h4 id="典型回答"><a href="#典型回答" class="headerlink" title="典型回答"></a><strong>典型回答</strong></h4><hr><blockquote><p>线程的状态在 JDK 1.5 之后以枚举的方式被定义在 Thread 的源码中，它总共包含以下 6 个状态：</p></blockquote><ul><li>NEW，新建状态，线程被创建出来，但尚未启动时的线程状态；</li><li>RUNNABLE，就绪状态，表示可以运行的线程状态，它可能正在运行，或者是在排队等待操作系统给它分配 CPU 资源；</li><li>BLOCKED，阻塞等待锁的线程状态，表示处于阻塞状态的线程正在等待监视器锁，比如等待执行 synchronized 代码块或者使用 synchronized 标记的方法；</li><li>WAITING，等待状态，一个处于等待状态的线程正在等待另一个线程执行某个特定的动作，比如，一个线程调用了 Object.wait() 方法，那它就在等待另一个线程调用 Object.notify() 或 Object.notifyAll() 方法；</li><li>TIMED_WAITING，计时等待状态，和等待状态（WAITING）类似，它只是多了超时时间，比如调用了有超时时间设置的方法 Object.wait(long timeout) 和 Thread.join(long timeout) 等这些方法时，它才会进入此状态；</li><li>TERMINATED，终止状态，表示线程已经执行完成。</li></ul><h3 id="二、它是如何工作的"><a href="#二、它是如何工作的" class="headerlink" title="二、它是如何工作的"></a>二、它是如何工作的</h3><hr><p>线程状态的源代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 新建状态，线程被创建出来，但尚未启动时的线程状态     */</span>    NEW<span class="token punctuation">,</span>    <span class="token comment">/**   * 就绪状态，表示可以运行的线程状态，但它在排队等待来自操作系统的 CPU 资源     /         RUNNABLE,    /**   * 阻塞等待锁的线程状态，表示正在处于阻塞状态的线程      正在等待监视器锁，比如等待执行 synchronized 代码块或者        * 使用 synchronized 标记的方法          /              BLOCKED,    /**   * 等待状态，一个处于等待状态的线程正在等待另一个线程执行某个特定的动作。      例如，一个线程调用了 Object.wait() 它在等待另一个线程调用        * Object.notify() 或 Object.notifyAll()          /              WAITING,    /**   * 计时等待状态，和等待状态 (WAITING) 类似，只是多了超时时间，比如      调用了有超时时间设置的方法 Object.wait(long timeout) 和         * Thread.join(long timeout) 就会进入此状态          /              TIMED_WAITING,    /**   * 终止状态，表示线程已经执行完成     /     }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>线程的工作模式是，首先先要创建线程并指定线程需要执行的业务方法，然后再调用线程的 start() 方法，此时线程就从 NEW（新建）状态变成了 RUNNABLE（就绪）状态，此时线程会判断要执行的方法中有没有 synchronized 同步代码块，如果有并且其他线程也在使用此锁，那么线程就会变为 BLOCKED（阻塞等待）状态，当其他线程使用完此锁之后，线程会继续执行剩余的方法。</p></blockquote><blockquote><p>当遇到 Object.wait() 或 Thread.join() 方法时，线程会变为 WAITING（等待状态）状态，如果是带了超时时间的等待方法，那么线程会进入 TIMED_WAITING（计时等待）状态，当有其他线程执行了 notify() 或 notifyAll() 方法之后，线程被唤醒继续执行剩余的业务方法，直到方法执行完成为止，此时整个线程的流程就执行完了，执行流程如下图所示：</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/20/UhPO0J.png"></p><hr><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a><strong>考点分析</strong></h4><hr><blockquote><p>线程一般会作为并发编程的起始问题，用于引出更多的关于并发编程的面试问题。当然对于线程的掌握程度也决定了你对并发编程的掌握程度，通常面试官还会问：</p></blockquote><ul><li>BLOCKED（阻塞等待）和 WAITING（等待）有什么区别？</li><li>start() 方法和 run() 方法有什么区别？</li><li>线程的优先级有什么用？该如何设置？</li><li>线程的常用方法有哪些？</li></ul><p>接下来我们一起来看这些问题的答案。</p><hr><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a><strong>知识扩展</strong></h4><hr><h5 id="1-BLOCKED-和-WAITING-的区别"><a href="#1-BLOCKED-和-WAITING-的区别" class="headerlink" title="1.BLOCKED 和 WAITING 的区别"></a><strong>1.BLOCKED 和 WAITING 的区别</strong></h5><blockquote><p>虽然 BLOCKED 和 WAITING 都有等待的含义，但二者有着本质的区别，首先它们状态形成的调用方法不同，其次 BLOCKED 可以理解为当前线程还处于活跃状态，只是在阻塞等待其他线程使用完某个锁资源；而 WAITING 则是因为自身调用了 Object.wait() 或着是 Thread.join() 又或者是 LockSupport.park() 而进入等待状态，只能等待其他线程执行某个特定的动作才能被继续唤醒，比如当线程因为调用了 Object.wait() 而进入 WAITING 状态之后，则需要等待另一个线程执行 Object.notify() 或 Object.notifyAll() 才能被唤醒。</p></blockquote><h5 id="2-start-和-run-的区别"><a href="#2-start-和-run-的区别" class="headerlink" title="2.start() 和 run() 的区别"></a><strong>2.start() 和 run() 的区别</strong></h5><hr><blockquote><p>首先从 Thread 源码来看，start() 方法属于 Thread 自身的方法，并且使用了 synchronized 来保证线程安全，源码如下：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 状态验证，不等于 NEW 的状态会抛出异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 通知线程组，此线程即将启动</span>      group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">{</span>                group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 不处理任何异常，如果 start0 抛出异常，则它将被传递到调用堆栈上</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>run() 方法为 Runnable 的抽象方法，必须由调用类重写此方法，重写的 run() 方法其实就是此线程要执行的业务方法，源码如下：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span> <span class="token comment">// 忽略其他方法......</span>  <span class="token keyword">private</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从执行的效果来说，start() 方法可以开启多线程，让线程从 NEW 状态转换成 RUNNABLE 状态，而 run() 方法只是一个普通的方法。</p></blockquote><blockquote><p>其次，它们可调用的次数不同，start() 方法不能被多次调用，否则会抛出 java.lang.IllegalStateException；而 run() 方法可以进行多次调用，因为它只是一个普通的方法而已。</p></blockquote><h5 id="3-线程优先级"><a href="#3-线程优先级" class="headerlink" title="3.线程优先级"></a><strong>3.线程优先级</strong></h5><hr><blockquote><p>在 Thread 源码中和线程优先级相关的属性有 3 个：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 线程可以拥有的最小优先级</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MIN_PRIORITY <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 线程默认优先级</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> NORM_PRIORITY <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">// 线程可以拥有的最大优先级</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAX_PRIORITY <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>线程的优先级可以理解为线程抢占 CPU 时间片的概率，优先级越高的线程优先执行的概率就越大，但并不能保证优先级高的线程一定先执行。</p></blockquote><blockquote><p>在程序中我们可以通过 Thread.setPriority() 来设置优先级，setPriority() 源码如下：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token keyword">int</span> newPriority<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ThreadGroup</span> g<span class="token punctuation">;</span>    <span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 先验证优先级的合理性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newPriority <span class="token operator">&gt;</span> MAX_PRIORITY <span class="token operator">||</span> newPriority <span class="token operator">&lt;</span> MIN_PRIORITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>g <span class="token operator">=</span> <span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 优先级如果超过线程组的最高优先级，则把优先级设置为线程组的最高优先级</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newPriority <span class="token operator">&gt;</span> g<span class="token punctuation">.</span><span class="token function">getMaxPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newPriority <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">getMaxPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">setPriority0</span><span class="token punctuation">(</span>priority <span class="token operator">=</span> newPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-线程的常用方法"><a href="#4-线程的常用方法" class="headerlink" title="4.线程的常用方法"></a><strong>4.线程的常用方法</strong></h5><hr><blockquote><p>线程的常用方法有以下几个。</p></blockquote><h6 id="（1）join"><a href="#（1）join" class="headerlink" title="（1）join()"></a><strong>（1）join()</strong></h6><blockquote><p>在一个线程中调用 other.join() ，这时候当前线程会让出执行权给 other 线程，直到 other 线程执行完或者过了超时时间之后再继续执行当前线程，join() 源码如下：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> base <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 超时时间不能小于 0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"timeout value is negative"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 等于 0 表示无限等待，直到线程执行完为之</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 判断子线程 (其他线程) 为活跃线程，则一直等待</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 循环判断</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> delay <span class="token operator">=</span> millis <span class="token operator">-</span> now<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">wait</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>            now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> base<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从源码中可以看出 join() 方法底层还是通过 wait() 方法来实现的。</p></blockquote><p>例如，在未使用 join() 时，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子线程睡眠："</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"秒。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开启线程</span>        <span class="token comment">// 主线程执行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程睡眠："</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"秒。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">主线程睡眠：<span class="token number">1</span>秒。子线程睡眠：<span class="token number">1</span>秒。主线程睡眠：<span class="token number">2</span>秒。子线程睡眠：<span class="token number">2</span>秒。主线程睡眠：<span class="token number">3</span>秒。子线程睡眠：<span class="token number">3</span>秒。子线程睡眠：<span class="token number">4</span>秒。子线程睡眠：<span class="token number">5</span>秒。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从结果可以看出，在未使用 join() 时主子线程会交替执行。</p><p>然后我们再把 join() 方法加入到代码中，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子线程睡眠："</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"秒。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开启线程</span>        thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待子线程先执行 2 秒钟</span>        <span class="token comment">// 主线程执行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程睡眠："</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"秒。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">子线程睡眠：<span class="token number">1</span>秒。子线程睡眠：<span class="token number">2</span>秒。主线程睡眠：<span class="token number">1</span>秒。 <span class="token comment">// thread.join(2000); 等待 2 秒之后，主线程和子线程再交替执行</span>子线程睡眠：<span class="token number">3</span>秒。主线程睡眠：<span class="token number">2</span>秒。子线程睡眠：<span class="token number">4</span>秒。子线程睡眠：<span class="token number">5</span>秒。主线程睡眠：<span class="token number">3</span>秒。从执行结果可以看出，添加 <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法之后，主线程会先等子线程执行 <span class="token number">2</span> 秒之后才继续执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="（2）yield"><a href="#（2）yield" class="headerlink" title="（2）yield()"></a><strong>（2）yield()</strong></h6><p>看 Thread 的源码可以知道 yield() 为本地方法，也就是说 yield() 是由 C 或 C++ 实现的，源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>yield() 方法表示给线程调度器一个当前线程愿意出让 CPU 使用权的暗示，但是线程调度器可能会忽略这个暗示。</p></blockquote><p>比如我们执行这段包含了 yield() 方法的代码，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程："</span> <span class="token operator">+</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" I："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当我们把这段代码执行多次之后会发现，每次执行的结果都不相同，这是因为 yield() 执行非常不稳定，线程调度器不一定会采纳 yield() 出让 CPU 使用权的建议，从而导致了这样的结果。</p></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h4><hr><blockquote><p>本文章我们介绍了线程的 6 种状态以及线程的执行流程，还介绍了 BLOCKED（阻塞等待）和 WAITING（等待）的区别，start() 方法和 run() 方法的区别，以及 join() 方法和 yield() 方法的作用，但我们不能死记硬背，要多动手实践才能真正的理解这些知识点。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础2-HashMap底层原理</title>
      <link href="2020/07/17/java-ji-chu-2-hashmap-di-ceng-yuan-li/"/>
      <url>2020/07/17/java-ji-chu-2-hashmap-di-ceng-yuan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="一、HashMap-底层是如何实现的？"><a href="#一、HashMap-底层是如何实现的？" class="headerlink" title="一、HashMap 底层是如何实现的？"></a>一、HashMap 底层是如何实现的？</h3><p><strong>HashMap 是使用频率最高的类型之一，同时也是面试经常被问到的问题之一，这是因为 HashMap 的知识点有很多，同时它又属于 Java 基础知识的一部分，因此在面试中经常被问到。</strong></p><a id="more"></a><blockquote><p>在 JDK 1.7 中 HashMap 是以数组加链表的形式组成的，JDK 1.8 之后新增了红黑树的组成结构，当链表大于 8 并且容量大于 64 时，链表结构会转换成红黑树结构，它的组成结构如下图所示：</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/20/Uf7mrT.md.png"></p><blockquote><p>数组中的元素我们称之为哈希桶，它的定义如下：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>    <span class="token class-name">V</span> value<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>     <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">V</span> oldValue <span class="token operator">=</span> value<span class="token punctuation">;</span>        value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看出每个哈希桶中包含了四个字段：hash、key、value、next，其中 next 表示链表的下一个节点。</p></blockquote><hr><blockquote><p>JDK 1.8 之所以添加红黑树是因为一旦链表过长，会严重影响 HashMap 的性能，而红黑树具有快速增删改查的特点，这样就可以有效的解决链表过长时操作比较慢的问题。</p></blockquote><h4 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a><strong>考点分析</strong></h4><hr><p>上面大体介绍了 HashMap 的组成结构，但面试官想要知道的远远不止这些，和 HashMap 相关的面试题还有以下几个：</p><blockquote><p>JDK 1.8 HashMap 扩容时做了哪些优化？</p></blockquote><blockquote><p>加载因子为什么是 0.75？</p></blockquote><blockquote><p>当有哈希冲突时，HashMap 是如何查找并确认元素的？</p></blockquote><ul><li><p>HashMap 源码中有哪些重要的方法？</p></li><li><p>HashMap 是如何导致死循环的？</p></li></ul><h3 id="在-JDK-1-8-中它都做了哪些优化"><a href="#在-JDK-1-8-中它都做了哪些优化" class="headerlink" title="在 JDK 1.8 中它都做了哪些优化"></a>在 JDK 1.8 中它都做了哪些优化</h3><hr><h4 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a><strong>知识扩展</strong></h4><hr><h5 id="1-HashMap-源码分析"><a href="#1-HashMap-源码分析" class="headerlink" title="1.HashMap 源码分析"></a><strong>1.HashMap 源码分析</strong></h5><hr><blockquote><p>声明：本系列课程在未做特殊说明的情况下，都是以目前主流的 JDK 版本 1.8 为例来进行源码分析的。</p></blockquote><p><strong>HashMap 源码中包含了以下几个属性：</strong></p><pre class="brush:java">//&nbsp;HashMap&nbsp;初始化长度static&nbsp;final&nbsp;int&nbsp;DEFAULT_INITIAL_CAPACITY&nbsp;=&nbsp;1&nbsp;&lt;&lt;&nbsp;4;&nbsp;//&nbsp;aka&nbsp;16//&nbsp;HashMap&nbsp;最大长度static&nbsp;final&nbsp;int&nbsp;MAXIMUM_CAPACITY&nbsp;=&nbsp;1&nbsp;&lt;&lt;&nbsp;30;&nbsp;//&nbsp;1073741824//&nbsp;默认的加载因子&nbsp;(扩容因子)static&nbsp;final&nbsp;float&nbsp;DEFAULT_LOAD_FACTOR&nbsp;=&nbsp;0.75f;//&nbsp;当链表长度大于此值且容量大于&nbsp;64&nbsp;时static&nbsp;final&nbsp;int&nbsp;TREEIFY_THRESHOLD&nbsp;=&nbsp;8;//&nbsp;转换链表的临界值，当元素小于此值时，会将红黑树结构转换成链表结构static&nbsp;final&nbsp;int&nbsp;UNTREEIFY_THRESHOLD&nbsp;=&nbsp;6;//&nbsp;最小树容量static&nbsp;final&nbsp;int&nbsp;MIN_TREEIFY_CAPACITY&nbsp;=什么是加载因子？加载因子为什么是 0.75？</pre><blockquote><p>加载因子也叫扩容因子或负载因子，用来判断什么时候进行扩容的，假如加载因子是 0.5，HashMap 的初始化容量是 16，那么当 HashMap 中有 16*0.5=8 个元素时，HashMap 就会进行扩容。</p></blockquote><blockquote><p>那加载因子为什么是 0.75 而不是 0.5 或者 1.0 呢？</p></blockquote><blockquote><p>这其实是出于容量和性能之间平衡的结果：</p></blockquote><ul><li>当加载因子设置比较大的时候，扩容的门槛就被提高了，扩容发生的频率比较低，占用的空间会比较小，但此时发生 Hash 冲突的几率就会提升，因此需要更复杂的数据结构来存储元素，这样对元素的操作时间就会增加，运行效率也会因此降低；而当加载因子值比较小的时候，扩容的门槛会比较低，因此会占用更多的空间，此时元素的存储就比较稀疏，发生哈希冲突的可能性就比较小，因此操作性能会比较高。</li></ul><p><strong>所以综合了以上情况就取了一个 0.5 到 1.0 的平均数 0.75 作为加载因子。</strong></p><hr><p><strong>HashMap 源码中三个重要方法：查询、新增和数据扩容。</strong></p><p>先来看查询源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>    <span class="token comment">// 对 key 进行哈希操作</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>    <span class="token comment">// 非空判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 判断第一个元素是否是要查询的元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment">// always check first node</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> first<span class="token punctuation">;</span>        <span class="token comment">// 下一个节点非空判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果第一节点是树结构，则使用 getTreeNode 直接获取相应的数据</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token comment">// 非树结构，循环节点判断</span>                <span class="token comment">// hash 相等并且 key 相同，则返回此节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上源码可以看出，当哈希冲突时我们需要通过判断 key 值是否相等，才能确认此元素是不是我们想要的元素。</p><hr><p><strong>HashMap 第二个重要方法：新增方法，源码如下：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 对 key 进行哈希操作</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>               <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token comment">// 哈希表为空则创建表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 根据 key 的哈希值计算出要插入的数组索引 i</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token comment">// 如果 table[i] 等于 null，则直接插入</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>        <span class="token comment">// 如果 key 已经存在了，直接覆盖 value</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token comment">// 如果 key 不存在，判断是否为红黑树</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>            <span class="token comment">// 红黑树直接插入键值对</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 为链表结构，循环准备插入</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 下一个元素为空时</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 转换为红黑树进行处理</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">//  key 已经存在直接覆盖 value</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// existing mapping for key</span>            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token comment">// 超过最大容量，扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>新增方法的执行流程，如下图所示：</strong></p><p><img src="https://s1.ax1x.com/2020/07/20/Uf7eMV.png"></p><blockquote><p>HashMap 第三个重要的方法是扩容方法，源码如下：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 扩容前的数组</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token comment">// 扩容前的数组的大小和阈值</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token comment">// 预定义新数组的大小和阈值</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 超过最大值就不再扩容了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 扩大容量为当前容量的两倍，但不能超过 MAXIMUM_CAPACITY</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token generics"><span class="token punctuation">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;</span><span class="token operator">&amp;</span>                 oldCap <span class="token punctuation">&gt;</span></span><span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// double threshold</span>    <span class="token punctuation">}</span>    <span class="token comment">// 当前数组没有数据，使用初始化的值</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// initial capacity was placed in threshold</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment">// zero initial threshold signifies using defaults</span>        <span class="token comment">// 如果初始化的值为 0，则使用默认的初始化容量</span>        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 如果新的容量等于 0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>     <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 开始扩容，将新的容量赋值给 table</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token comment">// 原数据不为空，将原数据复制到新 table 中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 根据容量循环数组，复制非空元素到新 table</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment">// 如果链表只有一个，则进行直接赋值</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token comment">// 红黑树相关的操作</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// preserve order</span>                    <span class="token comment">// 链表复制，JDK 1.8 扩容优化部分</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token comment">// 原索引</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment">// 原索引 + oldCap</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 将原索引放到哈希桶中</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment">// 将原索引 + oldCap 放到哈希桶中</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从以上源码可以看出，JDK 1.8 在扩容时并没有像 JDK 1.7 那样，重新计算每个元素的哈希值，而是通过高位运算（e.hash &amp; oldCap）来确定元素是否需要移动，比如 key1 的信息如下：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">key1<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token number">10</span> <span class="token number">0000</span> <span class="token number">1010</span>    oldCap <span class="token operator">=</span> <span class="token number">16</span> <span class="token number">0001</span> <span class="token number">0000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>使用 e.hash &amp; oldCap 得到的结果，高一位为 0，当结果为 0 时表示元素在扩容时位置不会发生任何变化，而 key 2 信息如下：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">key2<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token number">10</span> <span class="token number">0001</span> <span class="token number">0001</span>    oldCap <span class="token operator">=</span> <span class="token number">16</span> <span class="token number">0001</span> <span class="token number">0000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>这时候得到的结果，高一位为 1，当结果为 1 时，表示元素在扩容时位置发生了变化，新的下标位置等于原下标位置 + 原数组长度，如下图所示：</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/20/Uf7E2q.png"></p><blockquote><p>其中红色的虚线图代表了扩容时元素移动的位置。</p></blockquote><h5 id="2-HashMap-死循环分析"><a href="#2-HashMap-死循环分析" class="headerlink" title="2.HashMap 死循环分析"></a><strong>2.HashMap 死循环分析</strong></h5><hr><blockquote><p>以 JDK 1.7 为例，假设 HashMap 默认大小为 2，原本 HashMap 中有一个元素 key(5)，我们再使用两个线程：t1 添加元素 key(3)，t2 添加元素 key(7)，当元素 key(3) 和 key(7) 都添加到 HashMap 中之后，线程 t1 在执行到 Entry&lt;K,V&gt; next = e.next; 时，交出了 CPU 的使用权，源码如下：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTable<span class="token punctuation">,</span> <span class="token keyword">boolean</span> rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> newTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">:</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// 线程一执行此处</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">==</span> e<span class="token punctuation">.</span>key <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            e <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>那么此时线程 t1 中的 e 指向了 key(3)，而 next 指向了 key(7) ；之后线程 t2 重新 rehash 之后链表的顺序被反转，链表的位置变成了 key(5) → key(7) → key(3)，其中 “→” 用来表示下一个元素。</p></blockquote><blockquote><p>当 t1 重新获得执行权之后，先执行 newTalbe[i] = e 把 key(3) 的 next 设置为 key(7)，而下次循环时查询到 key(7) 的 next 元素为 key(3)，于是就形成了 key(3) 和 key(7) 的循环引用，因此就导致了死循环的发生，如下图所示：</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/20/Uf7Vx0.png"></p><blockquote><p>当然发生死循环的原因是 JDK 1.7 链表插入方式为首部倒序插入，这个问题在 JDK 1.8 得到了改善，变成了尾部正序插入。</p></blockquote><blockquote><p>有人曾经把这个问题反馈给了 Sun 公司，但 Sun 公司认为这不是一个问题，因为 HashMap 本身就是非线程安全的，如果要在多线程下，建议使用 ConcurrentHashMap 替代，但这个问题在面试中被问到的几率依然很大，所以在这里需要特别说明一下。</p></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h4><hr><p>本文章介绍了 HashMap 的底层数据结构，在 JDK 1.7 时 HashMap 是由数组和链表组成的，而 JDK 1.8 则新增了红黑树结构，当链表长度达到 8 并且容器达到 64 时会转换为红黑树存储，以提升元素的操作性能。同时还介绍了 HashMap 的三个重要方法，查询、添加和扩容，以及 JDK 1.7 resize() &nbsp;在并发环境下导致死循环的原因。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础1-Spring特点是什么</title>
      <link href="2020/07/13/java-ji-chu-1-spring-te-dian-shi-shi-me/"/>
      <url>2020/07/13/java-ji-chu-1-spring-te-dian-shi-shi-me/</url>
      
        <content type="html"><![CDATA[<h3 id="一、String-是如何实现的"><a href="#一、String-是如何实现的" class="headerlink" title="一、String&nbsp;是如何实现的"></a>一、String&nbsp;是如何实现的</h3><blockquote><p>以主流的&nbsp;JDK&nbsp;版本 1.8&nbsp;来说，String&nbsp;内部实际存储结构为&nbsp;char&nbsp;数组，源码如下：</p></blockquote><a id="more"></a><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>    <span class="token keyword">implements</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>    <span class="token comment">// 用于存储字符串的值</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 缓存字符串的 hash code</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span> <span class="token comment">// Default to 0</span>    <span class="token comment">// ......其他内容</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、它有哪些重要的方法"><a href="#二、它有哪些重要的方法" class="headerlink" title="二、它有哪些重要的方法"></a>二、它有哪些重要的方法</h3><h4 id="String-源码中包含下面几个重要的方法。"><a href="#String-源码中包含下面几个重要的方法。" class="headerlink" title="String&nbsp;源码中包含下面几个重要的方法。"></a>String&nbsp;源码中包含下面几个重要的方法。</h4><h5 id="2-1-多构造方法"><a href="#2-1-多构造方法" class="headerlink" title="2.1. 多构造方法"></a>2.1. 多构造方法</h5><blockquote><p>String&nbsp;字符串有以下 4 个重要的构造方法：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// String 为参数的构造方法</span><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span> original<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> original<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> original<span class="token punctuation">.</span>hash<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// char[] 为参数构造方法</span><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// StringBuffer 为参数的构造方法</span><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">StringBuffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// StringBuilder 为参数的构造方法</span><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其中，比较容易被我们忽略的是以&nbsp;StringBuffer 和 StringBuilder 为参数的构造函数，因为这三种数据类型，我们通常都是单独使用的，所以这个小细节我们需要特别留意一下。</p></blockquote><h5 id="2-2-equals-比较两个字符串是否相等"><a href="#2-2-equals-比较两个字符串是否相等" class="headerlink" title="2.2. equals() 比较两个字符串是否相等"></a>2.2. equals() 比较两个字符串是否相等</h5><p>源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 对象引用相同直接返回 true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 判断需要对比的值是否为 String 类型，如果不是则直接返回 false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 把两个字符串都转换为 char 数组对比</span>            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// 循环比对两个字符串的每一个字符</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 如果其中有一个字符不相等就 true false，否则继续对比</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>String&nbsp;类型重写了&nbsp;Object&nbsp;中的&nbsp;equals()&nbsp;方法，equals()&nbsp;方法需要传递一个&nbsp;Object&nbsp;类型的参数值，在比较时会先通过 instanceof&nbsp;判断是否为&nbsp;String&nbsp;类型，如果不是则会直接返回&nbsp;false，instanceof&nbsp;的使用如下：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> oString <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token class-name">Object</span> oInt <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>oString <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>oInt <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当判断参数为 String&nbsp;类型之后，会循环对比两个字符串中的每一个字符，当所有字符都相等时返回&nbsp;true，否则则返回 false。<br>还有一个和&nbsp;equals()&nbsp;比较类似的方法 equalsIgnoreCase()，它是用于忽略字符串的大小写之后进行字符串对比。</p></blockquote><h5 id="2-3-compareTo-比较两个字符串"><a href="#2-3-compareTo-比较两个字符串" class="headerlink" title="2.3. compareTo() 比较两个字符串"></a>2.3. compareTo() 比较两个字符串</h5><blockquote><p>compareTo()&nbsp;方法用于比较两个字符串，返回的结果为&nbsp;int&nbsp;类型的值</p></blockquote><p>源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len1 <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> len2 <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 获取到两个字符串长度最短的那个 int 值</span>    <span class="token keyword">int</span> lim <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 对比每一个字符</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> lim<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> c1 <span class="token operator">=</span> v1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c2 <span class="token operator">=</span> v2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">!=</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 有字符不相等就返回差值</span>            <span class="token keyword">return</span> c1 <span class="token operator">-</span> c2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> len1 <span class="token operator">-</span> len2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从源码中可以看出，compareTo()&nbsp;方法会循环对比所有的字符，当两个字符串中有任意一个字符不相同时，则 return&nbsp;char1-char2。比如，两个字符串分别存储的是 1&nbsp;和 2，返回的值是 -1；如果存储的是 1&nbsp;和 1，则返回的值是 0 ，如果存储的是 2&nbsp;和 1，则返回的值是 1。还有一个和&nbsp;compareTo()&nbsp;比较类似的方法 compareToIgnoreCase()，用于忽略大小写后比较两个字符串。可以看出&nbsp;compareTo()&nbsp;方法和&nbsp;equals()&nbsp;方法都是用于比较两个字符串的，但它们有两点不同：</p></blockquote><ul><li><p>equals()&nbsp;可以接收一个 Object&nbsp;类型的参数，而 compareTo()&nbsp;只能接收一个&nbsp;String&nbsp;类型的参数；</p></li><li><p>equals()&nbsp;返回值为&nbsp;Boolean，而&nbsp;compareTo()&nbsp;的返回值则为&nbsp;int。<br>它们都可以用于两个字符串的比较，当&nbsp;equals()&nbsp;方法返回&nbsp;true&nbsp;时，或者是&nbsp;compareTo()&nbsp;方法返回 0&nbsp;时，则表示两个字符串完全相同。</p></li></ul><h5 id="2-4-其他重要方法"><a href="#2-4-其他重要方法" class="headerlink" title="2.4.&nbsp;其他重要方法"></a>2.4.&nbsp;其他重要方法</h5><ul><li><p>indexOf()：查询字符串首次出现的下标位置</p></li><li><p>lastIndexOf()：查询字符串最后出现的下标位置</p></li><li><p>contains()：查询字符串中是否包含另一个字符串</p></li><li><p>toLowerCase()：把字符串全部转换成小写</p></li><li><p>toUpperCase()：把字符串全部转换成大写</p></li><li><p>length()：查询字符串的长度</p></li><li><p>trim()：去掉字符串首尾空格</p></li><li><p>replace()：替换字符串中的某些字符</p></li><li><p>split()：把字符串分割并返回字符串数组</p></li><li><p>join()：把字符串数组转为字符串</p></li></ul><p><strong>String&nbsp;源码属于所有源码中最基础、最简单的一个，对&nbsp;String&nbsp;源码的理解也反应了你的&nbsp;Java&nbsp;基础功底。</strong></p><blockquote><p>String&nbsp;问题如果再延伸一下，会问到一些更多的知识细节，这也是大厂一贯使用的面试策略，从一个知识点入手然后扩充更多的知识细节，对于 String 也不例外，通常还会关联的询问以下问题：</p></blockquote><ul><li>为什么&nbsp;String&nbsp;类型要用&nbsp;final&nbsp;修饰？</li><li>== 和 equals&nbsp;的区别是什么？</li><li>String 和&nbsp;StringBuilder、StringBuffer&nbsp;有什么区别？</li><li>String&nbsp;的 intern()&nbsp;方法有什么含义？</li><li>String&nbsp;类型在&nbsp;JVM（Java&nbsp;虚拟机）中是如何存储的？编译器对&nbsp;</li></ul><blockquote><p>String&nbsp;做了哪些优化？接下来我们一起来看这些问题的答案。</p></blockquote><h4 id="三、知识扩展"><a href="#三、知识扩展" class="headerlink" title="三、知识扩展"></a>三、知识扩展</h4><h5 id="3-1-和-equals-的区别"><a href="#3-1-和-equals-的区别" class="headerlink" title="3.1.&nbsp;== 和&nbsp;equals&nbsp;的区别"></a>3.1.&nbsp;== 和&nbsp;equals&nbsp;的区别</h5><blockquote><p>==&nbsp;对于基本数据类型来说，是用于比较 “值”是否相等的；而对于引用类型来说，是用于比较引用地址是否相同的。</p></blockquote><p>查看源码我们可以知道 Object 中也有&nbsp;equals()&nbsp; 方法，源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看出，Object&nbsp;中的&nbsp;equals()&nbsp;方法其实就是 ==，而&nbsp;String&nbsp;重写了 equals() 方法把它修改成比较两个字符串的值是否相等。</p></blockquote><p>源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 对象引用相同直接返回 true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 判断需要对比的值是否为 String 类型，如果不是则直接返回 false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 把两个字符串都转换为 char 数组对比</span>            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// 循环比对两个字符串的每一个字符</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 如果其中有一个字符不相等就 true false，否则继续对比</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-final-修饰的好处"><a href="#3-2-final-修饰的好处" class="headerlink" title="3.2.&nbsp;final&nbsp;修饰的好处"></a>3.2.&nbsp;final&nbsp;修饰的好处</h5><blockquote><p>从&nbsp;String&nbsp;类的源码我们可以看出&nbsp;String&nbsp;是被&nbsp;final&nbsp;修饰的不可继承类</p></blockquote><p>源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span> <span class="token comment">//...... }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>那这样设计有什么好处呢？</strong></p><blockquote><p>Java 语言之父 James Gosling 的回答是，他会更倾向于使用 final，因为它能够缓存结果，当你在传参时不需要考虑谁会修改它的值；如果是可变类的话，则有可能需要重新拷贝出来一个新值进行传参，这样在性能上就会有一定的损失。</p></blockquote><blockquote><p>James Gosling 还说迫使 String 类设计成不可变的另一个原因是安全，当你在调用其他方法时，比如调用一些系统级操作指令之前，可能会有一系列校验，如果是可变类的话，可能在你校验过后，它的内部的值又被改变了，这样有可能会引起严重的系统崩溃问题，这是迫使 String 类设计成不可变类的一个重要原因。</p></blockquote><blockquote><p>总结来说，使用&nbsp;final&nbsp;修饰的第一个好处是安全；第二个好处是高效，以&nbsp;JVM&nbsp;中的字符串常量池来举例，如下两个变量：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>只有字符串是不可变时，我们才能实现字符串常量池，字符串常量池可以为我们缓存字符串，提高程序的运行效率，如下图所示：</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/20/Uf7PaQ.png"></p><blockquote><p>试想一下如果&nbsp;String&nbsp;是可变的，那当&nbsp;s1&nbsp;的值修改之后，s2&nbsp;的值也跟着改变了，这样就和我们预期的结果不相符了，因此也就没有办法实现字符串常量池的功能了。</p></blockquote><h5 id="3-3-String-和-StringBuilder、StringBuffer-的区别"><a href="#3-3-String-和-StringBuilder、StringBuffer-的区别" class="headerlink" title="3.3.&nbsp;String 和&nbsp;StringBuilder、StringBuffer&nbsp;的区别"></a>3.3.&nbsp;String 和&nbsp;StringBuilder、StringBuffer&nbsp;的区别</h5><blockquote><p> 因为&nbsp;String&nbsp;类型是不可变的，所以在字符串拼接的时候如果使用&nbsp;String&nbsp;的话性能会很低，因此我们就需要使用另一个数据类型&nbsp;StringBuffer，它提供了&nbsp;append 和 insert 方法可用于字符串的拼接，它使用 synchronized 来保证线程安全，如下源码所示：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">StringBuffer</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    toStringCache <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">StringBuffer</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    toStringCache <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因为它使用了 synchronized 来保证线程安全，所以性能不是很高，于是在 JDK 1.5&nbsp;就有了&nbsp;StringBuilder，它同样提供了&nbsp;append&nbsp;和&nbsp;insert&nbsp;的拼接方法，但它没有使用 synchronized 来修饰，因此在性能上要优于 StringBuffer，所以在非并发操作的环境下可使用 StringBuilder 来进行字符串拼接。</p></blockquote><h5 id="3-4-String-和-JVM"><a href="#3-4-String-和-JVM" class="headerlink" title="3.4.&nbsp;String&nbsp;和&nbsp;JVM"></a>3.4.&nbsp;String&nbsp;和&nbsp;JVM</h5><blockquote><p>String 常见的创建方式有两种，new String() 的方式和直接赋值的方式，直接赋值的方式会先去字符串常量池中查找是否已经有此值，如果有则把引用地址直接指向此值，否则会先在常量池中创建，然后再把引用指向此值；而 new String() 的方式一定会先在堆上创建一个字符串对象，然后再去常量池中查询此字符串的值是否已经存在，如果不存在会先在常量池中创建此字符串，然后把引用的值指向此字符串，如下代码所示：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"Java"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它们在 JVM 存储的位置，如下图所示：</p><p><img src="https://s1.ax1x.com/2020/07/20/Uf7i5j.png"></p><blockquote><p>小贴士：JDK 1.7&nbsp;之后把永生代换成的元空间，把字符串常量池从方法区移到了&nbsp;Java&nbsp;堆上。</p></blockquote><p>除此之外编译器还会对&nbsp;String&nbsp;字符串做一些优化，例如以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"Ja"</span> <span class="token operator">+</span> <span class="token string">"va"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"Java"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>虽然&nbsp;s1&nbsp;拼接了多个字符串，但对比的结果却是&nbsp;true，我们使用反编译工具，看到的结果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Compiled</span> from <span class="token string">"StringExample.java"</span><span class="token keyword">public</span> <span class="token keyword">class</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>interview<span class="token punctuation">.</span><span class="token class-name">StringExample</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>interview<span class="token punctuation">.</span><span class="token class-name">StringExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> aload_0       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object."&lt;init&gt;":()V</span>       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>    <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>      line <span class="token number">3</span><span class="token operator">:</span> <span class="token number">0</span>           <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// String Java</span>       <span class="token number">2</span><span class="token operator">:</span> astore_1       <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// String Java</span>       <span class="token number">5</span><span class="token operator">:</span> astore_2       <span class="token number">6</span><span class="token operator">:</span> getstatic     #<span class="token number">3</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>       <span class="token number">9</span><span class="token operator">:</span> aload_1      <span class="token number">10</span><span class="token operator">:</span> aload_2      <span class="token number">11</span><span class="token operator">:</span> if_acmpne     <span class="token number">18</span>      <span class="token number">14</span><span class="token operator">:</span> iconst_1      <span class="token number">15</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">19</span>      <span class="token number">18</span><span class="token operator">:</span> iconst_0      <span class="token number">19</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Z)V</span>      <span class="token number">22</span><span class="token operator">:</span> <span class="token keyword">return</span>    <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>      line <span class="token number">5</span><span class="token operator">:</span> <span class="token number">0</span>      line <span class="token number">6</span><span class="token operator">:</span> <span class="token number">3</span>      line <span class="token number">7</span><span class="token operator">:</span> <span class="token number">6</span>      line <span class="token number">8</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从编译代码 #2&nbsp;可以看出，代码 “Ja”+”va”&nbsp;被直接编译成了 “Java”&nbsp;，因此 s1==s2 的结果才是 true，这就是编译器对字符串优化的结果。</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h3><hr><p>从&nbsp;String&nbsp;的源码入手，重点写了&nbsp;String&nbsp;的构造方法、equals() 方法和&nbsp;compareTo()&nbsp;方法，其中&nbsp;equals()&nbsp;重写了&nbsp;Object&nbsp;的 equals()&nbsp;方法，把引用对比改成了字符串值对比，也介绍了&nbsp;final&nbsp;修饰&nbsp;String&nbsp;的好处，可以提高效率和增强安全性，同时我们还介绍了&nbsp;String&nbsp;和 JVM 的一些执行细节。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你从0开始搭建个人博客</title>
      <link href="2020/07/09/shi-yong-ssh-mi-yao-lian-jie-github/"/>
      <url>2020/07/09/shi-yong-ssh-mi-yao-lian-jie-github/</url>
      
        <content type="html"><![CDATA[<h1 id="使用hexo框架搭建blog"><a href="#使用hexo框架搭建blog" class="headerlink" title="使用hexo框架搭建blog"></a><strong>使用hexo框架搭建blog</strong></h1><hr><h2 id="什么是-Hexo"><a href="#什么是-Hexo" class="headerlink" title="什么是 Hexo"></a><strong>什么是 Hexo</strong></h2><a id="more"></a><blockquote><ul><li>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li></ul></blockquote><hr><h2 id="什么是Github"><a href="#什么是Github" class="headerlink" title="什么是Github"></a><strong>什么是Github</strong></h2><blockquote><ul><li>GitHub是通过Git进行版本控制的软件源代码托管服务，由GitHub公司的使用Ruby on Rails编写而成。用户可以免费创建公开的代码仓库，2018年6月4日晚上被微软以75亿美元股票收购。</li></ul></blockquote><blockquote><ul><li>GitHub 是通过 Git 进行版本控制的软件源代码托管服务，由 GitHub 公司（曾称 Logical Awesome）的开发者 Chris Wanstrath、PJ Hyett 和 Tom Preston-Werner 使用 Ruby on Rails 编写而成。GitHub 同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，但是付费账户还可以创建私有的代码仓库。根据在 2009 年的 Git 用户调查，GitHub 是最流行的 Git 访问站点。除了允许个人和组织创建和访问保管中的代码以外，它也提供了一些方便社会化共同软件开发的功能，即一般人口中的社群功能，包括允许用户追踪其他用户、组织、软件库的动态，对软件代码的改动和 bug 提出评论等。GitHub 也提供了图表功能，用于概观显示开发者们怎样在代码库上工作以及软件的开发活跃程度。</li></ul></blockquote><hr><h2 id="GitHub-主要功能"><a href="#GitHub-主要功能" class="headerlink" title="GitHub 主要功能"></a><strong>GitHub 主要功能</strong></h2><blockquote><ul><li>GitHub 通常用于软件开发。GitHub 还支持以下格式和功能：</li></ul></blockquote><blockquote><ul><li>文档：包括自动生成的、采用类 Markdown 语言的 README 文件。<br>问题追踪系统（同时可用于功能需求）<br>Wiki<br>GitHub Pages 支持用户通过软件仓库创建静态网站或静态博客（通过一个名为 Jekyll 的软件实现）。<br>任务列表<br>甘特图<br>可视化的地理位置分析<br>预览 3D 渲染文件。预览功能通过 WebGL 和 Three.js 实现。<br>预览 Photoshop 的 PSD 文件，甚至可以比较同一文件的不同版本。<br>使用 GitHub 时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况。如果你希望体验 Git 飞一般的速度，可以使用国内的代码托管与开发协作平台 —— Gitee（gitee.com）。除了访问速度更快以外，Gitee 还提供了免费的私有仓库供个人开发者使用。同时，Gitee 也有着国内数一数二的开源生态，这里有非常多的优秀开源项目和开发者，你可以在这里和他们无障碍地沟通交流，不管是找开源项目还是分享自己的开源项目，Gitee 都是极佳的选择。作为国内代码托管平台的佼佼者，目前已经有超过 500 万名开发者在 Gitee 上托管了 1000 余万个代码仓库，而其提供了研发管理、代码托管、文档管理服务的企业版的服务客户也超过了 10 万家。</li></ul></blockquote><hr><h1 id="一、软件准备"><a href="#一、软件准备" class="headerlink" title="一、软件准备"></a><strong>一、软件准备</strong></h1><hr><h2 id="1、Git安装"><a href="#1、Git安装" class="headerlink" title="1、Git安装"></a><strong>1、Git安装</strong></h2><p><em>Git的详细安装步骤：</em></p><ul><li><p><a href=" https://nate-lin.gitee.io/2020/07/08/Git%E5%AE%89%E8%A3%85/">Git安装详细步骤</a></p></li><li><p><a href="https://nate-lin.gitee.io/2020/07/09/%E4%BD%BF%E7%94%A8SSH%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5Github/">使用SSH密钥连接Github</a></p></li></ul><hr><h2 id="2、Node-js"><a href="#2、Node-js" class="headerlink" title="2、Node.js"></a><strong>2、Node.js</strong></h2><p><em>Node的官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></em></p><p><em>Node安装：按照安装过程依次点击即可，安装过程很简单。</em></p><p><img src="https://i.loli.net/2020/07/13/ZOaf1W3hswHbtev.png"></p><hr><h1 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a><strong>二、安装Hexo</strong></h1><p><em>下面出现的检测全部是在git中进行的</em></p><hr><h2 id="检测node安装是否成功"><a href="#检测node安装是否成功" class="headerlink" title="检测node安装是否成功"></a><strong>检测node安装是否成功</strong></h2><hr><h2 id="1-查看node版本"><a href="#1-查看node版本" class="headerlink" title="1.查看node版本"></a><strong>1.查看node版本</strong></h2><blockquote><ul><li>node -v</li></ul></blockquote><p> <em>目的：因刚刚安装了node.js，现查看node的版本，检查是否安装成功，如出现以下情况即安装成功</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909134909847.png"></p><hr><h2 id="2-查看npm版本"><a href="#2-查看npm版本" class="headerlink" title="2.查看npm版本"></a><strong>2.查看npm版本</strong></h2><blockquote><ul><li>npm -v </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909134837211.png"></p><hr><h2 id="3-安装淘宝的cnpm-管理器"><a href="#3-安装淘宝的cnpm-管理器" class="headerlink" title="3.安装淘宝的cnpm 管理器"></a><strong>3.安装淘宝的cnpm 管理器</strong></h2><p><em>安装过程需要点时间，请耐心等待，如出现错误，再安装即可</em></p><blockquote><ul><li>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a> </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200910131255053.png"></p><hr><h2 id="4-查看cnpm版本"><a href="#4-查看cnpm版本" class="headerlink" title="4.查看cnpm版本"></a><strong>4.查看cnpm版本</strong></h2><blockquote><ul><li>cnpm -v</li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909135144887.png"></p><hr><h2 id="5-安装hexo框架"><a href="#5-安装hexo框架" class="headerlink" title="5.安装hexo框架"></a><strong>5.安装hexo框架</strong></h2><p><em>全局安装hexo博客</em></p><blockquote><ul><li>cnpm install -g hexo-cli </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909135234070.png"></p><h2 id="6-查看hexo版本"><a href="#6-查看hexo版本" class="headerlink" title="6.查看hexo版本"></a><strong>6.查看hexo版本</strong></h2><blockquote><ul><li>hexo -v</li></ul></blockquote><p><em>验证</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909135358860.png"></p><hr><h2 id="7-创建blog目录"><a href="#7-创建blog目录" class="headerlink" title="7.创建blog目录"></a><strong>7.创建blog目录</strong></h2><p><em>博客的东西全部在blog目录下，如安装过程中出现什么问题，可把blog删掉后重来即可</em></p><blockquote><ul><li>mkdir blog </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909135450283.png"></p><hr><h2 id="8-进入blog目录"><a href="#8-进入blog目录" class="headerlink" title="8.进入blog目录"></a><strong>8.进入blog目录</strong></h2><blockquote><ul><li>cd blog </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909135659805.png"></p><hr><h2 id="9-生成博客-初始化博客"><a href="#9-生成博客-初始化博客" class="headerlink" title="9.生成博客 初始化博客"></a><strong>9.生成博客 初始化博客</strong></h2><blockquote><ul><li>hexo init</li></ul></blockquote><p><em>过程需要点时间，请耐心等待，出现以下即安装完成</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909135824991.png"></p><hr><h2 id="10-启动本地博客服务"><a href="#10-启动本地博客服务" class="headerlink" title="10.启动本地博客服务"></a><strong>10.启动本地博客服务</strong></h2><blockquote><ul><li>hexo s </li></ul></blockquote><p><em>需要关闭则使用Ctrl+C下即可</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200910195143039.png"></p><p>打开浏览器输入<a href="http://localhost:4000/">http://localhost:4000</a> ，会变成以下页面</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909140202232.png"></p><hr><h2 id="11-本地访问地址-出现这个页面证明搭建成功啦"><a href="#11-本地访问地址-出现这个页面证明搭建成功啦" class="headerlink" title="11.本地访问地址(出现这个页面证明搭建成功啦)"></a><strong>11.本地访问地址(出现这个页面证明搭建成功啦)</strong></h2><p><em>去浏览器输入以下地址即可查看新创的博客（会自动默认给你新创一篇文章，题目为Hello World）</em></p><blockquote><ul><li><a href="http://localhost:4000/">http://localhost:4000/</a> </li></ul></blockquote><p><img src="https://i.loli.net/2020/07/13/ndlbvRKEXskqLTw.png"></p><hr><h2 id="12-创建新的文章"><a href="#12-创建新的文章" class="headerlink" title="12.创建新的文章"></a><strong>12.创建新的文章</strong></h2><blockquote><ul><li>hexo n “我的第一篇文章” </li></ul></blockquote><p><em>文章名称：我的第一篇文章</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909140250454.png"></p><hr><h2 id="13-清理"><a href="#13-清理" class="headerlink" title="13.清理"></a><strong>13.清理</strong></h2><blockquote><ul><li>hexo clean </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909140324351.png"></p><hr><h2 id="14-生成"><a href="#14-生成" class="headerlink" title="14.生成"></a><strong>14.生成</strong></h2><blockquote><ul><li>hexo g </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909140425244.png"></p><hr><h1 id="三、将网站部署到Github上"><a href="#三、将网站部署到Github上" class="headerlink" title="三、将网站部署到Github上"></a><strong>三、将网站部署到Github上</strong></h1><p><em>以后通过github访问我们的个人博客，接下来教你如何将自己的博客部署到github上公开使用</em></p><hr><h2 id="1-Github创建一个新的仓库-YourGithubName-github-io"><a href="#1-Github创建一个新的仓库-YourGithubName-github-io" class="headerlink" title="1.Github创建一个新的仓库 YourGithubName.github.io"></a><strong>1.Github创建一个新的仓库 YourGithubName.github.io</strong></h2><p><em>注册账号成功后登录进去，点击头像旁边的+号再点击New repository即可输入你的地址：昵称+github.io,后续输入地址即可访问（用户部署个人博客的github仓库的命名必须符合特定要求才行）</em></p><ul><li>Github官网：<a href="https://github.com/">https://github.com/</a>  </li></ul><p><img src="https://i.loli.net/2020/07/13/JaqomsAcS2i1GHV.png"></p><p><img src="https://i.loli.net/2020/07/13/avdxFGB7APHionN.png"></p><hr><h2 id="2-在blog目录下安装git部署插件"><a href="#2-在blog目录下安装git部署插件" class="headerlink" title="2.在blog目录下安装git部署插件"></a><strong>2.在blog目录下安装git部署插件</strong></h2><blockquote><ul><li>cnpm install –save hexo-deployer-git </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909140532156.png"></p><hr><h2 id="3-配置-config-yml（不懂这个命令的可以打开blog文件夹下的-config-yml修改一下内容保存即可）"><a href="#3-配置-config-yml（不懂这个命令的可以打开blog文件夹下的-config-yml修改一下内容保存即可）" class="headerlink" title="3.配置_config.yml（不懂这个命令的可以打开blog文件夹下的_config.yml修改一下内容保存即可）"></a><strong>3.配置_config.yml（不懂这个命令的可以打开blog文件夹下的_config.yml修改一下内容保存即可）</strong></h2><blockquote><ul><li>vim _config.yml</li></ul></blockquote><p><em>找到这部分代码，（原始的是没有repo，和branch的，而且type后面也没有东西）</em></p><p><em>对这段代码进行更改</em></p><p><em>type    一个名字，建议写成git方便识别</em></p><p><em>repo    repository仓库地址   将刚刚新建的github仓库地址复制到这里就可以了</em></p><p><em>branch  分支这里设置管理员  master</em></p><p><em>去刚刚新创仓库的地址copy，黏贴到repo即可</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200910105509325.png"></p><p><em>刚打开的页面情况如下，按要求进行修改</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909140801846.png"></p><p><em>更改以后进行保存，更改成功后</em></p><blockquote><p>deploy:</p><p>type: git</p><p>repo: <a href="https://github.com/YourGithubName/YourGithubName.github.io.git">https://github.com/YourGithubName/YourGithubName.github.io.git</a></p><p>branch: master</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200910105624056.png"></p><hr><h2 id="4-部署到Github仓库里"><a href="#4-部署到Github仓库里" class="headerlink" title="4.部署到Github仓库里"></a><strong>4.部署到Github仓库里</strong></h2><p><em>这是会叫你输入github的账号和密码，按要求输入即可</em></p><blockquote><ul><li>hexo d </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909141856565.png"></p><hr><h2 id="5-访问这个地址可以查看博客"><a href="#5-访问这个地址可以查看博客" class="headerlink" title="5.访问这个地址可以查看博客"></a><strong>5.访问这个地址可以查看博客</strong></h2><p><em>将本地文件部署到github新建的仓库中,然后通过访问 <strong>https://+自己的仓库名</strong> 就可以访问部署到github上的blog了，如页面出不来，多刷新几次即可</em></p><p><em>（如https:// nate-lin.github.io/）</em></p><blockquote><ul><li><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a> </li></ul></blockquote><p><img src="https://i.loli.net/2020/07/13/dtIOvScp8ahXNQn.png"></p><hr><h1 id="四、更换Blog的主题"><a href="#四、更换Blog的主题" class="headerlink" title="四、更换Blog的主题"></a><strong>四、更换Blog的主题</strong></h1><p><em>系统生成的主题我们看着不太喜欢，可以更换自己喜欢的主题，下面我以yilia-plus主题为主，也可以更换自己想更换的主题，操作都是一样的</em></p><hr><h2 id="1-下载itmuch主题到本地"><a href="#1-下载itmuch主题到本地" class="headerlink" title="1.下载itmuch主题到本地"></a><strong>1.下载itmuch主题到本地</strong></h2><p><em>blog文件会产生一个yilia-plus的的文件夹即为主题的存放位置</em></p><blockquote><ul><li>git clone <a href="https://gitee.com/nate-lin/yilia-plus.git">https://gitee.com/nate-lin/yilia-plus.git</a> themes/yilia-plus </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909142307784.png"></p><hr><h2 id="2-修改hexo根目录下的-config-yml-文件"><a href="#2-修改hexo根目录下的-config-yml-文件" class="headerlink" title="2.修改hexo根目录下的 _config.yml 文件"></a><strong>2.修改hexo根目录下的 _config.yml 文件</strong></h2><p><em>找到Blog文件中的_config.yml文件，使用编译器打开，建议使用   Visual Studio Code打开，找到这部分代码（即theme）<br>将冒号后面的内容改为刚刚新建的itmuch</em></p><ul><li>theme:yilia-plus</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909142944182.png"></p><hr><h2 id="3-清理一下（清除数据库之类）"><a href="#3-清理一下（清除数据库之类）" class="headerlink" title="3.清理一下（清除数据库之类）"></a><strong>3.清理一下（清除数据库之类）</strong></h2><blockquote><ul><li>hexo c </li></ul></blockquote><p><img src="https://i.loli.net/2020/07/13/bk1aWpvVYQhlPod.png"></p><hr><h2 id="4-生成静态网站"><a href="#4-生成静态网站" class="headerlink" title="4.生成静态网站"></a><strong>4.生成静态网站</strong></h2><blockquote><ul><li>hexo g </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909150050347.png"></p><hr><h2 id="5-部署到远程Github仓库"><a href="#5-部署到远程Github仓库" class="headerlink" title="5.部署到远程Github仓库"></a><strong>5.部署到远程Github仓库</strong></h2><blockquote><ul><li>hexo d </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909150236010.png"></p><hr><h2 id="6-查看博客"><a href="#6-查看博客" class="headerlink" title="6.查看博客"></a><strong>6.查看博客</strong></h2><p><strong>启动本地博客服务</strong></p><blockquote><ul><li>hexo s </li></ul></blockquote><p><strong>查看博客</strong></p><blockquote><ul><li>localhost:4000/</li></ul></blockquote><p><em>Ctrl+c结束</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909144215466.png"></p><h2 id="7-出现以下界面，表面已实现主题的更改。"><a href="#7-出现以下界面，表面已实现主题的更改。" class="headerlink" title="7.出现以下界面，表面已实现主题的更改。"></a><strong>7.出现以下界面，表面已实现主题的更改。</strong></h2><p><em>多刷新几次即可</em>（如：<a href="https://nate-lin.github.io/%EF%BC%89">https://nate-lin.github.io/）</a></p><blockquote><ul><li><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a> </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909145938778.png"></p><hr><h1 id="五、博客图片的存储空间"><a href="#五、博客图片的存储空间" class="headerlink" title="五、博客图片的存储空间"></a><strong>五、博客图片的存储空间</strong></h1><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a><strong>准备工作</strong></h2><ul><li>方法一<ul><li>注册一个“sm.ms”账号,网址： <em><a href="https://sm.ms/">https://sm.ms/</a></em></li><li>注册成功后进行登录，即可上传。</li><li>此网站免费，不过图片会延迟一点点出来哦。</li></ul></li></ul><hr><ul><li>方法二（个人推荐）<ul><li>下载typora</li><li>注册一个阿里云账号</li><li>详细步骤：<a href="https://mp.weixin.qq.com/s?__biz=MzI3MzY0MzU1MQ==&amp;mid=2247483885&amp;idx=1&amp;sn=9b7221713a96ca1dd50a54c918b38492&amp;chksm=eb21609ddc56e98b74d846ca5f8c40ba449149b6c9b9ae20887113f98dffb7297254a79a9e8f&amp;mpshare=1&amp;scene=1&amp;srcid=0728Y3CMGzHAoC3Y5AwAhoAX&amp;sharer_sharetime=1595939249988&amp;sharer_shareid=a6a90b462d3ae907b8a9df0c58093152&amp;exportkey=A0HtTakZZK5BacJxARuwxS0%3D&amp;pass_ticket=%2BM6%2Fj3sywxUCmv8T%2B96E1LI2LW8%2BmE7mVD5hRMmZZzV366LbQ4BE4sMDns7POY8P&amp;wx_header=0#rd">请点击这里</a></li></ul></li></ul><hr><ul><li>方法三：注册一个“七牛云”账号，网址： <em><a href="https://portal.qiniu.com/signup">https://portal.qiniu.com/signup</a></em><ul><li>需要购买域名(不买域名将一个月后自动回收)。</li><li>注册成功后进行登录，点击下图的步骤：</li></ul></li></ul><p><img src="https://i.loli.net/2020/07/13/86EQxXgOudwM4Yt.png"></p><p><img src="https://i.loli.net/2020/07/13/OlSY6oKHVG8PLMm.png"></p><p><img src="https://i.loli.net/2020/07/13/UOdTXnh1lIEGZMy.png"></p><p><strong>总结</strong></p><p>首先需要环境准备（Git、node）使用它们装hexo,后使用hexo的命令部署到github上去，更换自己喜欢的主题、利用千牛云存放图片、博客利用千牛云的链接进行访问，过程中会遇到各种各样的问题，耐心操作即可，过程不复杂，一步步按步骤来即可。后期可以自行更改克隆下主题的照片和超链接，我们现先把博客搭建成功，后期的有时间再慢慢完善。</p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你从0开始搭建个人博客</title>
      <link href="2020/07/09/shou-ba-shou-jiao-ni-cong-0-kai-shi-da-jian-ge-ren-bo-ke/"/>
      <url>2020/07/09/shou-ba-shou-jiao-ni-cong-0-kai-shi-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="使用hexo框架搭建blog"><a href="#使用hexo框架搭建blog" class="headerlink" title="使用hexo框架搭建blog"></a><strong>使用hexo框架搭建blog</strong></h1><hr><h2 id="什么是-Hexo"><a href="#什么是-Hexo" class="headerlink" title="什么是 Hexo"></a><strong>什么是 Hexo</strong></h2><a id="more"></a><blockquote><ul><li>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li></ul></blockquote><hr><h2 id="什么是Github"><a href="#什么是Github" class="headerlink" title="什么是Github"></a><strong>什么是Github</strong></h2><blockquote><ul><li>GitHub是通过Git进行版本控制的软件源代码托管服务，由GitHub公司的使用Ruby on Rails编写而成。用户可以免费创建公开的代码仓库，2018年6月4日晚上被微软以75亿美元股票收购。</li></ul></blockquote><blockquote><ul><li>GitHub 是通过 Git 进行版本控制的软件源代码托管服务，由 GitHub 公司（曾称 Logical Awesome）的开发者 Chris Wanstrath、PJ Hyett 和 Tom Preston-Werner 使用 Ruby on Rails 编写而成。GitHub 同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，但是付费账户还可以创建私有的代码仓库。根据在 2009 年的 Git 用户调查，GitHub 是最流行的 Git 访问站点。除了允许个人和组织创建和访问保管中的代码以外，它也提供了一些方便社会化共同软件开发的功能，即一般人口中的社群功能，包括允许用户追踪其他用户、组织、软件库的动态，对软件代码的改动和 bug 提出评论等。GitHub 也提供了图表功能，用于概观显示开发者们怎样在代码库上工作以及软件的开发活跃程度。</li></ul></blockquote><hr><h2 id="GitHub-主要功能"><a href="#GitHub-主要功能" class="headerlink" title="GitHub 主要功能"></a><strong>GitHub 主要功能</strong></h2><blockquote><ul><li>GitHub 通常用于软件开发。GitHub 还支持以下格式和功能：</li></ul></blockquote><blockquote><ul><li>文档：包括自动生成的、采用类 Markdown 语言的 README 文件。<br>问题追踪系统（同时可用于功能需求）<br>Wiki<br>GitHub Pages 支持用户通过软件仓库创建静态网站或静态博客（通过一个名为 Jekyll 的软件实现）。<br>任务列表<br>甘特图<br>可视化的地理位置分析<br>预览 3D 渲染文件。预览功能通过 WebGL 和 Three.js 实现。<br>预览 Photoshop 的 PSD 文件，甚至可以比较同一文件的不同版本。<br>使用 GitHub 时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况。如果你希望体验 Git 飞一般的速度，可以使用国内的代码托管与开发协作平台 —— Gitee（gitee.com）。除了访问速度更快以外，Gitee 还提供了免费的私有仓库供个人开发者使用。同时，Gitee 也有着国内数一数二的开源生态，这里有非常多的优秀开源项目和开发者，你可以在这里和他们无障碍地沟通交流，不管是找开源项目还是分享自己的开源项目，Gitee 都是极佳的选择。作为国内代码托管平台的佼佼者，目前已经有超过 500 万名开发者在 Gitee 上托管了 1000 余万个代码仓库，而其提供了研发管理、代码托管、文档管理服务的企业版的服务客户也超过了 10 万家。</li></ul></blockquote><hr><h1 id="一、软件准备"><a href="#一、软件准备" class="headerlink" title="一、软件准备"></a><strong>一、软件准备</strong></h1><hr><h2 id="1、Git安装"><a href="#1、Git安装" class="headerlink" title="1、Git安装"></a><strong>1、Git安装</strong></h2><p><em>Git的详细安装步骤：</em></p><ul><li><p><a href=" https://nate-lin.gitee.io/2020/07/08/Git%E5%AE%89%E8%A3%85/">Git安装详细步骤</a></p></li><li><p><a href="https://nate-lin.gitee.io/2020/07/09/%E4%BD%BF%E7%94%A8SSH%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5Github/">使用SSH密钥连接Github</a></p></li></ul><hr><h2 id="2、Node-js"><a href="#2、Node-js" class="headerlink" title="2、Node.js"></a><strong>2、Node.js</strong></h2><p><em>Node的官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></em></p><p><em>Node安装：按照安装过程依次点击即可，安装过程很简单。</em></p><p><img src="https://i.loli.net/2020/07/13/ZOaf1W3hswHbtev.png"></p><hr><h1 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a><strong>二、安装Hexo</strong></h1><p><em>下面出现的检测全部是在git中进行的</em></p><hr><h2 id="检测node安装是否成功"><a href="#检测node安装是否成功" class="headerlink" title="检测node安装是否成功"></a><strong>检测node安装是否成功</strong></h2><hr><h2 id="1-查看node版本"><a href="#1-查看node版本" class="headerlink" title="1.查看node版本"></a><strong>1.查看node版本</strong></h2><blockquote><ul><li>node -v</li></ul></blockquote><p> <em>目的：因刚刚安装了node.js，现查看node的版本，检查是否安装成功，如出现以下情况即安装成功</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909134909847.png" alt="image-20200909134909847"></p><hr><h2 id="2-查看npm版本"><a href="#2-查看npm版本" class="headerlink" title="2.查看npm版本"></a><strong>2.查看npm版本</strong></h2><blockquote><ul><li>npm -v </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909134837211.png" alt="image-20200909134837211"></p><hr><h2 id="3-安装淘宝的cnpm-管理器"><a href="#3-安装淘宝的cnpm-管理器" class="headerlink" title="3.安装淘宝的cnpm 管理器"></a><strong>3.安装淘宝的cnpm 管理器</strong></h2><p><em>安装过程需要点时间，请耐心等待，如出现错误，再安装即可</em></p><blockquote><ul><li>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a> </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200910131255053.png" alt="image-20200910131255053"></p><hr><h2 id="4-查看cnpm版本"><a href="#4-查看cnpm版本" class="headerlink" title="4.查看cnpm版本"></a><strong>4.查看cnpm版本</strong></h2><blockquote><ul><li>cnpm -v</li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909135144887.png" alt="image-20200909135144887"></p><hr><h2 id="5-安装hexo框架"><a href="#5-安装hexo框架" class="headerlink" title="5.安装hexo框架"></a><strong>5.安装hexo框架</strong></h2><p><em>全局安装hexo博客</em></p><blockquote><ul><li>cnpm install -g hexo-cli </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909135234070.png" alt="image-20200909135234070"></p><h2 id="6-查看hexo版本"><a href="#6-查看hexo版本" class="headerlink" title="6.查看hexo版本"></a><strong>6.查看hexo版本</strong></h2><blockquote><ul><li>hexo -v</li></ul></blockquote><p><em>验证</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909135358860.png" alt="image-20200909135358860"></p><hr><h2 id="7-创建blog目录"><a href="#7-创建blog目录" class="headerlink" title="7.创建blog目录"></a><strong>7.创建blog目录</strong></h2><p><em>博客的东西全部在blog目录下，如安装过程中出现什么问题，可把blog删掉后重来即可</em></p><blockquote><ul><li>mkdir blog </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909135450283.png" alt="image-20200909135450283"></p><hr><h2 id="8-进入blog目录"><a href="#8-进入blog目录" class="headerlink" title="8.进入blog目录"></a><strong>8.进入blog目录</strong></h2><blockquote><ul><li>cd blog </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909135659805.png" alt="image-20200909135659805"></p><hr><h2 id="9-生成博客-初始化博客"><a href="#9-生成博客-初始化博客" class="headerlink" title="9.生成博客 初始化博客"></a><strong>9.生成博客 初始化博客</strong></h2><blockquote><ul><li>hexo init</li></ul></blockquote><p><em>过程需要点时间，请耐心等待，出现以下即安装完成</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909135824991.png" alt="image-20200909135824991"></p><hr><h2 id="10-启动本地博客服务"><a href="#10-启动本地博客服务" class="headerlink" title="10.启动本地博客服务"></a><strong>10.启动本地博客服务</strong></h2><blockquote><ul><li>hexo s </li></ul></blockquote><p><em>需要关闭则使用Ctrl+C下即可</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200910195143039.png" alt="image-20200910195143039"></p><p>打开浏览器输入<a href="http://localhost:4000/">http://localhost:4000</a> ，会变成以下页面</p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909140202232.png" alt="image-20200909140202232"></p><hr><h2 id="11-本地访问地址-出现这个页面证明搭建成功啦"><a href="#11-本地访问地址-出现这个页面证明搭建成功啦" class="headerlink" title="11.本地访问地址(出现这个页面证明搭建成功啦)"></a><strong>11.本地访问地址(出现这个页面证明搭建成功啦)</strong></h2><p><em>去浏览器输入以下地址即可查看新创的博客（会自动默认给你新创一篇文章，题目为Hello World）</em></p><blockquote><ul><li><a href="http://localhost:4000/">http://localhost:4000/</a> </li></ul></blockquote><p><img src="https://i.loli.net/2020/07/13/ndlbvRKEXskqLTw.png"></p><hr><h2 id="12-创建新的文章"><a href="#12-创建新的文章" class="headerlink" title="12.创建新的文章"></a><strong>12.创建新的文章</strong></h2><blockquote><ul><li>hexo n “我的第一篇文章” </li></ul></blockquote><p><em>文章名称：我的第一篇文章</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909140250454.png" alt="image-20200909140250454"></p><hr><h2 id="13-清理"><a href="#13-清理" class="headerlink" title="13.清理"></a><strong>13.清理</strong></h2><blockquote><ul><li>hexo clean </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909140324351.png" alt="image-20200909140324351"></p><hr><h2 id="14-生成"><a href="#14-生成" class="headerlink" title="14.生成"></a><strong>14.生成</strong></h2><blockquote><ul><li>hexo g </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909140425244.png" alt="image-20200909140425244"></p><hr><h1 id="三、将网站部署到Github上"><a href="#三、将网站部署到Github上" class="headerlink" title="三、将网站部署到Github上"></a><strong>三、将网站部署到Github上</strong></h1><p><em>以后通过github访问我们的个人博客，接下来教你如何将自己的博客部署到github上公开使用</em></p><hr><h2 id="1-Github创建一个新的仓库-YourGithubName-github-io"><a href="#1-Github创建一个新的仓库-YourGithubName-github-io" class="headerlink" title="1.Github创建一个新的仓库 YourGithubName.github.io"></a><strong>1.Github创建一个新的仓库 YourGithubName.github.io</strong></h2><p><em>注册账号成功后登录进去，点击头像旁边的+号再点击New repository即可输入你的地址：昵称+github.io,后续输入地址即可访问（用户部署个人博客的github仓库的命名必须符合特定要求才行）</em></p><ul><li>Github官网：<a href="https://github.com/">https://github.com/</a>  </li></ul><p><img src="https://i.loli.net/2020/07/13/JaqomsAcS2i1GHV.png"></p><p><img src="https://i.loli.net/2020/07/13/avdxFGB7APHionN.png"></p><hr><h2 id="2-在blog目录下安装git部署插件"><a href="#2-在blog目录下安装git部署插件" class="headerlink" title="2.在blog目录下安装git部署插件"></a><strong>2.在blog目录下安装git部署插件</strong></h2><blockquote><ul><li>cnpm install –save hexo-deployer-git </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909140532156.png" alt="image-20200909140532156"></p><hr><h2 id="3-配置-config-yml（不懂这个命令的可以打开blog文件夹下的-config-yml修改一下内容保存即可）"><a href="#3-配置-config-yml（不懂这个命令的可以打开blog文件夹下的-config-yml修改一下内容保存即可）" class="headerlink" title="3.配置_config.yml（不懂这个命令的可以打开blog文件夹下的_config.yml修改一下内容保存即可）"></a><strong>3.配置_config.yml（不懂这个命令的可以打开blog文件夹下的_config.yml修改一下内容保存即可）</strong></h2><blockquote><ul><li>vim _config.yml</li></ul></blockquote><p><em>找到这部分代码，（原始的是没有repo，和branch的，而且type后面也没有东西）</em></p><p><em>对这段代码进行更改</em></p><p><em>type    一个名字，建议写成git方便识别</em></p><p><em>repo    repository仓库地址   将刚刚新建的github仓库地址复制到这里就可以了</em></p><p><em>branch  分支这里设置管理员  master</em></p><p><em>去刚刚新创仓库的地址copy，黏贴到repo即可</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200910105509325.png" alt="image-20200910105509325"></p><p><em>刚打开的页面情况如下，按要求进行修改</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909140801846.png" alt="image-20200909140801846"></p><p><em>更改以后进行保存，更改成功后</em></p><blockquote><p>deploy:</p><p>type: git</p><p>repo: <a href="https://github.com/YourGithubName/YourGithubName.github.io.git">https://github.com/YourGithubName/YourGithubName.github.io.git</a></p><p>branch: master</p></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200910105624056.png" alt="image-20200910105624056"></p><hr><h2 id="4-部署到Github仓库里"><a href="#4-部署到Github仓库里" class="headerlink" title="4.部署到Github仓库里"></a><strong>4.部署到Github仓库里</strong></h2><p><em>这是会叫你输入github的账号和密码，按要求输入即可</em></p><blockquote><ul><li>hexo d </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909141856565.png" alt="image-20200909141856565"></p><hr><h2 id="5-访问这个地址可以查看博客"><a href="#5-访问这个地址可以查看博客" class="headerlink" title="5.访问这个地址可以查看博客"></a><strong>5.访问这个地址可以查看博客</strong></h2><p><em>将本地文件部署到github新建的仓库中,然后通过访问 <strong>https://+自己的仓库名</strong> 就可以访问部署到github上的blog了，如页面出不来，多刷新几次即可</em></p><p><em>（如https:// nate-lin.github.io/）</em></p><blockquote><ul><li><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a> </li></ul></blockquote><p><img src="https://i.loli.net/2020/07/13/dtIOvScp8ahXNQn.png"></p><hr><h1 id="四、更换Blog的主题"><a href="#四、更换Blog的主题" class="headerlink" title="四、更换Blog的主题"></a><strong>四、更换Blog的主题</strong></h1><p><em>系统生成的主题我们看着不太喜欢，可以更换自己喜欢的主题，下面我以yilia-plus主题为主，也可以更换自己想更换的主题，操作都是一样的</em></p><hr><h2 id="1-下载itmuch主题到本地"><a href="#1-下载itmuch主题到本地" class="headerlink" title="1.下载itmuch主题到本地"></a><strong>1.下载itmuch主题到本地</strong></h2><p><em>blog文件会产生一个yilia-plus的的文件夹即为主题的存放位置</em></p><blockquote><ul><li>git clone <a href="https://gitee.com/nate-lin/yilia-plus.git">https://gitee.com/nate-lin/yilia-plus.git</a> themes/yilia-plus </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909142307784.png" alt="image-20200909142307784"></p><hr><h2 id="2-修改hexo根目录下的-config-yml-文件"><a href="#2-修改hexo根目录下的-config-yml-文件" class="headerlink" title="2.修改hexo根目录下的 _config.yml 文件"></a><strong>2.修改hexo根目录下的 _config.yml 文件</strong></h2><p><em>找到Blog文件中的_config.yml文件，使用编译器打开，建议使用   Visual Studio Code打开，找到这部分代码（即theme）<br>将冒号后面的内容改为刚刚新建的itmuch</em></p><ul><li>theme:yilia-plus</li></ul><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909142944182.png" alt="image-20200909142944182"></p><hr><h2 id="3-清理一下（清除数据库之类）"><a href="#3-清理一下（清除数据库之类）" class="headerlink" title="3.清理一下（清除数据库之类）"></a><strong>3.清理一下（清除数据库之类）</strong></h2><blockquote><ul><li>hexo c </li></ul></blockquote><p><img src="https://i.loli.net/2020/07/13/bk1aWpvVYQhlPod.png"></p><hr><h2 id="4-生成静态网站"><a href="#4-生成静态网站" class="headerlink" title="4.生成静态网站"></a><strong>4.生成静态网站</strong></h2><blockquote><ul><li>hexo g </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909150050347.png" alt="image-20200909150050347"></p><hr><h2 id="5-部署到远程Github仓库"><a href="#5-部署到远程Github仓库" class="headerlink" title="5.部署到远程Github仓库"></a><strong>5.部署到远程Github仓库</strong></h2><blockquote><ul><li>hexo d </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909150236010.png" alt="image-20200909150236010"></p><hr><h2 id="6-查看博客"><a href="#6-查看博客" class="headerlink" title="6.查看博客"></a><strong>6.查看博客</strong></h2><p><strong>启动本地博客服务</strong></p><blockquote><ul><li>hexo s </li></ul></blockquote><p><strong>查看博客</strong></p><blockquote><ul><li>localhost:4000/</li></ul></blockquote><p><em>Ctrl+c结束</em></p><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909144215466.png" alt="image-20200909144215466"></p><h2 id="7-出现以下界面，表面已实现主题的更改。"><a href="#7-出现以下界面，表面已实现主题的更改。" class="headerlink" title="7.出现以下界面，表面已实现主题的更改。"></a><strong>7.出现以下界面，表面已实现主题的更改。</strong></h2><p><em>多刷新几次即可</em>（如：<a href="https://nate-lin.github.io/%EF%BC%89">https://nate-lin.github.io/）</a></p><blockquote><ul><li><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a> </li></ul></blockquote><p><img src="https://blog-lin1.oss-cn-shenzhen.aliyuncs.com/img/image-20200909145938778.png" alt="image-20200909145938778"></p><hr><h1 id="五、博客图片的存储空间"><a href="#五、博客图片的存储空间" class="headerlink" title="五、博客图片的存储空间"></a><strong>五、博客图片的存储空间</strong></h1><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a><strong>准备工作</strong></h2><ul><li>方法一<ul><li>注册一个“sm.ms”账号,网址： <em><a href="https://sm.ms/">https://sm.ms/</a></em></li><li>注册成功后进行登录，即可上传。</li><li>此网站免费，不过图片会延迟一点点出来哦。</li></ul></li></ul><hr><ul><li>方法二（个人推荐）<ul><li>下载typora</li><li>注册一个阿里云账号</li><li>详细步骤：<a href="https://mp.weixin.qq.com/s?__biz=MzI3MzY0MzU1MQ==&amp;mid=2247483885&amp;idx=1&amp;sn=9b7221713a96ca1dd50a54c918b38492&amp;chksm=eb21609ddc56e98b74d846ca5f8c40ba449149b6c9b9ae20887113f98dffb7297254a79a9e8f&amp;mpshare=1&amp;scene=1&amp;srcid=0728Y3CMGzHAoC3Y5AwAhoAX&amp;sharer_sharetime=1595939249988&amp;sharer_shareid=a6a90b462d3ae907b8a9df0c58093152&amp;exportkey=A0HtTakZZK5BacJxARuwxS0%3D&amp;pass_ticket=%2BM6%2Fj3sywxUCmv8T%2B96E1LI2LW8%2BmE7mVD5hRMmZZzV366LbQ4BE4sMDns7POY8P&amp;wx_header=0#rd">请点击这里</a></li></ul></li></ul><hr><ul><li>方法三：注册一个“七牛云”账号，网址： <em><a href="https://portal.qiniu.com/signup">https://portal.qiniu.com/signup</a></em><ul><li>需要购买域名(不买域名将一个月后自动回收)。</li><li>注册成功后进行登录，点击下图的步骤：</li></ul></li></ul><p><img src="https://i.loli.net/2020/07/13/86EQxXgOudwM4Yt.png"></p><p><img src="https://i.loli.net/2020/07/13/OlSY6oKHVG8PLMm.png"></p><p><img src="https://i.loli.net/2020/07/13/UOdTXnh1lIEGZMy.png"></p><p><strong>总结</strong></p><p>首先需要环境准备（Git、node）使用它们装hexo,后使用hexo的命令部署到github上去，更换自己喜欢的主题、利用千牛云存放图片、博客利用千牛云的链接进行访问，过程中会遇到各种各样的问题，耐心操作即可，过程不复杂，一步步按步骤来即可。后期可以自行更改克隆下主题的照片和超链接，我们现先把博客搭建成功，后期的有时间再慢慢完善。</p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git安装</title>
      <link href="2020/07/08/git-an-zhuang/"/>
      <url>2020/07/08/git-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是Git"><a href="#一、什么是Git" class="headerlink" title="一、什么是Git?"></a><strong>一、什么是Git?</strong></h1><hr><blockquote><ul><li><strong>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</strong></li></ul></blockquote><blockquote><ul><li><strong>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</strong></li></ul></blockquote><a id="more"></a><blockquote><ul><li><strong>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</strong></li></ul></blockquote><hr><blockquote><ul><li><em>实际项目开发中，我们经常会用一些版本控制器来托管自己的代码，今天就来总结下Git的相关用法。</em>  </li></ul></blockquote><blockquote><ul><li><em>目的：通过Git管理github托管项目代码。</em> </li></ul></blockquote><h1 id="二、下载安装Git"><a href="#二、下载安装Git" class="headerlink" title="二、下载安装Git"></a><strong>二、下载安装Git</strong></h1><hr><h2 id="1、下载Git"><a href="#1、下载Git" class="headerlink" title="1、下载Git"></a><strong>1、下载Git</strong></h2><hr><blockquote><p>官方地址为：<a href="https://git-scm.com/">https://git-scm.com/</a>  <em>(根据自己电脑版本进行下载）</em></p></blockquote><hr><p><img src="https://i.loli.net/2020/07/13/yMuHbt1pDhYL2rm.png"></p><p><img src="https://i.loli.net/2020/07/13/nO8TdKzsPYQkwyJ.png"></p><p><img src="https://i.loli.net/2020/07/13/ZBfDCsR9o8PJHmI.png"></p><h2 id="2、下载完之后，双击安装"><a href="#2、下载完之后，双击安装" class="headerlink" title="2、下载完之后，双击安装"></a><strong>2、下载完之后，双击安装</strong></h2><hr><p><img src="https://i.loli.net/2020/07/13/jkD7MHT4uwAmopz.png"></p><h2 id="3、选择安装目录"><a href="#3、选择安装目录" class="headerlink" title="3、选择安装目录"></a><strong>3、选择安装目录</strong></h2><hr><p><img src="https://s1.ax1x.com/2020/07/20/Uf75Js.png"></p><h2 id="4、选择组件"><a href="#4、选择组件" class="headerlink" title="4、选择组件"></a><strong>4、选择组件</strong></h2><hr><p><img src="https://i.loli.net/2020/07/13/FEAXKazf7SrJnY3.png"></p><h2 id="5、开始菜单目录名设置"><a href="#5、开始菜单目录名设置" class="headerlink" title="5、开始菜单目录名设置"></a><strong>5、开始菜单目录名设置</strong></h2><hr><p><img src="https://i.loli.net/2020/07/13/xUVIrGQ8Svhc14i.png"></p><h2 id="6、选择使用命令行环境"><a href="#6、选择使用命令行环境" class="headerlink" title="6、选择使用命令行环境"></a><strong>6、选择使用命令行环境</strong></h2><hr><p><img src="https://i.loli.net/2020/07/13/4Hc7pznTwijhRtx.png"></p><p><img src="https://i.loli.net/2020/07/13/rIgc9xWGEQ5f1JD.png"></p><h2 id="7、以下六步默认，直接点击下一步"><a href="#7、以下六步默认，直接点击下一步" class="headerlink" title="7、以下六步默认，直接点击下一步"></a><strong>7、以下六步默认，直接点击下一步</strong></h2><hr><p><img src="https://i.loli.net/2020/07/13/FD73CTNuJHoxaUt.png"></p><p><img src="https://i.loli.net/2020/07/13/iGMZljOSIdazPgR.png"></p><p><img src="https://i.loli.net/2020/07/13/NtnvrjaHZMJTb9u.png"></p><p><img src="https://i.loli.net/2020/07/13/zpjEwqBKDShRJHQ.png"></p><p><img src="https://i.loli.net/2020/07/13/zENtc2O1dqlYZIF.png"></p><p><img src="https://i.loli.net/2020/07/13/jKSbfswQ5FnEyDc.png"></p><h2 id="8、安装完成"><a href="#8、安装完成" class="headerlink" title="8、安装完成"></a><strong>8、安装完成</strong></h2><hr><p><img src="https://i.loli.net/2020/07/13/7a3RcolKjUzAGCP.png"></p><h2 id="9、检验是否安装成功"><a href="#9、检验是否安装成功" class="headerlink" title="9、检验是否安装成功"></a><strong>9、检验是否安装成功</strong></h2><blockquote><p><em>回到电脑桌面，鼠标右击如果看到有两个git单词则安装成功</em></p></blockquote><hr><p><img src="https://i.loli.net/2020/07/13/SwxjGlM7eHUR8sZ.png"></p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
